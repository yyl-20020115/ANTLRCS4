/*
 * Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
using org.antlr.v4.runtime.misc;

namespace org.antlr.v4.runtime;

/**
 * This class provides a default implementation of the {@link Vocabulary}
 * interface.
 *
 * @author Sam Harwell
 */
public class VocabularyImpl : Vocabulary
{
    private static readonly string[] EMPTY_NAMES = Array.Empty<string>();

    /**
	 * Gets an empty {@link Vocabulary} instance.
	 *
	 * <p>
	 * No literal or symbol names are assigned to token types, so
	 * {@link #getDisplayName(int)} returns the numeric value for all tokens
	 * except {@link Token#EOF}.</p>
	 */
    public static readonly VocabularyImpl EMPTY_VOCABULARY = new(EMPTY_NAMES, EMPTY_NAMES, EMPTY_NAMES);


    private readonly string[] literalNames;

    private readonly string[] symbolicNames;

    private readonly string[] displayNames;

    private readonly int maxTokenType;

    /**
	 * Constructs a new instance of {@link VocabularyImpl} from the specified
	 * literal and symbolic token names.
	 *
	 * @param literalNames The literal names assigned to tokens, or {@code null}
	 * if no literal names are assigned.
	 * @param symbolicNames The symbolic names assigned to tokens, or
	 * {@code null} if no symbolic names are assigned.
	 *
	 * @see #getLiteralName(int)
	 * @see #getSymbolicName(int)
	 */
    public VocabularyImpl(string[] literalNames, string[] symbolicNames) : this(literalNames, symbolicNames, null)
    {
    }

    /**
	 * Constructs a new instance of {@link VocabularyImpl} from the specified
	 * literal, symbolic, and display token names.
	 *
	 * @param literalNames The literal names assigned to tokens, or {@code null}
	 * if no literal names are assigned.
	 * @param symbolicNames The symbolic names assigned to tokens, or
	 * {@code null} if no symbolic names are assigned.
	 * @param displayNames The display names assigned to tokens, or {@code null}
	 * to use the values in {@code literalNames} and {@code symbolicNames} as
	 * the source of display names, as described in
	 * {@link #getDisplayName(int)}.
	 *
	 * @see #getLiteralName(int)
	 * @see #getSymbolicName(int)
	 * @see #getDisplayName(int)
	 */
    public VocabularyImpl(string[] literalNames, string[] symbolicNames, string[] displayNames)
    {
        this.literalNames = literalNames ?? EMPTY_NAMES;
        this.symbolicNames = symbolicNames ?? EMPTY_NAMES;
        this.displayNames = displayNames ?? EMPTY_NAMES;
        // See note here on -1 part: https://github.com/antlr/antlr4/pull/1146
        this.maxTokenType =
            Math.Max(this.displayNames.Length,
                     Math.Max(this.literalNames.Length, this.symbolicNames.Length)) - 1;
    }

    /**
	 * Returns a {@link VocabularyImpl} instance from the specified set of token
	 * names. This method acts as a compatibility layer for the single
	 * {@code tokenNames} array generated by previous releases of ANTLR.
	 *
	 * <p>The resulting vocabulary instance returns {@code null} for
	 * {@link #getLiteralName(int)} and {@link #getSymbolicName(int)}, and the
	 * value from {@code tokenNames} for the display names.</p>
	 *
	 * @param tokenNames The token names, or {@code null} if no token names are
	 * available.
	 * @return A {@link Vocabulary} instance which uses {@code tokenNames} for
	 * the display names of tokens.
	 */
    public static Vocabulary FromTokenNames(string[] tokenNames)
    {
        if (tokenNames == null || tokenNames.Length == 0)
        {
            return EMPTY_VOCABULARY;
        }

        string[] literalNames = Arrays.CopyOf(tokenNames, tokenNames.Length);
        string[] symbolicNames = Arrays.CopyOf(tokenNames, tokenNames.Length);
        for (int i = 0; i < tokenNames.Length; i++)
        {
            var tokenName = tokenNames[i];
            if (tokenName == null)
            {
                continue;
            }

            if (tokenName.Length > 0)
            {
                char firstChar = tokenName[0];
                if (firstChar == '\'')
                {
                    symbolicNames[i] = null;
                    continue;
                }
                else if (char.IsUpper(firstChar))
                {
                    literalNames[i] = null;
                    continue;
                }
            }

            // wasn't a literal or symbolic name
            literalNames[i] = null;
            symbolicNames[i] = null;
        }

        return new VocabularyImpl(literalNames, symbolicNames, tokenNames);
    }

    //@Override
    public virtual int MaxTokenType => maxTokenType;

    //@Override
    public virtual string GetLiteralName(int tokenType) => tokenType >= 0 && tokenType < literalNames.Length ? literalNames[tokenType] : null;

    //@Override
    public string GetSymbolicName(int tokenType)
    {
        return tokenType >= 0 && tokenType < symbolicNames.Length ? symbolicNames[tokenType] : tokenType == Token.EOF ? "EOF" : null;
    }

    //@Override
    public string GetDisplayName(int tokenType)
    {
        if (tokenType >= 0 && tokenType < displayNames.Length)
        {
            var displayName = displayNames[tokenType];
            if (displayName != null)
            {
                return displayName;
            }
        }

        var literalName = GetLiteralName(tokenType);
        if (literalName != null)
        {
            return literalName;
        }

        var symbolicName = GetSymbolicName(tokenType);
        if (symbolicName != null)
        {
            return symbolicName;
        }

        return tokenType.ToString();// Integer.toString(tokenType);
    }

    // Because this is an actual implementation object, we can provide access methods for vocabulary symbols

    public virtual string[] GetLiteralNames()
    {
        return literalNames;
    }

    public virtual string[] GetSymbolicNames()
    {
        return symbolicNames;
    }

    public virtual string[] GetDisplayNames()
    {
        return displayNames;
    }
}
