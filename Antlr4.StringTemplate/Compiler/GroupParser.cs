//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.2-beta2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.2-beta2 Compiler\\Group.g3 2022-04-09 08:56:44

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using Antlr4.StringTemplate.Misc;
using StringBuilder = System.Text.StringBuilder;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace Antlr4.StringTemplate.Compiler
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.2-beta2")]
[System.CLSCompliant(false)]
public partial class GroupParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ANONYMOUS_TEMPLATE", "BIGSTRING", "BIGSTRING_NO_NL", "COMMA", "COMMENT", "FALSE", "ID", "LBRACK", "LINE_COMMENT", "RBRACK", "STRING", "TRUE", "WS", "'('", "')'", "'.'", "':'", "'::='", "';'", "'='", "'@'", "'default'", "'group'", "'implements'", "'import'"
	};
	public const int EOF=-1;
	public const int ANONYMOUS_TEMPLATE=4;
	public const int BIGSTRING=5;
	public const int BIGSTRING_NO_NL=6;
	public const int COMMA=7;
	public const int COMMENT=8;
	public const int FALSE=9;
	public const int ID=10;
	public const int LBRACK=11;
	public const int LINE_COMMENT=12;
	public const int RBRACK=13;
	public const int STRING=14;
	public const int TRUE=15;
	public const int WS=16;
	public const int T__17=17;
	public const int T__18=18;
	public const int T__19=19;
	public const int T__20=20;
	public const int T__21=21;
	public const int T__22=22;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;

	public GroupParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public GroupParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return GroupParser.tokenNames; } }
	public override string GrammarFileName { get { return "Compiler\\Group.g3"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_group();
	partial void LeaveRule_group();
	// $ANTLR start "group"
	// Compiler\\Group.g3:60:1: public group[TemplateGroup group, string prefix] : ( oldStyleHeader )? ( delimiters )? ( 'import' STRING | 'import' ID ( '.' ID )* )* ( def[prefix] )* EOF ;
	[GrammarRule("group")]
	public void group(TemplateGroup group, string prefix)
	{
		EnterRule_group();
		EnterRule("group", 1);
		TraceIn("group", 1);
		IToken STRING1 = default(IToken);


		GroupLexer lexer = (GroupLexer)input.TokenSource;
		this._group = lexer.group = group;

		try { DebugEnterRule(GrammarFileName, "group");
		DebugLocation(60, 1);
		try
		{
			// Compiler\\Group.g3:65:2: ( ( oldStyleHeader )? ( delimiters )? ( 'import' STRING | 'import' ID ( '.' ID )* )* ( def[prefix] )* EOF )
			DebugEnterAlt(1);
			// Compiler\\Group.g3:65:4: ( oldStyleHeader )? ( delimiters )? ( 'import' STRING | 'import' ID ( '.' ID )* )* ( def[prefix] )* EOF
			{
			DebugLocation(65, 4);
			// Compiler\\Group.g3:65:4: ( oldStyleHeader )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, false);
			int LA1_1 = input.LA(1);

			if ((LA1_1==26))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\Group.g3:65:4: oldStyleHeader
				{
				DebugLocation(65, 4);
				PushFollow(Follow._oldStyleHeader_in_group99);
				oldStyleHeader();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(66, 3);
			// Compiler\\Group.g3:66:3: ( delimiters )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			int LA2_1 = input.LA(1);

			if ((LA2_1==ID))
			{
				int LA2_2 = input.LA(2);

				if ((LA2_2==STRING) && ((string.Equals("delimiters", input.LT(1).Text))))
				{
					alt2 = 1;
				}
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\Group.g3:66:3: delimiters
				{
				DebugLocation(66, 3);
				PushFollow(Follow._delimiters_in_group104);
				delimiters();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(67, 3);
			// Compiler\\Group.g3:67:3: ( 'import' STRING | 'import' ID ( '.' ID )* )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=3;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if ((LA4_1==28))
				{
					int LA4_2 = input.LA(2);

					if ((LA4_2==STRING))
					{
						alt4 = 1;
					}
					else if ((LA4_2==ID))
					{
						alt4 = 2;
					}


				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// Compiler\\Group.g3:67:5: 'import' STRING
					{
					DebugLocation(67, 5);
					Match(input,28,Follow._28_in_group111); 
					DebugLocation(67, 14);
					STRING1=(IToken)Match(input,STRING,Follow._STRING_in_group113); 
					DebugLocation(67, 21);
					_group.ImportTemplates(STRING1);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Compiler\\Group.g3:68:5: 'import' ID ( '.' ID )*
					{
					DebugLocation(68, 5);
					Match(input,28,Follow._28_in_group121); 
					DebugLocation(69, 4);

								MismatchedTokenException e = new MismatchedTokenException(STRING, input);
								ReportError(e);
								
					DebugLocation(73, 4);
					Match(input,ID,Follow._ID_in_group132); 
					DebugLocation(73, 7);
					// Compiler\\Group.g3:73:7: ( '.' ID )*
					try { DebugEnterSubRule(3);
					while (true)
					{
						int alt3=2;
						try { DebugEnterDecision(3, false);
						int LA3_1 = input.LA(1);

						if ((LA3_1==19))
						{
							alt3 = 1;
						}


						} finally { DebugExitDecision(3); }
						switch ( alt3 )
						{
						case 1:
							DebugEnterAlt(1);
							// Compiler\\Group.g3:73:8: '.' ID
							{
							DebugLocation(73, 8);
							Match(input,19,Follow._19_in_group135); 
							DebugLocation(73, 12);
							Match(input,ID,Follow._ID_in_group137); 

							}
							break;

						default:
							goto loop3;
						}
					}

					loop3:
						;

					} finally { DebugExitSubRule(3); }


					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(75, 3);
			// Compiler\\Group.g3:75:3: ( def[prefix] )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if ((LA5_1==ID||LA5_1==24))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// Compiler\\Group.g3:75:3: def[prefix]
					{
					DebugLocation(75, 3);
					PushFollow(Follow._def_in_group149);
					def(prefix);
					PopFollow();


					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(76, 3);
			Match(input,EOF,Follow._EOF_in_group155); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("group", 1);
			LeaveRule("group", 1);
			LeaveRule_group();
		}
		DebugLocation(77, 1);
		} finally { DebugExitRule(GrammarFileName, "group"); }
		return;

	}
	// $ANTLR end "group"

	partial void EnterRule_oldStyleHeader();
	partial void LeaveRule_oldStyleHeader();
	// $ANTLR start "oldStyleHeader"
	// Compiler\\Group.g3:79:1: oldStyleHeader : 'group' ID ( ':' ID )? ( 'implements' ID ( ',' ID )* )? ';' ;
	[GrammarRule("oldStyleHeader")]
	private void oldStyleHeader()
	{
		EnterRule_oldStyleHeader();
		EnterRule("oldStyleHeader", 2);
		TraceIn("oldStyleHeader", 2);
		try { DebugEnterRule(GrammarFileName, "oldStyleHeader");
		DebugLocation(79, 1);
		try
		{
			// Compiler\\Group.g3:80:5: ( 'group' ID ( ':' ID )? ( 'implements' ID ( ',' ID )* )? ';' )
			DebugEnterAlt(1);
			// Compiler\\Group.g3:80:9: 'group' ID ( ':' ID )? ( 'implements' ID ( ',' ID )* )? ';'
			{
			DebugLocation(80, 9);
			Match(input,26,Follow._26_in_oldStyleHeader172); 
			DebugLocation(80, 17);
			Match(input,ID,Follow._ID_in_oldStyleHeader174); 
			DebugLocation(80, 20);
			// Compiler\\Group.g3:80:20: ( ':' ID )?
			int alt6=2;
			try { DebugEnterSubRule(6);
			try { DebugEnterDecision(6, false);
			int LA6_1 = input.LA(1);

			if ((LA6_1==20))
			{
				alt6 = 1;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\Group.g3:80:22: ':' ID
				{
				DebugLocation(80, 22);
				Match(input,20,Follow._20_in_oldStyleHeader178); 
				DebugLocation(80, 26);
				Match(input,ID,Follow._ID_in_oldStyleHeader180); 

				}
				break;

			}
			} finally { DebugExitSubRule(6); }

			DebugLocation(81, 6);
			// Compiler\\Group.g3:81:6: ( 'implements' ID ( ',' ID )* )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, false);
			int LA8_1 = input.LA(1);

			if ((LA8_1==27))
			{
				alt8 = 1;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\Group.g3:81:8: 'implements' ID ( ',' ID )*
				{
				DebugLocation(81, 8);
				Match(input,27,Follow._27_in_oldStyleHeader192); 
				DebugLocation(81, 21);
				Match(input,ID,Follow._ID_in_oldStyleHeader194); 
				DebugLocation(81, 24);
				// Compiler\\Group.g3:81:24: ( ',' ID )*
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					int LA7_1 = input.LA(1);

					if ((LA7_1==COMMA))
					{
						alt7 = 1;
					}


					} finally { DebugExitDecision(7); }
					switch ( alt7 )
					{
					case 1:
						DebugEnterAlt(1);
						// Compiler\\Group.g3:81:25: ',' ID
						{
						DebugLocation(81, 25);
						Match(input,COMMA,Follow._COMMA_in_oldStyleHeader197); 
						DebugLocation(81, 29);
						Match(input,ID,Follow._ID_in_oldStyleHeader199); 

						}
						break;

					default:
						goto loop7;
					}
				}

				loop7:
					;

				} finally { DebugExitSubRule(7); }


				}
				break;

			}
			} finally { DebugExitSubRule(8); }

			DebugLocation(82, 6);
			Match(input,22,Follow._22_in_oldStyleHeader211); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("oldStyleHeader", 2);
			LeaveRule("oldStyleHeader", 2);
			LeaveRule_oldStyleHeader();
		}
		DebugLocation(83, 1);
		} finally { DebugExitRule(GrammarFileName, "oldStyleHeader"); }
		return;

	}
	// $ANTLR end "oldStyleHeader"

	partial void EnterRule_groupName();
	partial void LeaveRule_groupName();
	// $ANTLR start "groupName"
	// Compiler\\Group.g3:85:1: groupName returns [string name] : a= ID ( '.' a= ID )* ;
	[GrammarRule("groupName")]
	private string groupName()
	{
		EnterRule_groupName();
		EnterRule("groupName", 3);
		TraceIn("groupName", 3);
		string name = default(string);


		IToken a = default(IToken);

		StringBuilder buf = new StringBuilder();
		try { DebugEnterRule(GrammarFileName, "groupName");
		DebugLocation(85, 1);
		try
		{
			// Compiler\\Group.g3:87:2: (a= ID ( '.' a= ID )* )
			DebugEnterAlt(1);
			// Compiler\\Group.g3:87:4: a= ID ( '.' a= ID )*
			{
			DebugLocation(87, 5);
			a=(IToken)Match(input,ID,Follow._ID_in_groupName233); 
			DebugLocation(87, 9);
			buf.Append((a!=null?a.Text:default(string)));
			DebugLocation(87, 32);
			// Compiler\\Group.g3:87:32: ( '.' a= ID )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if ((LA9_1==19))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// Compiler\\Group.g3:87:33: '.' a= ID
					{
					DebugLocation(87, 33);
					Match(input,19,Follow._19_in_groupName238); 
					DebugLocation(87, 38);
					a=(IToken)Match(input,ID,Follow._ID_in_groupName242); 
					DebugLocation(87, 42);
					buf.Append((a!=null?a.Text:default(string)));

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("groupName", 3);
			LeaveRule("groupName", 3);
			LeaveRule_groupName();
		}
		DebugLocation(88, 1);
		} finally { DebugExitRule(GrammarFileName, "groupName"); }
		return name;

	}
	// $ANTLR end "groupName"

	partial void EnterRule_delimiters();
	partial void LeaveRule_delimiters();
	// $ANTLR start "delimiters"
	// Compiler\\Group.g3:90:1: delimiters :{...}? => ID open= STRING ',' close= STRING ;
	[GrammarRule("delimiters")]
	private void delimiters()
	{
		EnterRule_delimiters();
		EnterRule("delimiters", 4);
		TraceIn("delimiters", 4);
		IToken open = default(IToken);
		IToken close = default(IToken);

		try { DebugEnterRule(GrammarFileName, "delimiters");
		DebugLocation(90, 1);
		try
		{
			// Compiler\\Group.g3:91:2: ({...}? => ID open= STRING ',' close= STRING )
			DebugEnterAlt(1);
			// Compiler\\Group.g3:91:4: {...}? => ID open= STRING ',' close= STRING
			{
			DebugLocation(91, 4);
			if (!((string.Equals("delimiters", input.LT(1).Text))))
			{
				throw new FailedPredicateException(input, "delimiters", "string.Equals(\"delimiters\", input.LT(1).Text)");
			}
			DebugLocation(91, 56);
			Match(input,ID,Follow._ID_in_delimiters261); 
			DebugLocation(91, 63);
			open=(IToken)Match(input,STRING,Follow._STRING_in_delimiters265); 
			DebugLocation(91, 71);
			Match(input,COMMA,Follow._COMMA_in_delimiters267); 
			DebugLocation(91, 80);
			close=(IToken)Match(input,STRING,Follow._STRING_in_delimiters271); 
			DebugLocation(91, 88);
			_group.SetDelimiters(open, close);

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("delimiters", 4);
			LeaveRule("delimiters", 4);
			LeaveRule_delimiters();
		}
		DebugLocation(92, 1);
		} finally { DebugExitRule(GrammarFileName, "delimiters"); }
		return;

	}
	// $ANTLR end "delimiters"

	partial void EnterRule_def();
	partial void LeaveRule_def();
	// $ANTLR start "def"
	// Compiler\\Group.g3:98:1: def[string prefix] : ( templateDef[prefix] | dictDef );
	[GrammarRule("def")]
	private void def(string prefix)
	{
		EnterRule_def();
		EnterRule("def", 5);
		TraceIn("def", 5);
		try { DebugEnterRule(GrammarFileName, "def");
		DebugLocation(98, 51);
		try
		{
			// Compiler\\Group.g3:98:20: ( templateDef[prefix] | dictDef )
			int alt10=2;
			try { DebugEnterDecision(10, false);
			int LA10_1 = input.LA(1);

			if ((LA10_1==24))
			{
				alt10 = 1;
			}
			else if ((LA10_1==ID))
			{
				int LA10_2 = input.LA(2);

				if ((LA10_2==17))
				{
					alt10 = 1;
				}
				else if ((LA10_2==21))
				{
					int LA10_3 = input.LA(3);

					if ((LA10_3==ID))
					{
						alt10 = 1;
					}
					else if ((LA10_3==LBRACK))
					{
						alt10 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 10, 3, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\Group.g3:98:22: templateDef[prefix]
				{
				DebugLocation(98, 22);
				PushFollow(Follow._templateDef_in_def286);
				templateDef(prefix);
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Compiler\\Group.g3:98:44: dictDef
				{
				DebugLocation(98, 44);
				PushFollow(Follow._dictDef_in_def291);
				dictDef();
				PopFollow();


				}
				break;

			}
		}
		catch (RecognitionException)
		{

					// pretend we already saw an error here
					state.lastErrorIndex = input.Index;
					Error("garbled template definition starting at '"+input.LT(1).Text+"'");
				
		}

		finally
		{
			TraceOut("def", 5);
			LeaveRule("def", 5);
			LeaveRule_def();
		}
		DebugLocation(98, 51);
		} finally { DebugExitRule(GrammarFileName, "def"); }
		return;

	}
	// $ANTLR end "def"

	partial void EnterRule_templateDef();
	partial void LeaveRule_templateDef();
	// $ANTLR start "templateDef"
	// Compiler\\Group.g3:106:1: public templateDef[string prefix] : ( ( '@' enclosing= ID '.' name= ID '(' ')' |name= ID '(' formalArgs ')' ) '::=' ( STRING | BIGSTRING | BIGSTRING_NO_NL |) |alias= ID '::=' target= ID );
	[GrammarRule("templateDef")]
	public void templateDef(string prefix)
	{
		EnterRule_templateDef();
		EnterRule("templateDef", 6);
		TraceIn("templateDef", 6);
		IToken enclosing = default(IToken);
		IToken name = default(IToken);
		IToken alias = default(IToken);
		IToken target = default(IToken);
		IToken STRING2 = default(IToken);
		IToken BIGSTRING3 = default(IToken);
		IToken BIGSTRING_NO_NL4 = default(IToken);
		List<FormalArgument> formalArgs5 = default(List<FormalArgument>);


		    string template=null;
		    int n=0; // num char to strip from left, right of template def

		try { DebugEnterRule(GrammarFileName, "templateDef");
		DebugLocation(106, 1);
		try
		{
			// Compiler\\Group.g3:111:2: ( ( '@' enclosing= ID '.' name= ID '(' ')' |name= ID '(' formalArgs ')' ) '::=' ( STRING | BIGSTRING | BIGSTRING_NO_NL |) |alias= ID '::=' target= ID )
			int alt13=2;
			try { DebugEnterDecision(13, false);
			int LA13_1 = input.LA(1);

			if ((LA13_1==24))
			{
				alt13 = 1;
			}
			else if ((LA13_1==ID))
			{
				int LA13_2 = input.LA(2);

				if ((LA13_2==17))
				{
					alt13 = 1;
				}
				else if ((LA13_2==21))
				{
					alt13 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 13, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 13, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\Group.g3:111:4: ( '@' enclosing= ID '.' name= ID '(' ')' |name= ID '(' formalArgs ')' ) '::=' ( STRING | BIGSTRING | BIGSTRING_NO_NL |)
				{
				DebugLocation(111, 4);
				// Compiler\\Group.g3:111:4: ( '@' enclosing= ID '.' name= ID '(' ')' |name= ID '(' formalArgs ')' )
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1==24))
				{
					alt11 = 1;
				}
				else if ((LA11_1==ID))
				{
					alt11 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 11, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// Compiler\\Group.g3:111:6: '@' enclosing= ID '.' name= ID '(' ')'
					{
					DebugLocation(111, 6);
					Match(input,24,Follow._24_in_templateDef317); 
					DebugLocation(111, 19);
					enclosing=(IToken)Match(input,ID,Follow._ID_in_templateDef321); 
					DebugLocation(111, 23);
					Match(input,19,Follow._19_in_templateDef323); 
					DebugLocation(111, 31);
					name=(IToken)Match(input,ID,Follow._ID_in_templateDef327); 
					DebugLocation(111, 35);
					Match(input,17,Follow._17_in_templateDef329); 
					DebugLocation(111, 39);
					Match(input,18,Follow._18_in_templateDef331); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Compiler\\Group.g3:112:5: name= ID '(' formalArgs ')'
					{
					DebugLocation(112, 9);
					name=(IToken)Match(input,ID,Follow._ID_in_templateDef339); 
					DebugLocation(112, 13);
					Match(input,17,Follow._17_in_templateDef341); 
					DebugLocation(112, 17);
					PushFollow(Follow._formalArgs_in_templateDef343);
					formalArgs5=formalArgs();
					PopFollow();

					DebugLocation(112, 28);
					Match(input,18,Follow._18_in_templateDef345); 

					}
					break;

				}
				} finally { DebugExitSubRule(11); }

				DebugLocation(114, 6);
				Match(input,21,Follow._21_in_templateDef356); 
				DebugLocation(115, 6);
				IToken templateToken = input.LT(1);
				DebugLocation(116, 6);
				// Compiler\\Group.g3:116:6: ( STRING | BIGSTRING | BIGSTRING_NO_NL |)
				int alt12=4;
				try { DebugEnterSubRule(12);
				try { DebugEnterDecision(12, false);
				switch (input.LA(1))
				{
				case STRING:
					{
					alt12 = 1;
					}
					break;
				case BIGSTRING:
					{
					alt12 = 2;
					}
					break;
				case BIGSTRING_NO_NL:
					{
					alt12 = 3;
					}
					break;
				case EOF:
				case ID:
				case 24:
					{
					alt12 = 4;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(12); }
				switch (alt12)
				{
				case 1:
					DebugEnterAlt(1);
					// Compiler\\Group.g3:116:8: STRING
					{
					DebugLocation(116, 8);
					STRING2=(IToken)Match(input,STRING,Follow._STRING_in_templateDef372); 
					DebugLocation(116, 19);
					template=(STRING2!=null?STRING2.Text:default(string)); n=1;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Compiler\\Group.g3:117:8: BIGSTRING
					{
					DebugLocation(117, 8);
					BIGSTRING3=(IToken)Match(input,BIGSTRING,Follow._BIGSTRING_in_templateDef387); 
					DebugLocation(117, 19);
					template=(BIGSTRING3!=null?BIGSTRING3.Text:default(string)); n=2;

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Compiler\\Group.g3:118:8: BIGSTRING_NO_NL
					{
					DebugLocation(118, 8);
					BIGSTRING_NO_NL4=(IToken)Match(input,BIGSTRING_NO_NL,Follow._BIGSTRING_NO_NL_in_templateDef399); 
					DebugLocation(118, 25);
					template=(BIGSTRING_NO_NL4!=null?BIGSTRING_NO_NL4.Text:default(string)); n=2;

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// Compiler\\Group.g3:119:8: 
					{
					DebugLocation(119, 8);

						    	template = string.Empty;
						    	string msg = "missing template at '"+input.LT(1).Text+"'";
					            NoViableAltException e = new NoViableAltException(string.Empty, 0, 0, input);
					    	    _group.ErrorManager.GroupSyntaxError(ErrorType.SYNTAX_ERROR, SourceName, e, msg);
					    	    

					}
					break;

				}
				} finally { DebugExitSubRule(12); }

				DebugLocation(126, 6);

						if ((name!=null?name.TokenIndex:0) >= 0)
						{
							// if ID missing
							template = Utility.Strip(template, n);
							string templateName = (name!=null?name.Text:default(string));
							if (prefix.Length > 0) templateName = prefix + (name!=null?name.Text:default(string));
							string enclosingTemplateName = (enclosing!=null?enclosing.Text:default(string));
							if (enclosingTemplateName != null && enclosingTemplateName.Length > 0 && prefix.Length > 0)
								enclosingTemplateName = prefix + enclosingTemplateName;

							_group.DefineTemplateOrRegion(templateName, enclosingTemplateName, templateToken,
					    								 template, name, formalArgs5);
						}
					    

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Compiler\\Group.g3:141:6: alias= ID '::=' target= ID
				{
				DebugLocation(141, 11);
				alias=(IToken)Match(input,ID,Follow._ID_in_templateDef434); 
				DebugLocation(141, 15);
				Match(input,21,Follow._21_in_templateDef436); 
				DebugLocation(141, 27);
				target=(IToken)Match(input,ID,Follow._ID_in_templateDef440); 
				DebugLocation(141, 32);
				_group.DefineTemplateAlias(alias, target);

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("templateDef", 6);
			LeaveRule("templateDef", 6);
			LeaveRule_templateDef();
		}
		DebugLocation(142, 1);
		} finally { DebugExitRule(GrammarFileName, "templateDef"); }
		return;

	}
	// $ANTLR end "templateDef"

	protected sealed partial class formalArgs_scope
	{
		public bool hasOptionalParameter;

		public formalArgs_scope(GroupParser grammar) { OnCreated(grammar); }
		partial void OnCreated(GroupParser grammar);
	}
	partial void formalArgs_scopeInit( formalArgs_scope scope );
	partial void formalArgs_scopeAfter( formalArgs_scope scope );
	protected readonly ListStack<formalArgs_scope> formalArgs_stack = new ListStack<formalArgs_scope>();

	partial void EnterRule_formalArgs();
	partial void LeaveRule_formalArgs();
	// $ANTLR start "formalArgs"
	// Compiler\\Group.g3:144:1: formalArgs returns [List<FormalArgument> args = new List<FormalArgument>()] : ( formalArg[$args] ( ',' formalArg[$args] )* |);
	[GrammarRule("formalArgs")]
	private List<FormalArgument> formalArgs()
	{
		EnterRule_formalArgs();
		EnterRule("formalArgs", 7);
		TraceIn("formalArgs", 7);
		formalArgs_stack.Push(new formalArgs_scope(this));formalArgs_scopeInit(formalArgs_stack.Peek());
		List<FormalArgument> args =  new List<FormalArgument>();


		try { DebugEnterRule(GrammarFileName, "formalArgs");
		DebugLocation(144, 1);
		try
		{
			// Compiler\\Group.g3:148:2: ( formalArg[$args] ( ',' formalArg[$args] )* |)
			int alt15=2;
			try { DebugEnterDecision(15, false);
			int LA15_1 = input.LA(1);

			if ((LA15_1==ID))
			{
				alt15 = 1;
			}
			else if ((LA15_1==18))
			{
				alt15 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\Group.g3:148:4: formalArg[$args] ( ',' formalArg[$args] )*
				{
				DebugLocation(148, 4);
				PushFollow(Follow._formalArg_in_formalArgs461);
				formalArg(args);
				PopFollow();

				DebugLocation(148, 21);
				// Compiler\\Group.g3:148:21: ( ',' formalArg[$args] )*
				try { DebugEnterSubRule(14);
				while (true)
				{
					int alt14=2;
					try { DebugEnterDecision(14, false);
					int LA14_1 = input.LA(1);

					if ((LA14_1==COMMA))
					{
						alt14 = 1;
					}


					} finally { DebugExitDecision(14); }
					switch ( alt14 )
					{
					case 1:
						DebugEnterAlt(1);
						// Compiler\\Group.g3:148:22: ',' formalArg[$args]
						{
						DebugLocation(148, 22);
						Match(input,COMMA,Follow._COMMA_in_formalArgs465); 
						DebugLocation(148, 26);
						PushFollow(Follow._formalArg_in_formalArgs467);
						formalArg(args);
						PopFollow();


						}
						break;

					default:
						goto loop14;
					}
				}

				loop14:
					;

				} finally { DebugExitSubRule(14); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Compiler\\Group.g3:150:2: 
				{
				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("formalArgs", 7);
			LeaveRule("formalArgs", 7);
			LeaveRule_formalArgs();
			formalArgs_scopeAfter(formalArgs_stack.Peek());formalArgs_stack.Pop();
		}
		DebugLocation(150, 1);
		} finally { DebugExitRule(GrammarFileName, "formalArgs"); }
		return args;

	}
	// $ANTLR end "formalArgs"

	partial void EnterRule_formalArg();
	partial void LeaveRule_formalArg();
	// $ANTLR start "formalArg"
	// Compiler\\Group.g3:152:1: formalArg[List<FormalArgument> args] : ID ( '=' a= ( STRING | ANONYMOUS_TEMPLATE | 'true' | 'false' ) | '=' a= '[' ']' |) ;
	[GrammarRule("formalArg")]
	private void formalArg(List<FormalArgument> args)
	{
		EnterRule_formalArg();
		EnterRule("formalArg", 8);
		TraceIn("formalArg", 8);
		IToken a = default(IToken);
		IToken ID6 = default(IToken);

		try { DebugEnterRule(GrammarFileName, "formalArg");
		DebugLocation(152, 4);
		try
		{
			// Compiler\\Group.g3:153:2: ( ID ( '=' a= ( STRING | ANONYMOUS_TEMPLATE | 'true' | 'false' ) | '=' a= '[' ']' |) )
			DebugEnterAlt(1);
			// Compiler\\Group.g3:153:4: ID ( '=' a= ( STRING | ANONYMOUS_TEMPLATE | 'true' | 'false' ) | '=' a= '[' ']' |)
			{
			DebugLocation(153, 4);
			ID6=(IToken)Match(input,ID,Follow._ID_in_formalArg485); 
			DebugLocation(154, 3);
			// Compiler\\Group.g3:154:3: ( '=' a= ( STRING | ANONYMOUS_TEMPLATE | 'true' | 'false' ) | '=' a= '[' ']' |)
			int alt16=3;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_1 = input.LA(1);

			if ((LA16_1==23))
			{
				int LA16_2 = input.LA(2);

				if ((LA16_2==ANONYMOUS_TEMPLATE||LA16_2==FALSE||(LA16_2>=STRING && LA16_2<=TRUE)))
				{
					alt16 = 1;
				}
				else if ((LA16_2==LBRACK))
				{
					alt16 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 16, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA16_1==COMMA||LA16_1==18))
			{
				alt16 = 3;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 16, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\Group.g3:154:5: '=' a= ( STRING | ANONYMOUS_TEMPLATE | 'true' | 'false' )
				{
				DebugLocation(154, 5);
				Match(input,23,Follow._23_in_formalArg491); 
				DebugLocation(154, 10);

				a=(IToken)input.LT(1);
				if (input.LA(1)==ANONYMOUS_TEMPLATE||input.LA(1)==FALSE||(input.LA(1)>=STRING && input.LA(1)<=TRUE))
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(154, 54);
				formalArgs_stack.Peek().hasOptionalParameter =  true;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Compiler\\Group.g3:155:5: '=' a= '[' ']'
				{
				DebugLocation(155, 5);
				Match(input,23,Follow._23_in_formalArg511); 
				DebugLocation(155, 10);
				a=(IToken)Match(input,LBRACK,Follow._LBRACK_in_formalArg515); 
				DebugLocation(155, 15);
				Match(input,RBRACK,Follow._RBRACK_in_formalArg517); 
				DebugLocation(155, 19);
				formalArgs_stack.Peek().hasOptionalParameter =  true;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Compiler\\Group.g3:156:5: 
				{
				DebugLocation(156, 5);
				if (formalArgs_stack.Peek().hasOptionalParameter) _group.ErrorManager.GroupSyntaxError(ErrorType.REQUIRED_PARAMETER_AFTER_OPTIONAL, SourceName, input.LT(1));

				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(158, 3);
			args.Add(new FormalArgument((ID6!=null?ID6.Text:default(string)), a));

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("formalArg", 8);
			LeaveRule("formalArg", 8);
			LeaveRule_formalArg();
		}
		DebugLocation(159, 4);
		} finally { DebugExitRule(GrammarFileName, "formalArg"); }
		return;

	}
	// $ANTLR end "formalArg"

	partial void EnterRule_dictDef();
	partial void LeaveRule_dictDef();
	// $ANTLR start "dictDef"
	// Compiler\\Group.g3:170:1: dictDef : ID '::=' dict ;
	[GrammarRule("dictDef")]
	private void dictDef()
	{
		EnterRule_dictDef();
		EnterRule("dictDef", 9);
		TraceIn("dictDef", 9);
		IToken ID7 = default(IToken);
		IDictionary<string,object> dict8 = default(IDictionary<string,object>);

		try { DebugEnterRule(GrammarFileName, "dictDef");
		DebugLocation(170, 1);
		try
		{
			// Compiler\\Group.g3:171:2: ( ID '::=' dict )
			DebugEnterAlt(1);
			// Compiler\\Group.g3:171:4: ID '::=' dict
			{
			DebugLocation(171, 4);
			ID7=(IToken)Match(input,ID,Follow._ID_in_dictDef550); 
			DebugLocation(171, 7);
			Match(input,21,Follow._21_in_dictDef552); 
			DebugLocation(171, 13);
			PushFollow(Follow._dict_in_dictDef554);
			dict8=dict();
			PopFollow();

			DebugLocation(172, 9);

			        if ( _group.RawGetDictionary((ID7!=null?ID7.Text:default(string)))!=null ) {
						_group.ErrorManager.CompiletimeError(ErrorType.MAP_REDEFINITION, null, ID7);
			        }
			        else if ( _group.RawGetTemplate((ID7!=null?ID7.Text:default(string)))!=null ) {
						_group.ErrorManager.CompiletimeError(ErrorType.TEMPLATE_REDEFINITION_AS_MAP, null, ID7);
			        }
			        else {
			            _group.DefineDictionary((ID7!=null?ID7.Text:default(string)), dict8);
			        }
			        

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("dictDef", 9);
			LeaveRule("dictDef", 9);
			LeaveRule_dictDef();
		}
		DebugLocation(183, 1);
		} finally { DebugExitRule(GrammarFileName, "dictDef"); }
		return;

	}
	// $ANTLR end "dictDef"

	partial void EnterRule_dict();
	partial void LeaveRule_dict();
	// $ANTLR start "dict"
	// Compiler\\Group.g3:185:1: dict returns [IDictionary<string,object> mapping = new Dictionary<string, object>()] : '[' dictPairs[mapping] ']' ;
	[GrammarRule("dict")]
	private IDictionary<string,object> dict()
	{
		EnterRule_dict();
		EnterRule("dict", 10);
		TraceIn("dict", 10);
		IDictionary<string,object> mapping =  new Dictionary<string, object>();


		try { DebugEnterRule(GrammarFileName, "dict");
		DebugLocation(185, 1);
		try
		{
			// Compiler\\Group.g3:186:2: ( '[' dictPairs[mapping] ']' )
			DebugEnterAlt(1);
			// Compiler\\Group.g3:186:6: '[' dictPairs[mapping] ']'
			{
			DebugLocation(186, 6);
			Match(input,LBRACK,Follow._LBRACK_in_dict581); 
			DebugLocation(186, 10);
			PushFollow(Follow._dictPairs_in_dict583);
			dictPairs(mapping);
			PopFollow();

			DebugLocation(186, 29);
			Match(input,RBRACK,Follow._RBRACK_in_dict586); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("dict", 10);
			LeaveRule("dict", 10);
			LeaveRule_dict();
		}
		DebugLocation(187, 1);
		} finally { DebugExitRule(GrammarFileName, "dict"); }
		return mapping;

	}
	// $ANTLR end "dict"

	partial void EnterRule_dictPairs();
	partial void LeaveRule_dictPairs();
	// $ANTLR start "dictPairs"
	// Compiler\\Group.g3:189:1: dictPairs[IDictionary<string,object> mapping] : ( keyValuePair[mapping] ( ',' keyValuePair[mapping] )* ( ',' defaultValuePair[mapping] )? | defaultValuePair[mapping] |);
	[GrammarRule("dictPairs")]
	private void dictPairs(IDictionary<string,object> mapping)
	{
		EnterRule_dictPairs();
		EnterRule("dictPairs", 11);
		TraceIn("dictPairs", 11);
		try { DebugEnterRule(GrammarFileName, "dictPairs");
		DebugLocation(189, 1);
		try
		{
			// Compiler\\Group.g3:190:2: ( keyValuePair[mapping] ( ',' keyValuePair[mapping] )* ( ',' defaultValuePair[mapping] )? | defaultValuePair[mapping] |)
			int alt19=3;
			try { DebugEnterDecision(19, false);
			switch (input.LA(1))
			{
			case STRING:
				{
				alt19 = 1;
				}
				break;
			case 25:
				{
				alt19 = 2;
				}
				break;
			case RBRACK:
				{
				alt19 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 19, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\Group.g3:190:4: keyValuePair[mapping] ( ',' keyValuePair[mapping] )* ( ',' defaultValuePair[mapping] )?
				{
				DebugLocation(190, 4);
				PushFollow(Follow._keyValuePair_in_dictPairs598);
				keyValuePair(mapping);
				PopFollow();

				DebugLocation(191, 3);
				// Compiler\\Group.g3:191:3: ( ',' keyValuePair[mapping] )*
				try { DebugEnterSubRule(17);
				while (true)
				{
					int alt17=2;
					try { DebugEnterDecision(17, false);
					int LA17_1 = input.LA(1);

					if ((LA17_1==COMMA))
					{
						int LA17_2 = input.LA(2);

						if ((LA17_2==STRING))
						{
							alt17 = 1;
						}


					}


					} finally { DebugExitDecision(17); }
					switch ( alt17 )
					{
					case 1:
						DebugEnterAlt(1);
						// Compiler\\Group.g3:191:4: ',' keyValuePair[mapping]
						{
						DebugLocation(191, 4);
						Match(input,COMMA,Follow._COMMA_in_dictPairs604); 
						DebugLocation(191, 8);
						PushFollow(Follow._keyValuePair_in_dictPairs606);
						keyValuePair(mapping);
						PopFollow();


						}
						break;

					default:
						goto loop17;
					}
				}

				loop17:
					;

				} finally { DebugExitSubRule(17); }

				DebugLocation(191, 32);
				// Compiler\\Group.g3:191:32: ( ',' defaultValuePair[mapping] )?
				int alt18=2;
				try { DebugEnterSubRule(18);
				try { DebugEnterDecision(18, false);
				int LA18_1 = input.LA(1);

				if ((LA18_1==COMMA))
				{
					alt18 = 1;
				}
				} finally { DebugExitDecision(18); }
				switch (alt18)
				{
				case 1:
					DebugEnterAlt(1);
					// Compiler\\Group.g3:191:33: ',' defaultValuePair[mapping]
					{
					DebugLocation(191, 33);
					Match(input,COMMA,Follow._COMMA_in_dictPairs612); 
					DebugLocation(191, 37);
					PushFollow(Follow._defaultValuePair_in_dictPairs614);
					defaultValuePair(mapping);
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(18); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Compiler\\Group.g3:192:4: defaultValuePair[mapping]
				{
				DebugLocation(192, 4);
				PushFollow(Follow._defaultValuePair_in_dictPairs622);
				defaultValuePair(mapping);
				PopFollow();


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Compiler\\Group.g3:194:2: 
				{
				}
				break;

			}
		}
		catch (RecognitionException)
		{

					Error("missing dictionary entry at '"+input.LT(1).Text+"'");
				
		}

		finally
		{
			TraceOut("dictPairs", 11);
			LeaveRule("dictPairs", 11);
			LeaveRule_dictPairs();
		}
		DebugLocation(194, 1);
		} finally { DebugExitRule(GrammarFileName, "dictPairs"); }
		return;

	}
	// $ANTLR end "dictPairs"

	partial void EnterRule_defaultValuePair();
	partial void LeaveRule_defaultValuePair();
	// $ANTLR start "defaultValuePair"
	// Compiler\\Group.g3:199:1: defaultValuePair[IDictionary<string,object> mapping] : 'default' ':' keyValue ;
	[GrammarRule("defaultValuePair")]
	private void defaultValuePair(IDictionary<string,object> mapping)
	{
		EnterRule_defaultValuePair();
		EnterRule("defaultValuePair", 12);
		TraceIn("defaultValuePair", 12);
		object keyValue9 = default(object);

		try { DebugEnterRule(GrammarFileName, "defaultValuePair");
		DebugLocation(199, 1);
		try
		{
			// Compiler\\Group.g3:200:2: ( 'default' ':' keyValue )
			DebugEnterAlt(1);
			// Compiler\\Group.g3:200:4: 'default' ':' keyValue
			{
			DebugLocation(200, 4);
			Match(input,25,Follow._25_in_defaultValuePair647); 
			DebugLocation(200, 14);
			Match(input,20,Follow._20_in_defaultValuePair649); 
			DebugLocation(200, 18);
			PushFollow(Follow._keyValue_in_defaultValuePair651);
			keyValue9=keyValue();
			PopFollow();

			DebugLocation(200, 27);
			mapping[TemplateGroup.DefaultKey] = keyValue9;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("defaultValuePair", 12);
			LeaveRule("defaultValuePair", 12);
			LeaveRule_defaultValuePair();
		}
		DebugLocation(201, 1);
		} finally { DebugExitRule(GrammarFileName, "defaultValuePair"); }
		return;

	}
	// $ANTLR end "defaultValuePair"

	partial void EnterRule_keyValuePair();
	partial void LeaveRule_keyValuePair();
	// $ANTLR start "keyValuePair"
	// Compiler\\Group.g3:203:1: keyValuePair[IDictionary<string,object> mapping] : STRING ':' keyValue ;
	[GrammarRule("keyValuePair")]
	private void keyValuePair(IDictionary<string,object> mapping)
	{
		EnterRule_keyValuePair();
		EnterRule("keyValuePair", 13);
		TraceIn("keyValuePair", 13);
		IToken STRING10 = default(IToken);
		object keyValue11 = default(object);

		try { DebugEnterRule(GrammarFileName, "keyValuePair");
		DebugLocation(203, 1);
		try
		{
			// Compiler\\Group.g3:204:2: ( STRING ':' keyValue )
			DebugEnterAlt(1);
			// Compiler\\Group.g3:204:4: STRING ':' keyValue
			{
			DebugLocation(204, 4);
			STRING10=(IToken)Match(input,STRING,Follow._STRING_in_keyValuePair665); 
			DebugLocation(204, 11);
			Match(input,20,Follow._20_in_keyValuePair667); 
			DebugLocation(204, 15);
			PushFollow(Follow._keyValue_in_keyValuePair669);
			keyValue11=keyValue();
			PopFollow();

			DebugLocation(204, 24);
			mapping[Utility.ReplaceEscapes(Utility.Strip((STRING10!=null?STRING10.Text:default(string)), 1))] = keyValue11;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("keyValuePair", 13);
			LeaveRule("keyValuePair", 13);
			LeaveRule_keyValuePair();
		}
		DebugLocation(205, 1);
		} finally { DebugExitRule(GrammarFileName, "keyValuePair"); }
		return;

	}
	// $ANTLR end "keyValuePair"

	partial void EnterRule_keyValue();
	partial void LeaveRule_keyValue();
	// $ANTLR start "keyValue"
	// Compiler\\Group.g3:207:1: keyValue returns [object value] : (a= BIGSTRING |a= BIGSTRING_NO_NL |a= ANONYMOUS_TEMPLATE |a= STRING | TRUE | FALSE | '[' ']' |{...}? => ID );
	[GrammarRule("keyValue")]
	private object keyValue()
	{
		EnterRule_keyValue();
		EnterRule("keyValue", 14);
		TraceIn("keyValue", 14);
		object value = default(object);


		IToken a = default(IToken);

		try { DebugEnterRule(GrammarFileName, "keyValue");
		DebugLocation(207, 1);
		try
		{
			// Compiler\\Group.g3:208:2: (a= BIGSTRING |a= BIGSTRING_NO_NL |a= ANONYMOUS_TEMPLATE |a= STRING | TRUE | FALSE | '[' ']' |{...}? => ID )
			int alt20=8;
			try { DebugEnterDecision(20, false);
			int LA20_1 = input.LA(1);

			if ((LA20_1==BIGSTRING))
			{
				alt20 = 1;
			}
			else if ((LA20_1==BIGSTRING_NO_NL))
			{
				alt20 = 2;
			}
			else if ((LA20_1==ANONYMOUS_TEMPLATE))
			{
				alt20 = 3;
			}
			else if ((LA20_1==STRING))
			{
				alt20 = 4;
			}
			else if ((LA20_1==TRUE))
			{
				alt20 = 5;
			}
			else if ((LA20_1==FALSE))
			{
				alt20 = 6;
			}
			else if ((LA20_1==LBRACK))
			{
				alt20 = 7;
			}
			else if ((LA20_1==ID) && ((input.LT(1).Text.Equals("key"))))
			{
				alt20 = 8;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 20, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\Group.g3:208:4: a= BIGSTRING
				{
				DebugLocation(208, 5);
				a=(IToken)Match(input,BIGSTRING,Follow._BIGSTRING_in_keyValue688); 
				DebugLocation(208, 19);
				value = _group.CreateSingleton(a);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Compiler\\Group.g3:209:4: a= BIGSTRING_NO_NL
				{
				DebugLocation(209, 5);
				a=(IToken)Match(input,BIGSTRING_NO_NL,Follow._BIGSTRING_NO_NL_in_keyValue700); 
				DebugLocation(209, 23);
				value = _group.CreateSingleton(a);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Compiler\\Group.g3:210:4: a= ANONYMOUS_TEMPLATE
				{
				DebugLocation(210, 5);
				a=(IToken)Match(input,ANONYMOUS_TEMPLATE,Follow._ANONYMOUS_TEMPLATE_in_keyValue710); 
				DebugLocation(210, 25);
				value = _group.CreateSingleton(a);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Compiler\\Group.g3:211:4: a= STRING
				{
				DebugLocation(211, 5);
				a=(IToken)Match(input,STRING,Follow._STRING_in_keyValue719); 
				DebugLocation(211, 16);
				value = Utility.ReplaceEscapes(Utility.Strip((a!=null?a.Text:default(string)), 1));

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Compiler\\Group.g3:212:4: TRUE
				{
				DebugLocation(212, 4);
				Match(input,TRUE,Follow._TRUE_in_keyValue729); 
				DebugLocation(212, 13);
				value = true;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Compiler\\Group.g3:213:4: FALSE
				{
				DebugLocation(213, 4);
				Match(input,FALSE,Follow._FALSE_in_keyValue740); 
				DebugLocation(213, 14);
				value = false;

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Compiler\\Group.g3:214:4: '[' ']'
				{
				DebugLocation(214, 4);
				Match(input,LBRACK,Follow._LBRACK_in_keyValue751); 
				DebugLocation(214, 8);
				Match(input,RBRACK,Follow._RBRACK_in_keyValue753); 
				DebugLocation(214, 16);
				value = new object[0];

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Compiler\\Group.g3:215:4: {...}? => ID
				{
				DebugLocation(215, 4);
				if (!((input.LT(1).Text.Equals("key"))))
				{
					throw new FailedPredicateException(input, "keyValue", "input.LT(1).Text.Equals(\"key\")");
				}
				DebugLocation(215, 40);
				Match(input,ID,Follow._ID_in_keyValue767); 
				DebugLocation(216, 9);
				value = TemplateGroup.DictionaryKey;

				}
				break;

			}
		}
		catch (RecognitionException)
		{

					Error("missing value for key at '"+input.LT(1).Text+"'");
				
		}

		finally
		{
			TraceOut("keyValue", 14);
			LeaveRule("keyValue", 14);
			LeaveRule_keyValue();
		}
		DebugLocation(217, 1);
		} finally { DebugExitRule(GrammarFileName, "keyValue"); }
		return value;

	}
	// $ANTLR end "keyValue"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _oldStyleHeader_in_group99 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _delimiters_in_group104 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _28_in_group111 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _STRING_in_group113 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _28_in_group121 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_group132 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _19_in_group135 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_group137 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _def_in_group149 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_group155 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _26_in_oldStyleHeader172 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_oldStyleHeader174 = new BitSet(new ulong[]{0x8500000UL});
		public static readonly BitSet _20_in_oldStyleHeader178 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_oldStyleHeader180 = new BitSet(new ulong[]{0x8400000UL});
		public static readonly BitSet _27_in_oldStyleHeader192 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_oldStyleHeader194 = new BitSet(new ulong[]{0x400080UL});
		public static readonly BitSet _COMMA_in_oldStyleHeader197 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_oldStyleHeader199 = new BitSet(new ulong[]{0x400080UL});
		public static readonly BitSet _22_in_oldStyleHeader211 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_groupName233 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _19_in_groupName238 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_groupName242 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _ID_in_delimiters261 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _STRING_in_delimiters265 = new BitSet(new ulong[]{0x80UL});
		public static readonly BitSet _COMMA_in_delimiters267 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _STRING_in_delimiters271 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _templateDef_in_def286 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _dictDef_in_def291 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _24_in_templateDef317 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_templateDef321 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _19_in_templateDef323 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_templateDef327 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_templateDef329 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _18_in_templateDef331 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _ID_in_templateDef339 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_templateDef341 = new BitSet(new ulong[]{0x40400UL});
		public static readonly BitSet _formalArgs_in_templateDef343 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _18_in_templateDef345 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _21_in_templateDef356 = new BitSet(new ulong[]{0x4062UL});
		public static readonly BitSet _STRING_in_templateDef372 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BIGSTRING_in_templateDef387 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BIGSTRING_NO_NL_in_templateDef399 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_templateDef434 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _21_in_templateDef436 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ID_in_templateDef440 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _formalArg_in_formalArgs461 = new BitSet(new ulong[]{0x82UL});
		public static readonly BitSet _COMMA_in_formalArgs465 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _formalArg_in_formalArgs467 = new BitSet(new ulong[]{0x82UL});
		public static readonly BitSet _ID_in_formalArg485 = new BitSet(new ulong[]{0x800002UL});
		public static readonly BitSet _23_in_formalArg491 = new BitSet(new ulong[]{0xC210UL});
		public static readonly BitSet _set_in_formalArg495 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _23_in_formalArg511 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _LBRACK_in_formalArg515 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _RBRACK_in_formalArg517 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_dictDef550 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _21_in_dictDef552 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _dict_in_dictDef554 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACK_in_dict581 = new BitSet(new ulong[]{0x2006000UL});
		public static readonly BitSet _dictPairs_in_dict583 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _RBRACK_in_dict586 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _keyValuePair_in_dictPairs598 = new BitSet(new ulong[]{0x82UL});
		public static readonly BitSet _COMMA_in_dictPairs604 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _keyValuePair_in_dictPairs606 = new BitSet(new ulong[]{0x82UL});
		public static readonly BitSet _COMMA_in_dictPairs612 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _defaultValuePair_in_dictPairs614 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _defaultValuePair_in_dictPairs622 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _25_in_defaultValuePair647 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _20_in_defaultValuePair649 = new BitSet(new ulong[]{0xCE70UL});
		public static readonly BitSet _keyValue_in_defaultValuePair651 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_keyValuePair665 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _20_in_keyValuePair667 = new BitSet(new ulong[]{0xCE70UL});
		public static readonly BitSet _keyValue_in_keyValuePair669 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BIGSTRING_in_keyValue688 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BIGSTRING_NO_NL_in_keyValue700 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ANONYMOUS_TEMPLATE_in_keyValue710 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_keyValue719 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRUE_in_keyValue729 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FALSE_in_keyValue740 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACK_in_keyValue751 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _RBRACK_in_keyValue753 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_keyValue767 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace Antlr4.StringTemplate.Compiler
