//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.2-beta2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.2-beta2 Compiler\\Group.g3 2022-04-09 08:56:44

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using Antlr4.StringTemplate.Misc;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace Antlr4.StringTemplate.Compiler
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.2-beta2")]
[System.CLSCompliant(false)]
public partial class GroupLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int ANONYMOUS_TEMPLATE=4;
	public const int BIGSTRING=5;
	public const int BIGSTRING_NO_NL=6;
	public const int COMMA=7;
	public const int COMMENT=8;
	public const int FALSE=9;
	public const int ID=10;
	public const int LBRACK=11;
	public const int LINE_COMMENT=12;
	public const int RBRACK=13;
	public const int STRING=14;
	public const int TRUE=15;
	public const int WS=16;
	public const int T__17=17;
	public const int T__18=18;
	public const int T__19=19;
	public const int T__20=20;
	public const int T__21=21;
	public const int T__22=22;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;

	// delegates
	// delegators

	public GroupLexer()
	{
		OnCreated();
	}

	public GroupLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public GroupLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "Compiler\\Group.g3"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_COMMA();
	partial void LeaveRule_COMMA();

	// $ANTLR start "COMMA"
	[GrammarRule("COMMA")]
	private void mCOMMA()
	{
		EnterRule_COMMA();
		EnterRule("COMMA", 1);
		TraceIn("COMMA", 1);
		try
		{
			int _type = COMMA;
			int _channel = DefaultTokenChannel;
			// Compiler\\Group.g3:12:7: ( ',' )
			DebugEnterAlt(1);
			// Compiler\\Group.g3:12:9: ','
			{
			DebugLocation(12, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMA", 1);
			LeaveRule("COMMA", 1);
			LeaveRule_COMMA();
		}
	}
	// $ANTLR end "COMMA"

	partial void EnterRule_FALSE();
	partial void LeaveRule_FALSE();

	// $ANTLR start "FALSE"
	[GrammarRule("FALSE")]
	private void mFALSE()
	{
		EnterRule_FALSE();
		EnterRule("FALSE", 2);
		TraceIn("FALSE", 2);
		try
		{
			int _type = FALSE;
			int _channel = DefaultTokenChannel;
			// Compiler\\Group.g3:13:7: ( 'false' )
			DebugEnterAlt(1);
			// Compiler\\Group.g3:13:9: 'false'
			{
			DebugLocation(13, 9);
			Match("false"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FALSE", 2);
			LeaveRule("FALSE", 2);
			LeaveRule_FALSE();
		}
	}
	// $ANTLR end "FALSE"

	partial void EnterRule_LBRACK();
	partial void LeaveRule_LBRACK();

	// $ANTLR start "LBRACK"
	[GrammarRule("LBRACK")]
	private void mLBRACK()
	{
		EnterRule_LBRACK();
		EnterRule("LBRACK", 3);
		TraceIn("LBRACK", 3);
		try
		{
			int _type = LBRACK;
			int _channel = DefaultTokenChannel;
			// Compiler\\Group.g3:14:8: ( '[' )
			DebugEnterAlt(1);
			// Compiler\\Group.g3:14:10: '['
			{
			DebugLocation(14, 10);
			Match('['); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LBRACK", 3);
			LeaveRule("LBRACK", 3);
			LeaveRule_LBRACK();
		}
	}
	// $ANTLR end "LBRACK"

	partial void EnterRule_RBRACK();
	partial void LeaveRule_RBRACK();

	// $ANTLR start "RBRACK"
	[GrammarRule("RBRACK")]
	private void mRBRACK()
	{
		EnterRule_RBRACK();
		EnterRule("RBRACK", 4);
		TraceIn("RBRACK", 4);
		try
		{
			int _type = RBRACK;
			int _channel = DefaultTokenChannel;
			// Compiler\\Group.g3:15:8: ( ']' )
			DebugEnterAlt(1);
			// Compiler\\Group.g3:15:10: ']'
			{
			DebugLocation(15, 10);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RBRACK", 4);
			LeaveRule("RBRACK", 4);
			LeaveRule_RBRACK();
		}
	}
	// $ANTLR end "RBRACK"

	partial void EnterRule_TRUE();
	partial void LeaveRule_TRUE();

	// $ANTLR start "TRUE"
	[GrammarRule("TRUE")]
	private void mTRUE()
	{
		EnterRule_TRUE();
		EnterRule("TRUE", 5);
		TraceIn("TRUE", 5);
		try
		{
			int _type = TRUE;
			int _channel = DefaultTokenChannel;
			// Compiler\\Group.g3:16:6: ( 'true' )
			DebugEnterAlt(1);
			// Compiler\\Group.g3:16:8: 'true'
			{
			DebugLocation(16, 8);
			Match("true"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TRUE", 5);
			LeaveRule("TRUE", 5);
			LeaveRule_TRUE();
		}
	}
	// $ANTLR end "TRUE"

	partial void EnterRule_T__17();
	partial void LeaveRule_T__17();

	// $ANTLR start "T__17"
	[GrammarRule("T__17")]
	private void mT__17()
	{
		EnterRule_T__17();
		EnterRule("T__17", 6);
		TraceIn("T__17", 6);
		try
		{
			int _type = T__17;
			int _channel = DefaultTokenChannel;
			// Compiler\\Group.g3:17:7: ( '(' )
			DebugEnterAlt(1);
			// Compiler\\Group.g3:17:9: '('
			{
			DebugLocation(17, 9);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__17", 6);
			LeaveRule("T__17", 6);
			LeaveRule_T__17();
		}
	}
	// $ANTLR end "T__17"

	partial void EnterRule_T__18();
	partial void LeaveRule_T__18();

	// $ANTLR start "T__18"
	[GrammarRule("T__18")]
	private void mT__18()
	{
		EnterRule_T__18();
		EnterRule("T__18", 7);
		TraceIn("T__18", 7);
		try
		{
			int _type = T__18;
			int _channel = DefaultTokenChannel;
			// Compiler\\Group.g3:18:7: ( ')' )
			DebugEnterAlt(1);
			// Compiler\\Group.g3:18:9: ')'
			{
			DebugLocation(18, 9);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__18", 7);
			LeaveRule("T__18", 7);
			LeaveRule_T__18();
		}
	}
	// $ANTLR end "T__18"

	partial void EnterRule_T__19();
	partial void LeaveRule_T__19();

	// $ANTLR start "T__19"
	[GrammarRule("T__19")]
	private void mT__19()
	{
		EnterRule_T__19();
		EnterRule("T__19", 8);
		TraceIn("T__19", 8);
		try
		{
			int _type = T__19;
			int _channel = DefaultTokenChannel;
			// Compiler\\Group.g3:19:7: ( '.' )
			DebugEnterAlt(1);
			// Compiler\\Group.g3:19:9: '.'
			{
			DebugLocation(19, 9);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__19", 8);
			LeaveRule("T__19", 8);
			LeaveRule_T__19();
		}
	}
	// $ANTLR end "T__19"

	partial void EnterRule_T__20();
	partial void LeaveRule_T__20();

	// $ANTLR start "T__20"
	[GrammarRule("T__20")]
	private void mT__20()
	{
		EnterRule_T__20();
		EnterRule("T__20", 9);
		TraceIn("T__20", 9);
		try
		{
			int _type = T__20;
			int _channel = DefaultTokenChannel;
			// Compiler\\Group.g3:20:7: ( ':' )
			DebugEnterAlt(1);
			// Compiler\\Group.g3:20:9: ':'
			{
			DebugLocation(20, 9);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__20", 9);
			LeaveRule("T__20", 9);
			LeaveRule_T__20();
		}
	}
	// $ANTLR end "T__20"

	partial void EnterRule_T__21();
	partial void LeaveRule_T__21();

	// $ANTLR start "T__21"
	[GrammarRule("T__21")]
	private void mT__21()
	{
		EnterRule_T__21();
		EnterRule("T__21", 10);
		TraceIn("T__21", 10);
		try
		{
			int _type = T__21;
			int _channel = DefaultTokenChannel;
			// Compiler\\Group.g3:21:7: ( '::=' )
			DebugEnterAlt(1);
			// Compiler\\Group.g3:21:9: '::='
			{
			DebugLocation(21, 9);
			Match("::="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__21", 10);
			LeaveRule("T__21", 10);
			LeaveRule_T__21();
		}
	}
	// $ANTLR end "T__21"

	partial void EnterRule_T__22();
	partial void LeaveRule_T__22();

	// $ANTLR start "T__22"
	[GrammarRule("T__22")]
	private void mT__22()
	{
		EnterRule_T__22();
		EnterRule("T__22", 11);
		TraceIn("T__22", 11);
		try
		{
			int _type = T__22;
			int _channel = DefaultTokenChannel;
			// Compiler\\Group.g3:22:7: ( ';' )
			DebugEnterAlt(1);
			// Compiler\\Group.g3:22:9: ';'
			{
			DebugLocation(22, 9);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__22", 11);
			LeaveRule("T__22", 11);
			LeaveRule_T__22();
		}
	}
	// $ANTLR end "T__22"

	partial void EnterRule_T__23();
	partial void LeaveRule_T__23();

	// $ANTLR start "T__23"
	[GrammarRule("T__23")]
	private void mT__23()
	{
		EnterRule_T__23();
		EnterRule("T__23", 12);
		TraceIn("T__23", 12);
		try
		{
			int _type = T__23;
			int _channel = DefaultTokenChannel;
			// Compiler\\Group.g3:23:7: ( '=' )
			DebugEnterAlt(1);
			// Compiler\\Group.g3:23:9: '='
			{
			DebugLocation(23, 9);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__23", 12);
			LeaveRule("T__23", 12);
			LeaveRule_T__23();
		}
	}
	// $ANTLR end "T__23"

	partial void EnterRule_T__24();
	partial void LeaveRule_T__24();

	// $ANTLR start "T__24"
	[GrammarRule("T__24")]
	private void mT__24()
	{
		EnterRule_T__24();
		EnterRule("T__24", 13);
		TraceIn("T__24", 13);
		try
		{
			int _type = T__24;
			int _channel = DefaultTokenChannel;
			// Compiler\\Group.g3:24:7: ( '@' )
			DebugEnterAlt(1);
			// Compiler\\Group.g3:24:9: '@'
			{
			DebugLocation(24, 9);
			Match('@'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__24", 13);
			LeaveRule("T__24", 13);
			LeaveRule_T__24();
		}
	}
	// $ANTLR end "T__24"

	partial void EnterRule_T__25();
	partial void LeaveRule_T__25();

	// $ANTLR start "T__25"
	[GrammarRule("T__25")]
	private void mT__25()
	{
		EnterRule_T__25();
		EnterRule("T__25", 14);
		TraceIn("T__25", 14);
		try
		{
			int _type = T__25;
			int _channel = DefaultTokenChannel;
			// Compiler\\Group.g3:25:7: ( 'default' )
			DebugEnterAlt(1);
			// Compiler\\Group.g3:25:9: 'default'
			{
			DebugLocation(25, 9);
			Match("default"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__25", 14);
			LeaveRule("T__25", 14);
			LeaveRule_T__25();
		}
	}
	// $ANTLR end "T__25"

	partial void EnterRule_T__26();
	partial void LeaveRule_T__26();

	// $ANTLR start "T__26"
	[GrammarRule("T__26")]
	private void mT__26()
	{
		EnterRule_T__26();
		EnterRule("T__26", 15);
		TraceIn("T__26", 15);
		try
		{
			int _type = T__26;
			int _channel = DefaultTokenChannel;
			// Compiler\\Group.g3:26:7: ( 'group' )
			DebugEnterAlt(1);
			// Compiler\\Group.g3:26:9: 'group'
			{
			DebugLocation(26, 9);
			Match("group"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__26", 15);
			LeaveRule("T__26", 15);
			LeaveRule_T__26();
		}
	}
	// $ANTLR end "T__26"

	partial void EnterRule_T__27();
	partial void LeaveRule_T__27();

	// $ANTLR start "T__27"
	[GrammarRule("T__27")]
	private void mT__27()
	{
		EnterRule_T__27();
		EnterRule("T__27", 16);
		TraceIn("T__27", 16);
		try
		{
			int _type = T__27;
			int _channel = DefaultTokenChannel;
			// Compiler\\Group.g3:27:7: ( 'implements' )
			DebugEnterAlt(1);
			// Compiler\\Group.g3:27:9: 'implements'
			{
			DebugLocation(27, 9);
			Match("implements"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__27", 16);
			LeaveRule("T__27", 16);
			LeaveRule_T__27();
		}
	}
	// $ANTLR end "T__27"

	partial void EnterRule_T__28();
	partial void LeaveRule_T__28();

	// $ANTLR start "T__28"
	[GrammarRule("T__28")]
	private void mT__28()
	{
		EnterRule_T__28();
		EnterRule("T__28", 17);
		TraceIn("T__28", 17);
		try
		{
			int _type = T__28;
			int _channel = DefaultTokenChannel;
			// Compiler\\Group.g3:28:7: ( 'import' )
			DebugEnterAlt(1);
			// Compiler\\Group.g3:28:9: 'import'
			{
			DebugLocation(28, 9);
			Match("import"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__28", 17);
			LeaveRule("T__28", 17);
			LeaveRule_T__28();
		}
	}
	// $ANTLR end "T__28"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 18);
		TraceIn("ID", 18);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// Compiler\\Group.g3:222:4: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '-' | '_' )* )
			DebugEnterAlt(1);
			// Compiler\\Group.g3:222:6: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '-' | '_' )*
			{
			DebugLocation(222, 6);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(222, 30);
			// Compiler\\Group.g3:222:30: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '-' | '_' )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if ((LA1_1=='-'||(LA1_1>='0' && LA1_1<='9')||(LA1_1>='A' && LA1_1<='Z')||LA1_1=='_'||(LA1_1>='a' && LA1_1<='z')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// Compiler\\Group.g3:
					{
					DebugLocation(222, 30);
					input.Consume();


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 18);
			LeaveRule("ID", 18);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_STRING();
	partial void LeaveRule_STRING();

	// $ANTLR start "STRING"
	[GrammarRule("STRING")]
	private void mSTRING()
	{
		EnterRule_STRING();
		EnterRule("STRING", 19);
		TraceIn("STRING", 19);
		try
		{
			int _type = STRING;
			int _channel = DefaultTokenChannel;
			// Compiler\\Group.g3:226:2: ( '\"' ( '\\\\' '\"' | '\\\\' ~ '\"' | '\\n' |~ ( '\\\\' | '\"' | '\\n' ) )* '\"' )
			DebugEnterAlt(1);
			// Compiler\\Group.g3:226:4: '\"' ( '\\\\' '\"' | '\\\\' ~ '\"' | '\\n' |~ ( '\\\\' | '\"' | '\\n' ) )* '\"'
			{
			DebugLocation(226, 4);
			Match('\"'); 
			DebugLocation(227, 3);
			// Compiler\\Group.g3:227:3: ( '\\\\' '\"' | '\\\\' ~ '\"' | '\\n' |~ ( '\\\\' | '\"' | '\\n' ) )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=5;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1=='\\'))
				{
					int LA2_2 = input.LA(2);

					if ((LA2_2=='\"'))
					{
						alt2 = 1;
					}
					else if (((LA2_2>='\u0000' && LA2_2<='!')||(LA2_2>='#' && LA2_2<='\uFFFF')))
					{
						alt2 = 2;
					}


				}
				else if ((LA2_1=='\n'))
				{
					alt2 = 3;
				}
				else if (((LA2_1>='\u0000' && LA2_1<='\t')||(LA2_1>='\u000B' && LA2_1<='!')||(LA2_1>='#' && LA2_1<='[')||(LA2_1>=']' && LA2_1<='\uFFFF')))
				{
					alt2 = 4;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// Compiler\\Group.g3:227:5: '\\\\' '\"'
					{
					DebugLocation(227, 5);
					Match('\\'); 
					DebugLocation(227, 10);
					Match('\"'); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Compiler\\Group.g3:228:5: '\\\\' ~ '\"'
					{
					DebugLocation(228, 5);
					Match('\\'); 
					DebugLocation(228, 10);
					input.Consume();


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Compiler\\Group.g3:229:5: '\\n'
					{
					DebugLocation(229, 5);

								string msg = "\\n in string";
					    		NoViableAltException e = new NoViableAltException(string.Empty, 0, 0, input);
								group.ErrorManager.GroupLexerError(ErrorType.SYNTAX_ERROR, SourceName, e, msg);
								
					DebugLocation(234, 4);
					Match('\n'); 

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// Compiler\\Group.g3:235:5: ~ ( '\\\\' | '\"' | '\\n' )
					{
					DebugLocation(235, 5);
					input.Consume();


					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(237, 3);
			Match('\"'); 
			DebugLocation(238, 3);
			Text = Text.Replace("\\\"","\"");

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING", 19);
			LeaveRule("STRING", 19);
			LeaveRule_STRING();
		}
	}
	// $ANTLR end "STRING"

	partial void EnterRule_BIGSTRING();
	partial void LeaveRule_BIGSTRING();

	// $ANTLR start "BIGSTRING"
	[GrammarRule("BIGSTRING")]
	private void mBIGSTRING()
	{
		EnterRule_BIGSTRING();
		EnterRule("BIGSTRING", 20);
		TraceIn("BIGSTRING", 20);
		try
		{
			int _type = BIGSTRING;
			int _channel = DefaultTokenChannel;
			// Compiler\\Group.g3:252:2: ( '<<' ( options {greedy=false; } : '\\\\' '>' | '\\\\' ~ '>' |~ '\\\\' )* '>>' )
			DebugEnterAlt(1);
			// Compiler\\Group.g3:252:4: '<<' ( options {greedy=false; } : '\\\\' '>' | '\\\\' ~ '>' |~ '\\\\' )* '>>'
			{
			DebugLocation(252, 4);
			Match("<<"); 

			DebugLocation(253, 3);
			// Compiler\\Group.g3:253:3: ( options {greedy=false; } : '\\\\' '>' | '\\\\' ~ '>' |~ '\\\\' )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=4;
				try { DebugEnterDecision(3, false);
				int LA3_1 = input.LA(1);

				if ((LA3_1=='>'))
				{
					int LA3_2 = input.LA(2);

					if ((LA3_2=='>'))
					{
						alt3 = 4;
					}
					else if (((LA3_2>='\u0000' && LA3_2<='=')||(LA3_2>='?' && LA3_2<='\uFFFF')))
					{
						alt3 = 3;
					}


				}
				else if ((LA3_1=='\\'))
				{
					int LA3_2 = input.LA(2);

					if ((LA3_2=='>'))
					{
						alt3 = 1;
					}
					else if (((LA3_2>='\u0000' && LA3_2<='=')||(LA3_2>='?' && LA3_2<='\uFFFF')))
					{
						alt3 = 2;
					}


				}
				else if (((LA3_1>='\u0000' && LA3_1<='=')||(LA3_1>='?' && LA3_1<='[')||(LA3_1>=']' && LA3_1<='\uFFFF')))
				{
					alt3 = 3;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// Compiler\\Group.g3:254:5: '\\\\' '>'
					{
					DebugLocation(254, 5);
					Match('\\'); 
					DebugLocation(254, 10);
					Match('>'); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Compiler\\Group.g3:255:5: '\\\\' ~ '>'
					{
					DebugLocation(255, 5);
					Match('\\'); 
					DebugLocation(255, 10);
					input.Consume();


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Compiler\\Group.g3:256:5: ~ '\\\\'
					{
					DebugLocation(256, 5);
					input.Consume();


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }

			DebugLocation(258, 3);
			Match(">>"); 

			DebugLocation(259, 3);

					string txt = Text;
					txt = Utility.ReplaceEscapedRightAngle(txt); // replace \> with > unless <\\>
					Text = txt;
					

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BIGSTRING", 20);
			LeaveRule("BIGSTRING", 20);
			LeaveRule_BIGSTRING();
		}
	}
	// $ANTLR end "BIGSTRING"

	partial void EnterRule_BIGSTRING_NO_NL();
	partial void LeaveRule_BIGSTRING_NO_NL();

	// $ANTLR start "BIGSTRING_NO_NL"
	[GrammarRule("BIGSTRING_NO_NL")]
	private void mBIGSTRING_NO_NL()
	{
		EnterRule_BIGSTRING_NO_NL();
		EnterRule("BIGSTRING_NO_NL", 21);
		TraceIn("BIGSTRING_NO_NL", 21);
		try
		{
			int _type = BIGSTRING_NO_NL;
			int _channel = DefaultTokenChannel;
			// Compiler\\Group.g3:262:2: ( '<%' ( . )* '%>' )
			DebugEnterAlt(1);
			// Compiler\\Group.g3:262:4: '<%' ( . )* '%>'
			{
			DebugLocation(262, 4);
			Match("<%"); 

			DebugLocation(262, 9);
			// Compiler\\Group.g3:262:9: ( . )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if ((LA4_1=='%'))
				{
					int LA4_2 = input.LA(2);

					if ((LA4_2=='>'))
					{
						alt4 = 2;
					}
					else if (((LA4_2>='\u0000' && LA4_2<='=')||(LA4_2>='?' && LA4_2<='\uFFFF')))
					{
						alt4 = 1;
					}


				}
				else if (((LA4_1>='\u0000' && LA4_1<='$')||(LA4_1>='&' && LA4_1<='\uFFFF')))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// Compiler\\Group.g3:262:9: .
					{
					DebugLocation(262, 9);
					MatchAny(); 

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(262, 12);
			Match("%>"); 

			DebugLocation(264, 3);

					Text = Text.Replace("%\\>","%>");
					

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BIGSTRING_NO_NL", 21);
			LeaveRule("BIGSTRING_NO_NL", 21);
			LeaveRule_BIGSTRING_NO_NL();
		}
	}
	// $ANTLR end "BIGSTRING_NO_NL"

	partial void EnterRule_ANONYMOUS_TEMPLATE();
	partial void LeaveRule_ANONYMOUS_TEMPLATE();

	// $ANTLR start "ANONYMOUS_TEMPLATE"
	[GrammarRule("ANONYMOUS_TEMPLATE")]
	private void mANONYMOUS_TEMPLATE()
	{
		EnterRule_ANONYMOUS_TEMPLATE();
		EnterRule("ANONYMOUS_TEMPLATE", 22);
		TraceIn("ANONYMOUS_TEMPLATE", 22);
		try
		{
			int _type = ANONYMOUS_TEMPLATE;
			int _channel = DefaultTokenChannel;
			// Compiler\\Group.g3:270:5: ( '{' )
			DebugEnterAlt(1);
			// Compiler\\Group.g3:270:7: '{'
			{
			DebugLocation(270, 7);
			Match('{'); 
			DebugLocation(271, 6);

					IToken templateToken = new CommonToken(input, ANONYMOUS_TEMPLATE, 0, CharIndex, CharIndex);
					TemplateLexer lexer = new TemplateLexer(group.ErrorManager, input, templateToken, group.DelimiterStartChar, group.DelimiterStopChar);
					lexer.subtemplateDepth = 1;
					IToken t = lexer.NextToken();
					while ( lexer.subtemplateDepth>=1 || t.Type!=TemplateLexer.RCURLY )
					{
						if (t.Type == TemplateLexer.EOF_TYPE)
						{
							MismatchedTokenException e = new MismatchedTokenException('}', input);
							string msg = "missing final '}' in {...} anonymous template";
			    			group.ErrorManager.GroupLexerError(ErrorType.SYNTAX_ERROR, SourceName, e, msg);
							break;
						}
						t = lexer.NextToken();
					}
					

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ANONYMOUS_TEMPLATE", 22);
			LeaveRule("ANONYMOUS_TEMPLATE", 22);
			LeaveRule_ANONYMOUS_TEMPLATE();
		}
	}
	// $ANTLR end "ANONYMOUS_TEMPLATE"

	partial void EnterRule_COMMENT();
	partial void LeaveRule_COMMENT();

	// $ANTLR start "COMMENT"
	[GrammarRule("COMMENT")]
	private void mCOMMENT()
	{
		EnterRule_COMMENT();
		EnterRule("COMMENT", 23);
		TraceIn("COMMENT", 23);
		try
		{
			int _type = COMMENT;
			int _channel = DefaultTokenChannel;
			// Compiler\\Group.g3:293:5: ( '/*' ( . )* '*/' )
			DebugEnterAlt(1);
			// Compiler\\Group.g3:293:9: '/*' ( . )* '*/'
			{
			DebugLocation(293, 9);
			Match("/*"); 

			DebugLocation(293, 14);
			// Compiler\\Group.g3:293:14: ( . )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if ((LA5_1=='*'))
				{
					int LA5_2 = input.LA(2);

					if ((LA5_2=='/'))
					{
						alt5 = 2;
					}
					else if (((LA5_2>='\u0000' && LA5_2<='.')||(LA5_2>='0' && LA5_2<='\uFFFF')))
					{
						alt5 = 1;
					}


				}
				else if (((LA5_1>='\u0000' && LA5_1<=')')||(LA5_1>='+' && LA5_1<='\uFFFF')))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// Compiler\\Group.g3:293:14: .
					{
					DebugLocation(293, 14);
					MatchAny(); 

					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(293, 17);
			Match("*/"); 

			DebugLocation(293, 22);
			Skip();

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMENT", 23);
			LeaveRule("COMMENT", 23);
			LeaveRule_COMMENT();
		}
	}
	// $ANTLR end "COMMENT"

	partial void EnterRule_LINE_COMMENT();
	partial void LeaveRule_LINE_COMMENT();

	// $ANTLR start "LINE_COMMENT"
	[GrammarRule("LINE_COMMENT")]
	private void mLINE_COMMENT()
	{
		EnterRule_LINE_COMMENT();
		EnterRule("LINE_COMMENT", 24);
		TraceIn("LINE_COMMENT", 24);
		try
		{
			int _type = LINE_COMMENT;
			int _channel = DefaultTokenChannel;
			// Compiler\\Group.g3:297:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' )
			DebugEnterAlt(1);
			// Compiler\\Group.g3:297:7: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
			{
			DebugLocation(297, 7);
			Match("//"); 

			DebugLocation(297, 12);
			// Compiler\\Group.g3:297:12: (~ ( '\\n' | '\\r' ) )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if (((LA6_1>='\u0000' && LA6_1<='\t')||(LA6_1>='\u000B' && LA6_1<='\f')||(LA6_1>='\u000E' && LA6_1<='\uFFFF')))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// Compiler\\Group.g3:
					{
					DebugLocation(297, 12);
					input.Consume();


					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(297, 26);
			// Compiler\\Group.g3:297:26: ( '\\r' )?
			int alt7=2;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, false);
			int LA7_1 = input.LA(1);

			if ((LA7_1=='\r'))
			{
				alt7 = 1;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\Group.g3:297:26: '\\r'
				{
				DebugLocation(297, 26);
				Match('\r'); 

				}
				break;

			}
			} finally { DebugExitSubRule(7); }

			DebugLocation(297, 32);
			Match('\n'); 
			DebugLocation(297, 37);
			Skip();

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LINE_COMMENT", 24);
			LeaveRule("LINE_COMMENT", 24);
			LeaveRule_LINE_COMMENT();
		}
	}
	// $ANTLR end "LINE_COMMENT"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 25);
		TraceIn("WS", 25);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// Compiler\\Group.g3:301:2: ( ( ' ' | '\\r' | '\\t' | '\\n' ) )
			DebugEnterAlt(1);
			// Compiler\\Group.g3:301:4: ( ' ' | '\\r' | '\\t' | '\\n' )
			{
			DebugLocation(301, 4);
			if ((input.LA(1)>='\t' && input.LA(1)<='\n')||input.LA(1)=='\r'||input.LA(1)==' ')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(301, 25);
			Skip();

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 25);
			LeaveRule("WS", 25);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	public override void mTokens()
	{
		// Compiler\\Group.g3:1:8: ( COMMA | FALSE | LBRACK | RBRACK | TRUE | T__17 | T__18 | T__19 | T__20 | T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | ID | STRING | BIGSTRING | BIGSTRING_NO_NL | ANONYMOUS_TEMPLATE | COMMENT | LINE_COMMENT | WS )
		int alt8=25;
		try { DebugEnterDecision(8, false);
		try
		{
			alt8 = dfa8.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(8); }
		switch (alt8)
		{
		case 1:
			DebugEnterAlt(1);
			// Compiler\\Group.g3:1:10: COMMA
			{
			DebugLocation(1, 10);
			mCOMMA(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// Compiler\\Group.g3:1:16: FALSE
			{
			DebugLocation(1, 16);
			mFALSE(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// Compiler\\Group.g3:1:22: LBRACK
			{
			DebugLocation(1, 22);
			mLBRACK(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// Compiler\\Group.g3:1:29: RBRACK
			{
			DebugLocation(1, 29);
			mRBRACK(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// Compiler\\Group.g3:1:36: TRUE
			{
			DebugLocation(1, 36);
			mTRUE(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// Compiler\\Group.g3:1:41: T__17
			{
			DebugLocation(1, 41);
			mT__17(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// Compiler\\Group.g3:1:47: T__18
			{
			DebugLocation(1, 47);
			mT__18(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// Compiler\\Group.g3:1:53: T__19
			{
			DebugLocation(1, 53);
			mT__19(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// Compiler\\Group.g3:1:59: T__20
			{
			DebugLocation(1, 59);
			mT__20(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// Compiler\\Group.g3:1:65: T__21
			{
			DebugLocation(1, 65);
			mT__21(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// Compiler\\Group.g3:1:71: T__22
			{
			DebugLocation(1, 71);
			mT__22(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// Compiler\\Group.g3:1:77: T__23
			{
			DebugLocation(1, 77);
			mT__23(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// Compiler\\Group.g3:1:83: T__24
			{
			DebugLocation(1, 83);
			mT__24(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// Compiler\\Group.g3:1:89: T__25
			{
			DebugLocation(1, 89);
			mT__25(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// Compiler\\Group.g3:1:95: T__26
			{
			DebugLocation(1, 95);
			mT__26(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// Compiler\\Group.g3:1:101: T__27
			{
			DebugLocation(1, 101);
			mT__27(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// Compiler\\Group.g3:1:107: T__28
			{
			DebugLocation(1, 107);
			mT__28(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// Compiler\\Group.g3:1:113: ID
			{
			DebugLocation(1, 113);
			mID(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// Compiler\\Group.g3:1:116: STRING
			{
			DebugLocation(1, 116);
			mSTRING(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// Compiler\\Group.g3:1:123: BIGSTRING
			{
			DebugLocation(1, 123);
			mBIGSTRING(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// Compiler\\Group.g3:1:133: BIGSTRING_NO_NL
			{
			DebugLocation(1, 133);
			mBIGSTRING_NO_NL(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// Compiler\\Group.g3:1:149: ANONYMOUS_TEMPLATE
			{
			DebugLocation(1, 149);
			mANONYMOUS_TEMPLATE(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// Compiler\\Group.g3:1:168: COMMENT
			{
			DebugLocation(1, 168);
			mCOMMENT(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// Compiler\\Group.g3:1:176: LINE_COMMENT
			{
			DebugLocation(1, 176);
			mLINE_COMMENT(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// Compiler\\Group.g3:1:189: WS
			{
			DebugLocation(1, 189);
			mWS(); 

			}
			break;

		}

	}


	#region DFA
	DFA8 dfa8;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa8 = new DFA8(this);
	}

	private class DFA8 : DFA
	{
		private const string DFA8_eotS =
			"\x2\xFFFF\x1\x10\x2\xFFFF\x1\x10\x3\xFFFF\x1\x19\x3\xFFFF\x3\x10\x6\xFFFF"+
			"\x2\x10\x2\xFFFF\x3\x10\x4\xFFFF\x6\x10\x1\x2D\x4\x10\x1\x32\x1\xFFFF"+
			"\x1\x10\x1\x34\x2\x10\x1\xFFFF\x1\x10\x1\xFFFF\x1\x10\x1\x39\x1\x3A\x1"+
			"\x10\x2\xFFFF\x2\x10\x1\x3E\x1\xFFFF";
		private const string DFA8_eofS =
			"\x3F\xFFFF";
		private const string DFA8_minS =
			"\x1\x9\x1\xFFFF\x1\x61\x2\xFFFF\x1\x72\x3\xFFFF\x1\x3A\x3\xFFFF\x1\x65"+
			"\x1\x72\x1\x6D\x2\xFFFF\x1\x25\x1\xFFFF\x1\x2A\x1\xFFFF\x1\x6C\x1\x75"+
			"\x2\xFFFF\x1\x66\x1\x6F\x1\x70\x4\xFFFF\x1\x73\x1\x65\x1\x61\x1\x75\x1"+
			"\x6C\x1\x65\x1\x2D\x1\x75\x1\x70\x1\x65\x1\x72\x1\x2D\x1\xFFFF\x1\x6C"+
			"\x1\x2D\x1\x6D\x1\x74\x1\xFFFF\x1\x74\x1\xFFFF\x1\x65\x2\x2D\x1\x6E\x2"+
			"\xFFFF\x1\x74\x1\x73\x1\x2D\x1\xFFFF";
		private const string DFA8_maxS =
			"\x1\x7B\x1\xFFFF\x1\x61\x2\xFFFF\x1\x72\x3\xFFFF\x1\x3A\x3\xFFFF\x1\x65"+
			"\x1\x72\x1\x6D\x2\xFFFF\x1\x3C\x1\xFFFF\x1\x2F\x1\xFFFF\x1\x6C\x1\x75"+
			"\x2\xFFFF\x1\x66\x1\x6F\x1\x70\x4\xFFFF\x1\x73\x1\x65\x1\x61\x1\x75\x1"+
			"\x6F\x1\x65\x1\x7A\x1\x75\x1\x70\x1\x65\x1\x72\x1\x7A\x1\xFFFF\x1\x6C"+
			"\x1\x7A\x1\x6D\x1\x74\x1\xFFFF\x1\x74\x1\xFFFF\x1\x65\x2\x7A\x1\x6E\x2"+
			"\xFFFF\x1\x74\x1\x73\x1\x7A\x1\xFFFF";
		private const string DFA8_acceptS =
			"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\x4\x1\xFFFF\x1\x6\x1\x7\x1\x8\x1\xFFFF"+
			"\x1\xB\x1\xC\x1\xD\x3\xFFFF\x1\x12\x1\x13\x1\xFFFF\x1\x16\x1\xFFFF\x1"+
			"\x19\x2\xFFFF\x1\xA\x1\x9\x3\xFFFF\x1\x14\x1\x15\x1\x17\x1\x18\xC\xFFFF"+
			"\x1\x5\x4\xFFFF\x1\x2\x1\xFFFF\x1\xF\x4\xFFFF\x1\x11\x1\xE\x3\xFFFF\x1"+
			"\x10";
		private const string DFA8_specialS =
			"\x3F\xFFFF}>";
		private static readonly string[] DFA8_transitionS =
			{
				"\x2\x15\x2\xFFFF\x1\x15\x12\xFFFF\x1\x15\x1\xFFFF\x1\x11\x5\xFFFF\x1"+
				"\x6\x1\x7\x2\xFFFF\x1\x1\x1\xFFFF\x1\x8\x1\x14\xA\xFFFF\x1\x9\x1\xA"+
				"\x1\x12\x1\xB\x2\xFFFF\x1\xC\x1A\x10\x1\x3\x1\xFFFF\x1\x4\x1\xFFFF\x1"+
				"\x10\x1\xFFFF\x3\x10\x1\xD\x1\x10\x1\x2\x1\xE\x1\x10\x1\xF\xA\x10\x1"+
				"\x5\x6\x10\x1\x13",
				"",
				"\x1\x16",
				"",
				"",
				"\x1\x17",
				"",
				"",
				"",
				"\x1\x18",
				"",
				"",
				"",
				"\x1\x1A",
				"\x1\x1B",
				"\x1\x1C",
				"",
				"",
				"\x1\x1E\x16\xFFFF\x1\x1D",
				"",
				"\x1\x1F\x4\xFFFF\x1\x20",
				"",
				"\x1\x21",
				"\x1\x22",
				"",
				"",
				"\x1\x23",
				"\x1\x24",
				"\x1\x25",
				"",
				"",
				"",
				"",
				"\x1\x26",
				"\x1\x27",
				"\x1\x28",
				"\x1\x29",
				"\x1\x2A\x2\xFFFF\x1\x2B",
				"\x1\x2C",
				"\x1\x10\x2\xFFFF\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A"+
				"\x10",
				"\x1\x2E",
				"\x1\x2F",
				"\x1\x30",
				"\x1\x31",
				"\x1\x10\x2\xFFFF\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A"+
				"\x10",
				"",
				"\x1\x33",
				"\x1\x10\x2\xFFFF\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A"+
				"\x10",
				"\x1\x35",
				"\x1\x36",
				"",
				"\x1\x37",
				"",
				"\x1\x38",
				"\x1\x10\x2\xFFFF\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A"+
				"\x10",
				"\x1\x10\x2\xFFFF\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A"+
				"\x10",
				"\x1\x3B",
				"",
				"",
				"\x1\x3C",
				"\x1\x3D",
				"\x1\x10\x2\xFFFF\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A"+
				"\x10",
				""
			};

		private static readonly short[] DFA8_eot = DFA.UnpackEncodedString(DFA8_eotS);
		private static readonly short[] DFA8_eof = DFA.UnpackEncodedString(DFA8_eofS);
		private static readonly char[] DFA8_min = DFA.UnpackEncodedStringToUnsignedChars(DFA8_minS);
		private static readonly char[] DFA8_max = DFA.UnpackEncodedStringToUnsignedChars(DFA8_maxS);
		private static readonly short[] DFA8_accept = DFA.UnpackEncodedString(DFA8_acceptS);
		private static readonly short[] DFA8_special = DFA.UnpackEncodedString(DFA8_specialS);
		private static readonly short[][] DFA8_transition;

		static DFA8()
		{
			int numStates = DFA8_transitionS.Length;
			DFA8_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA8_transition[i] = DFA.UnpackEncodedString(DFA8_transitionS[i]);
			}
		}

		public DFA8( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 8;
			this.eot = DFA8_eot;
			this.eof = DFA8_eof;
			this.min = DFA8_min;
			this.max = DFA8_max;
			this.accept = DFA8_accept;
			this.special = DFA8_special;
			this.transition = DFA8_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( COMMA | FALSE | LBRACK | RBRACK | TRUE | T__17 | T__18 | T__19 | T__20 | T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | ID | STRING | BIGSTRING | BIGSTRING_NO_NL | ANONYMOUS_TEMPLATE | COMMENT | LINE_COMMENT | WS );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion

}

} // namespace Antlr4.StringTemplate.Compiler
