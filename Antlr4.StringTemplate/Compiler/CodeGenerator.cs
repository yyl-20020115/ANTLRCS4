//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.2-beta2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.2-beta2 Compiler\\CodeGenerator.g3 2022-04-09 08:56:43

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using Antlr4.StringTemplate.Misc;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace Antlr4.StringTemplate.Compiler
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.2-beta2")]
[System.CLSCompliant(false)]
public partial class CodeGenerator : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "IF", "ELSE", "ELSEIF", "ENDIF", "SUPER", "SEMI", "BANG", "ELLIPSIS", "EQUALS", "COLON", "LPAREN", "RPAREN", "LBRACK", "RBRACK", "COMMA", "DOT", "LCURLY", "RCURLY", "TEXT", "LDELIM", "RDELIM", "ID", "STRING", "WS", "PIPE", "OR", "AND", "INDENT", "NEWLINE", "AT", "END", "TRUE", "FALSE", "COMMENT", "ARGS", "ELEMENTS", "EXEC_FUNC", "EXPR", "INCLUDE", "INCLUDE_IND", "INCLUDE_REGION", "INCLUDE_SUPER", "INCLUDE_SUPER_REGION", "LIST", "MAP", "NULL", "OPTIONS", "PROP", "PROP_IND", "REGION", "SUBTEMPLATE", "TO_STR", "ZIP"
	};
	public const int EOF=-1;
	public const int IF=4;
	public const int ELSE=5;
	public const int ELSEIF=6;
	public const int ENDIF=7;
	public const int SUPER=8;
	public const int SEMI=9;
	public const int BANG=10;
	public const int ELLIPSIS=11;
	public const int EQUALS=12;
	public const int COLON=13;
	public const int LPAREN=14;
	public const int RPAREN=15;
	public const int LBRACK=16;
	public const int RBRACK=17;
	public const int COMMA=18;
	public const int DOT=19;
	public const int LCURLY=20;
	public const int RCURLY=21;
	public const int TEXT=22;
	public const int LDELIM=23;
	public const int RDELIM=24;
	public const int ID=25;
	public const int STRING=26;
	public const int WS=27;
	public const int PIPE=28;
	public const int OR=29;
	public const int AND=30;
	public const int INDENT=31;
	public const int NEWLINE=32;
	public const int AT=33;
	public const int END=34;
	public const int TRUE=35;
	public const int FALSE=36;
	public const int COMMENT=37;
	public const int ARGS=38;
	public const int ELEMENTS=39;
	public const int EXEC_FUNC=40;
	public const int EXPR=41;
	public const int INCLUDE=42;
	public const int INCLUDE_IND=43;
	public const int INCLUDE_REGION=44;
	public const int INCLUDE_SUPER=45;
	public const int INCLUDE_SUPER_REGION=46;
	public const int LIST=47;
	public const int MAP=48;
	public const int NULL=49;
	public const int OPTIONS=50;
	public const int PROP=51;
	public const int PROP_IND=52;
	public const int REGION=53;
	public const int SUBTEMPLATE=54;
	public const int TO_STR=55;
	public const int ZIP=56;

	private CodeGenerator(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	private CodeGenerator(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return CodeGenerator.tokenNames; } }
	public override string GrammarFileName { get { return "Compiler\\CodeGenerator.g3"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_templateAndEOF();
	partial void LeaveRule_templateAndEOF();
	// $ANTLR start "templateAndEOF"
	// Compiler\\CodeGenerator.g3:49:1: templateAndEOF : template[null,null] EOF ;
	[GrammarRule("templateAndEOF")]
	private void templateAndEOF()
	{
		EnterRule_templateAndEOF();
		EnterRule("templateAndEOF", 1);
		TraceIn("templateAndEOF", 1);
		try { DebugEnterRule(GrammarFileName, "templateAndEOF");
		DebugLocation(49, 40);
		try
		{
			// Compiler\\CodeGenerator.g3:49:16: ( template[null,null] EOF )
			DebugEnterAlt(1);
			// Compiler\\CodeGenerator.g3:49:18: template[null,null] EOF
			{
			DebugLocation(49, 18);
			PushFollow(Follow._template_in_templateAndEOF53);
			template(null, null);
			PopFollow();

			DebugLocation(49, 38);
			Match(input,EOF,Follow._EOF_in_templateAndEOF56); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("templateAndEOF", 1);
			LeaveRule("templateAndEOF", 1);
			LeaveRule_templateAndEOF();
		}
		DebugLocation(49, 40);
		} finally { DebugExitRule(GrammarFileName, "templateAndEOF"); }
		return;

	}
	// $ANTLR end "templateAndEOF"

	protected sealed partial class template_scope
	{
		public CompilationState state;

		public template_scope(CodeGenerator grammar) { OnCreated(grammar); }
		partial void OnCreated(CodeGenerator grammar);
	}
	partial void template_scopeInit( template_scope scope );
	partial void template_scopeAfter( template_scope scope );
	protected readonly ListStack<template_scope> template_stack = new ListStack<template_scope>();

	partial void EnterRule_template();
	partial void LeaveRule_template();
	// $ANTLR start "template"
	// Compiler\\CodeGenerator.g3:52:1: public template[string name, List<FormalArgument> args] returns [CompiledTemplate impl] : chunk ;
	[GrammarRule("template")]
	public CompiledTemplate template(string name, List<FormalArgument> args)
	{
		EnterRule_template();
		EnterRule("template", 2);
		TraceIn("template", 2);
		template_stack.Push(new template_scope(this));template_scopeInit(template_stack.Peek());
		CompiledTemplate impl = default(CompiledTemplate);



		 	template_stack.Peek().state =  new CompilationState(errMgr, name, input.TokenStream);
			impl = template_stack.Peek().state.impl;
		 	if (template_stack.Count == 1) outermostImpl = impl;
			impl.DefineFormalArguments(args); // make sure args are defined prior to compilation
			if ( name!=null && name.StartsWith(TemplateCompiler.SubtemplatePrefix) ) {
			    impl.AddArgument(new FormalArgument("i"));
			    impl.AddArgument(new FormalArgument("i0"));
		    }
			impl.Template = _template; // always forget the entire template; char indexes are relative to it

		try { DebugEnterRule(GrammarFileName, "template");
		DebugLocation(52, 1);
		try
		{
			// Compiler\\CodeGenerator.g3:67:2: ( chunk )
			DebugEnterAlt(1);
			// Compiler\\CodeGenerator.g3:67:4: chunk
			{
			DebugLocation(67, 4);
			PushFollow(Follow._chunk_in_template82);
			chunk();
			PopFollow();

			DebugLocation(68, 3);
			 // finish off the CompiledTemplate result
			        if ( template_stack.Peek().state.stringtable!=null ) impl.strings = template_stack.Peek().state.stringtable.ToArray();
			        impl.codeSize = template_stack.Peek().state.ip;
					

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("template", 2);
			LeaveRule("template", 2);
			LeaveRule_template();
			template_scopeAfter(template_stack.Peek());template_stack.Pop();
		}
		DebugLocation(72, 1);
		} finally { DebugExitRule(GrammarFileName, "template"); }
		return impl;

	}
	// $ANTLR end "template"

	partial void EnterRule_chunk();
	partial void LeaveRule_chunk();
	// $ANTLR start "chunk"
	// Compiler\\CodeGenerator.g3:74:1: chunk : ( element )* ;
	[GrammarRule("chunk")]
	private void chunk()
	{
		EnterRule_chunk();
		EnterRule("chunk", 3);
		TraceIn("chunk", 3);
		try { DebugEnterRule(GrammarFileName, "chunk");
		DebugLocation(74, 1);
		try
		{
			// Compiler\\CodeGenerator.g3:75:2: ( ( element )* )
			DebugEnterAlt(1);
			// Compiler\\CodeGenerator.g3:75:4: ( element )*
			{
			DebugLocation(75, 4);
			// Compiler\\CodeGenerator.g3:75:4: ( element )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if ((LA1_1==IF||LA1_1==TEXT||(LA1_1>=INDENT && LA1_1<=NEWLINE)||LA1_1==EXPR||LA1_1==REGION))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// Compiler\\CodeGenerator.g3:75:4: element
					{
					DebugLocation(75, 4);
					PushFollow(Follow._element_in_chunk97);
					element();
					PopFollow();


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("chunk", 3);
			LeaveRule("chunk", 3);
			LeaveRule_chunk();
		}
		DebugLocation(76, 1);
		} finally { DebugExitRule(GrammarFileName, "chunk"); }
		return;

	}
	// $ANTLR end "chunk"

	partial void EnterRule_element();
	partial void LeaveRule_element();
	// $ANTLR start "element"
	// Compiler\\CodeGenerator.g3:78:1: element : ( ^( INDENT compoundElement[$INDENT] ) | compoundElement[null] | ^( INDENT singleElement ) | INDENT | singleElement );
	[GrammarRule("element")]
	private void element()
	{
		EnterRule_element();
		EnterRule("element", 4);
		TraceIn("element", 4);
		CommonTree INDENT1 = default(CommonTree);
		CommonTree INDENT2 = default(CommonTree);
		CommonTree INDENT3 = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "element");
		DebugLocation(78, 1);
		try
		{
			// Compiler\\CodeGenerator.g3:79:2: ( ^( INDENT compoundElement[$INDENT] ) | compoundElement[null] | ^( INDENT singleElement ) | INDENT | singleElement )
			int alt2=5;
			try { DebugEnterDecision(2, false);
			switch (input.LA(1))
			{
			case INDENT:
				{
				int LA2_2 = input.LA(2);

				if ((LA2_2==DOWN))
				{
					int LA2_3 = input.LA(3);

					if ((LA2_3==IF||LA2_3==REGION))
					{
						alt2 = 1;
					}
					else if ((LA2_3==TEXT||LA2_3==NEWLINE||LA2_3==EXPR))
					{
						alt2 = 3;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 2, 4, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA2_2==EOF||(LA2_2>=UP && LA2_2<=ELSEIF)||LA2_2==TEXT||(LA2_2>=INDENT && LA2_2<=NEWLINE)||LA2_2==EXPR||LA2_2==REGION))
				{
					alt2 = 4;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IF:
			case REGION:
				{
				alt2 = 2;
				}
				break;
			case TEXT:
			case NEWLINE:
			case EXPR:
				{
				alt2 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\CodeGenerator.g3:79:4: ^( INDENT compoundElement[$INDENT] )
				{
				DebugLocation(79, 4);
				DebugLocation(79, 6);
				INDENT1=(CommonTree)Match(input,INDENT,Follow._INDENT_in_element110); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(79, 13);
				PushFollow(Follow._compoundElement_in_element112);
				compoundElement(INDENT1);
				PopFollow();


				Match(input, TokenTypes.Up, null); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Compiler\\CodeGenerator.g3:80:4: compoundElement[null]
				{
				DebugLocation(80, 4);
				PushFollow(Follow._compoundElement_in_element119);
				compoundElement(null);
				PopFollow();


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Compiler\\CodeGenerator.g3:81:4: ^( INDENT singleElement )
				{
				DebugLocation(81, 4);
				DebugLocation(81, 6);
				INDENT2=(CommonTree)Match(input,INDENT,Follow._INDENT_in_element126); 

				DebugLocation(81, 13);
				Indent(INDENT2);

				Match(input, TokenTypes.Down, null); 
				DebugLocation(81, 32);
				PushFollow(Follow._singleElement_in_element130);
				singleElement();
				PopFollow();

				DebugLocation(81, 46);
				Dedent();

				Match(input, TokenTypes.Up, null); 


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Compiler\\CodeGenerator.g3:82:4: INDENT
				{
				DebugLocation(82, 4);
				INDENT3=(CommonTree)Match(input,INDENT,Follow._INDENT_in_element138); 
				DebugLocation(82, 11);
				Indent(INDENT3); Dedent();

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Compiler\\CodeGenerator.g3:83:4: singleElement
				{
				DebugLocation(83, 4);
				PushFollow(Follow._singleElement_in_element145);
				singleElement();
				PopFollow();


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("element", 4);
			LeaveRule("element", 4);
			LeaveRule_element();
		}
		DebugLocation(84, 1);
		} finally { DebugExitRule(GrammarFileName, "element"); }
		return;

	}
	// $ANTLR end "element"

	partial void EnterRule_singleElement();
	partial void LeaveRule_singleElement();
	// $ANTLR start "singleElement"
	// Compiler\\CodeGenerator.g3:86:1: singleElement : ( exprElement | TEXT | NEWLINE );
	[GrammarRule("singleElement")]
	private void singleElement()
	{
		EnterRule_singleElement();
		EnterRule("singleElement", 5);
		TraceIn("singleElement", 5);
		CommonTree TEXT4 = default(CommonTree);
		CommonTree NEWLINE5 = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "singleElement");
		DebugLocation(86, 1);
		try
		{
			// Compiler\\CodeGenerator.g3:87:2: ( exprElement | TEXT | NEWLINE )
			int alt3=3;
			try { DebugEnterDecision(3, false);
			switch (input.LA(1))
			{
			case EXPR:
				{
				alt3 = 1;
				}
				break;
			case TEXT:
				{
				alt3 = 2;
				}
				break;
			case NEWLINE:
				{
				alt3 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\CodeGenerator.g3:87:4: exprElement
				{
				DebugLocation(87, 4);
				PushFollow(Follow._exprElement_in_singleElement156);
				exprElement();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Compiler\\CodeGenerator.g3:88:4: TEXT
				{
				DebugLocation(88, 4);
				TEXT4=(CommonTree)Match(input,TEXT,Follow._TEXT_in_singleElement161); 
				DebugLocation(89, 3);

						if ((TEXT4!=null?TEXT4.Text:default(string)).Length > 0)
							emit1(TEXT4,Bytecode.INSTR_WRITE_STR, (TEXT4!=null?TEXT4.Text:default(string)));
						

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Compiler\\CodeGenerator.g3:93:4: NEWLINE
				{
				DebugLocation(93, 4);
				NEWLINE5=(CommonTree)Match(input,NEWLINE,Follow._NEWLINE_in_singleElement170); 
				DebugLocation(93, 12);
				emit(NEWLINE5, Bytecode.INSTR_NEWLINE);

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("singleElement", 5);
			LeaveRule("singleElement", 5);
			LeaveRule_singleElement();
		}
		DebugLocation(94, 1);
		} finally { DebugExitRule(GrammarFileName, "singleElement"); }
		return;

	}
	// $ANTLR end "singleElement"

	partial void EnterRule_compoundElement();
	partial void LeaveRule_compoundElement();
	// $ANTLR start "compoundElement"
	// Compiler\\CodeGenerator.g3:96:1: compoundElement[CommonTree indent] : ( ifstat[$indent] | region[$indent] );
	[GrammarRule("compoundElement")]
	private void compoundElement(CommonTree indent)
	{
		EnterRule_compoundElement();
		EnterRule("compoundElement", 6);
		TraceIn("compoundElement", 6);
		try { DebugEnterRule(GrammarFileName, "compoundElement");
		DebugLocation(96, 1);
		try
		{
			// Compiler\\CodeGenerator.g3:97:2: ( ifstat[$indent] | region[$indent] )
			int alt4=2;
			try { DebugEnterDecision(4, false);
			int LA4_1 = input.LA(1);

			if ((LA4_1==IF))
			{
				alt4 = 1;
			}
			else if ((LA4_1==REGION))
			{
				alt4 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 4, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\CodeGenerator.g3:97:4: ifstat[$indent]
				{
				DebugLocation(97, 4);
				PushFollow(Follow._ifstat_in_compoundElement184);
				ifstat(indent);
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Compiler\\CodeGenerator.g3:98:4: region[$indent]
				{
				DebugLocation(98, 4);
				PushFollow(Follow._region_in_compoundElement190);
				region(indent);
				PopFollow();


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("compoundElement", 6);
			LeaveRule("compoundElement", 6);
			LeaveRule_compoundElement();
		}
		DebugLocation(99, 1);
		} finally { DebugExitRule(GrammarFileName, "compoundElement"); }
		return;

	}
	// $ANTLR end "compoundElement"

	partial void EnterRule_exprElement();
	partial void LeaveRule_exprElement();
	// $ANTLR start "exprElement"
	// Compiler\\CodeGenerator.g3:101:1: exprElement : ^( EXPR expr ( exprOptions )? ) ;
	[GrammarRule("exprElement")]
	private void exprElement()
	{
		EnterRule_exprElement();
		EnterRule("exprElement", 7);
		TraceIn("exprElement", 7);
		CommonTree EXPR6 = default(CommonTree);

		 Bytecode op = Bytecode.INSTR_WRITE; 
		try { DebugEnterRule(GrammarFileName, "exprElement");
		DebugLocation(101, 1);
		try
		{
			// Compiler\\CodeGenerator.g3:103:2: ( ^( EXPR expr ( exprOptions )? ) )
			DebugEnterAlt(1);
			// Compiler\\CodeGenerator.g3:103:4: ^( EXPR expr ( exprOptions )? )
			{
			DebugLocation(103, 4);
			DebugLocation(103, 7);
			EXPR6=(CommonTree)Match(input,EXPR,Follow._EXPR_in_exprElement209); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(103, 12);
			PushFollow(Follow._expr_in_exprElement211);
			expr();
			PopFollow();

			DebugLocation(103, 17);
			// Compiler\\CodeGenerator.g3:103:17: ( exprOptions )?
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_1 = input.LA(1);

			if ((LA5_1==OPTIONS))
			{
				alt5 = 1;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\CodeGenerator.g3:103:18: exprOptions
				{
				DebugLocation(103, 18);
				PushFollow(Follow._exprOptions_in_exprElement214);
				exprOptions();
				PopFollow();

				DebugLocation(103, 30);
				op=Bytecode.INSTR_WRITE_OPT;

				}
				break;

			}
			} finally { DebugExitSubRule(5); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(104, 3);
			emit(EXPR6, op);

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("exprElement", 7);
			LeaveRule("exprElement", 7);
			LeaveRule_exprElement();
		}
		DebugLocation(105, 1);
		} finally { DebugExitRule(GrammarFileName, "exprElement"); }
		return;

	}
	// $ANTLR end "exprElement"

	private sealed partial class region_return : TreeRuleReturnScope<CommonTree>
	{
		public string name;
		public region_return(CodeGenerator grammar) {OnCreated(grammar);}
		partial void OnCreated(CodeGenerator grammar);
	}

	partial void EnterRule_region();
	partial void LeaveRule_region();
	// $ANTLR start "region"
	// Compiler\\CodeGenerator.g3:107:1: region[CommonTree indent] returns [string name] : ^( REGION ID template[$name,null] ) ;
	[GrammarRule("region")]
	private CodeGenerator.region_return region(CommonTree indent)
	{
		EnterRule_region();
		EnterRule("region", 8);
		TraceIn("region", 8);
		CodeGenerator.region_return retval = new CodeGenerator.region_return(this);
		retval.Start = (CommonTree)input.LT(1);

		CommonTree ID7 = default(CommonTree);
		CompiledTemplate template8 = default(CompiledTemplate);

		if (indent != null) Indent(indent);
		try { DebugEnterRule(GrammarFileName, "region");
		DebugLocation(107, 1);
		try
		{
			// Compiler\\CodeGenerator.g3:110:2: ( ^( REGION ID template[$name,null] ) )
			DebugEnterAlt(1);
			// Compiler\\CodeGenerator.g3:110:4: ^( REGION ID template[$name,null] )
			{
			DebugLocation(110, 4);
			DebugLocation(110, 7);
			Match(input,REGION,Follow._REGION_in_region252); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(110, 14);
			ID7=(CommonTree)Match(input,ID,Follow._ID_in_region254); 
			DebugLocation(111, 4);
			retval.name = TemplateGroup.GetMangledRegionName(outermostTemplateName, (ID7!=null?ID7.Text:default(string)));
			DebugLocation(112, 4);
			PushFollow(Follow._template_in_region264);
			template8=template(retval.name, null);
			PopFollow();

			DebugLocation(113, 4);

						CompiledTemplate sub = template8;
				        sub.IsRegion = true;
				        sub.RegionDefType = Template.RegionType.Embedded;
						sub.TemplateDefStartToken = ID7.Token;
						outermostImpl.AddImplicitlyDefinedTemplate(sub);
						emit2(retval.Start, Bytecode.INSTR_NEW, retval.name, 0);
						emit(retval.Start, Bytecode.INSTR_WRITE);
						

			Match(input, TokenTypes.Up, null); 


			}

			if (indent != null) Dedent();
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("region", 8);
			LeaveRule("region", 8);
			LeaveRule_region();
		}
		DebugLocation(123, 1);
		} finally { DebugExitRule(GrammarFileName, "region"); }
		return retval;

	}
	// $ANTLR end "region"

	private sealed partial class subtemplate_return : TreeRuleReturnScope<CommonTree>
	{
		public string name;
		public int nargs;
		public subtemplate_return(CodeGenerator grammar) {OnCreated(grammar);}
		partial void OnCreated(CodeGenerator grammar);
	}

	partial void EnterRule_subtemplate();
	partial void LeaveRule_subtemplate();
	// $ANTLR start "subtemplate"
	// Compiler\\CodeGenerator.g3:125:1: subtemplate returns [string name, int nargs] : ^( SUBTEMPLATE ( ^( ARGS ( ID )+ ) )* template[$name,args] ) ;
	[GrammarRule("subtemplate")]
	private CodeGenerator.subtemplate_return subtemplate()
	{
		EnterRule_subtemplate();
		EnterRule("subtemplate", 9);
		TraceIn("subtemplate", 9);
		CodeGenerator.subtemplate_return retval = new CodeGenerator.subtemplate_return(this);
		retval.Start = (CommonTree)input.LT(1);

		CommonTree ID9 = default(CommonTree);
		CommonTree SUBTEMPLATE11 = default(CommonTree);
		CompiledTemplate template10 = default(CompiledTemplate);


		    retval.name = TemplateCompiler.GetNewSubtemplateName();
			List<FormalArgument> args = new List<FormalArgument>();

		try { DebugEnterRule(GrammarFileName, "subtemplate");
		DebugLocation(125, 1);
		try
		{
			// Compiler\\CodeGenerator.g3:130:2: ( ^( SUBTEMPLATE ( ^( ARGS ( ID )+ ) )* template[$name,args] ) )
			DebugEnterAlt(1);
			// Compiler\\CodeGenerator.g3:130:4: ^( SUBTEMPLATE ( ^( ARGS ( ID )+ ) )* template[$name,args] )
			{
			DebugLocation(130, 4);
			DebugLocation(130, 7);
			SUBTEMPLATE11=(CommonTree)Match(input,SUBTEMPLATE,Follow._SUBTEMPLATE_in_subtemplate297); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(131, 4);
				// Compiler\\CodeGenerator.g3:131:4: ( ^( ARGS ( ID )+ ) )*
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					int LA7_1 = input.LA(1);

					if ((LA7_1==ARGS))
					{
						alt7 = 1;
					}


					} finally { DebugExitDecision(7); }
					switch ( alt7 )
					{
					case 1:
						DebugEnterAlt(1);
						// Compiler\\CodeGenerator.g3:131:5: ^( ARGS ( ID )+ )
						{
						DebugLocation(131, 5);
						DebugLocation(131, 7);
						Match(input,ARGS,Follow._ARGS_in_subtemplate304); 

						Match(input, TokenTypes.Down, null); 
						DebugLocation(131, 12);
						// Compiler\\CodeGenerator.g3:131:12: ( ID )+
						int cnt6=0;
						try { DebugEnterSubRule(6);
						while (true)
						{
							int alt6=2;
							try { DebugEnterDecision(6, false);
							int LA6_1 = input.LA(1);

							if ((LA6_1==ID))
							{
								alt6 = 1;
							}


							} finally { DebugExitDecision(6); }
							switch (alt6)
							{
							case 1:
								DebugEnterAlt(1);
								// Compiler\\CodeGenerator.g3:131:13: ID
								{
								DebugLocation(131, 13);
								ID9=(CommonTree)Match(input,ID,Follow._ID_in_subtemplate307); 
								DebugLocation(131, 16);
								args.Add(new FormalArgument((ID9!=null?ID9.Text:default(string))));

								}
								break;

							default:
								if (cnt6 >= 1)
									goto loop6;

								EarlyExitException eee6 = new EarlyExitException( 6, input );
								DebugRecognitionException(eee6);
								throw eee6;
							}
							cnt6++;
						}
						loop6:
							;

						} finally { DebugExitSubRule(6); }


						Match(input, TokenTypes.Up, null); 


						}
						break;

					default:
						goto loop7;
					}
				}

				loop7:
					;

				} finally { DebugExitSubRule(7); }

				DebugLocation(132, 4);
				retval.nargs = args.Count;
				DebugLocation(133, 4);
				PushFollow(Follow._template_in_subtemplate324);
				template10=template(retval.name, args);
				PopFollow();

				DebugLocation(134, 4);

							CompiledTemplate sub = template10;
							sub.IsAnonSubtemplate = true;
							sub.TemplateDefStartToken = SUBTEMPLATE11.Token;
							sub.Ast = SUBTEMPLATE11;
							sub.Ast.SetUnknownTokenBoundaries();
							sub.Tokens = input.TokenStream;
							outermostImpl.AddImplicitlyDefinedTemplate(sub);
							

				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("subtemplate", 9);
			LeaveRule("subtemplate", 9);
			LeaveRule_subtemplate();
		}
		DebugLocation(144, 1);
		} finally { DebugExitRule(GrammarFileName, "subtemplate"); }
		return retval;

	}
	// $ANTLR end "subtemplate"

	partial void EnterRule_ifstat();
	partial void LeaveRule_ifstat();
	// $ANTLR start "ifstat"
	// Compiler\\CodeGenerator.g3:146:1: ifstat[CommonTree indent] : ^(i= 'if' conditional chunk ( ^(eif= 'elseif' ec= conditional chunk ) )* ( ^(el= 'else' chunk ) )? ) ;
	[GrammarRule("ifstat")]
	private void ifstat(CommonTree indent)
	{
		EnterRule_ifstat();
		EnterRule("ifstat", 10);
		TraceIn("ifstat", 10);
		CommonTree i = default(CommonTree);
		CommonTree eif = default(CommonTree);
		CommonTree el = default(CommonTree);
		TreeRuleReturnScope<CommonTree> ec = default(TreeRuleReturnScope<CommonTree>);


			/* Tracks address of branch operand (in code block).  It's how
			 * we backpatch forward references when generating code for IFs.
			 */
			int prevBranchOperand = -1;
			/* Branch instruction operands that are forward refs to end of IF.
			 * We need to update them once we see the endif.
			 */
			List<int> endRefs = new List<int>();
			if (indent != null) Indent(indent);

		try { DebugEnterRule(GrammarFileName, "ifstat");
		DebugLocation(146, 1);
		try
		{
			// Compiler\\CodeGenerator.g3:161:2: ( ^(i= 'if' conditional chunk ( ^(eif= 'elseif' ec= conditional chunk ) )* ( ^(el= 'else' chunk ) )? ) )
			DebugEnterAlt(1);
			// Compiler\\CodeGenerator.g3:161:4: ^(i= 'if' conditional chunk ( ^(eif= 'elseif' ec= conditional chunk ) )* ( ^(el= 'else' chunk ) )? )
			{
			DebugLocation(161, 4);
			DebugLocation(161, 8);
			i=(CommonTree)Match(input,IF,Follow._IF_in_ifstat361); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(161, 14);
			PushFollow(Follow._conditional_in_ifstat363);
			conditional();
			PopFollow();

			DebugLocation(162, 4);

				        prevBranchOperand = address()+1;
				        emit1(i,Bytecode.INSTR_BRF, -1); // write placeholder as branch target
						
			DebugLocation(166, 4);
			PushFollow(Follow._chunk_in_ifstat373);
			chunk();
			PopFollow();

			DebugLocation(167, 4);
			// Compiler\\CodeGenerator.g3:167:4: ( ^(eif= 'elseif' ec= conditional chunk ) )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1==ELSEIF))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// Compiler\\CodeGenerator.g3:167:6: ^(eif= 'elseif' ec= conditional chunk )
					{
					DebugLocation(167, 6);
					DebugLocation(167, 11);
					eif=(CommonTree)Match(input,ELSEIF,Follow._ELSEIF_in_ifstat383); 

					DebugLocation(168, 5);

									endRefs.Add(address()+1);
									emit1(eif,Bytecode.INSTR_BR, -1); // br end
									// update previous branch instruction
									write(prevBranchOperand, (short)address());
									prevBranchOperand = -1;
									

					Match(input, TokenTypes.Down, null); 
					DebugLocation(175, 7);
					PushFollow(Follow._conditional_in_ifstat397);
					ec=conditional();
					PopFollow();

					DebugLocation(176, 5);

							       	prevBranchOperand = address()+1;
							       	// write placeholder as branch target
							       	emit1((ec!=null?((CommonTree)ec.Start):default(CommonTree)), Bytecode.INSTR_BRF, -1);
									
					DebugLocation(181, 5);
					PushFollow(Follow._chunk_in_ifstat409);
					chunk();
					PopFollow();


					Match(input, TokenTypes.Up, null); 


					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }

			DebugLocation(184, 4);
			// Compiler\\CodeGenerator.g3:184:4: ( ^(el= 'else' chunk ) )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, false);
			int LA9_1 = input.LA(1);

			if ((LA9_1==ELSE))
			{
				alt9 = 1;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\CodeGenerator.g3:184:6: ^(el= 'else' chunk )
				{
				DebugLocation(184, 6);
				DebugLocation(184, 11);
				el=(CommonTree)Match(input,ELSE,Follow._ELSE_in_ifstat432); 

				DebugLocation(185, 6);

									endRefs.Add(address()+1);
									emit1(el, Bytecode.INSTR_BR, -1); // br end
									// update previous branch instruction
									write(prevBranchOperand, (short)address());
									prevBranchOperand = -1;
									

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); 
					DebugLocation(192, 6);
					PushFollow(Follow._chunk_in_ifstat446);
					chunk();
					PopFollow();


					Match(input, TokenTypes.Up, null); 
				}


				}
				break;

			}
			} finally { DebugExitSubRule(9); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(196, 3);

					if ( prevBranchOperand>=0 ) {
						write(prevBranchOperand, (short)address());
					}
			        foreach (int opnd in endRefs) write(opnd, (short)address());
					

			}


				if (indent != null) Dedent();

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ifstat", 10);
			LeaveRule("ifstat", 10);
			LeaveRule_ifstat();
		}
		DebugLocation(202, 1);
		} finally { DebugExitRule(GrammarFileName, "ifstat"); }
		return;

	}
	// $ANTLR end "ifstat"

	partial void EnterRule_conditional();
	partial void LeaveRule_conditional();
	// $ANTLR start "conditional"
	// Compiler\\CodeGenerator.g3:204:1: conditional : ( ^( OR conditional conditional ) | ^( AND conditional conditional ) | ^( BANG conditional ) | expr );
	[GrammarRule("conditional")]
	private TreeRuleReturnScope<CommonTree> conditional()
	{
		EnterRule_conditional();
		EnterRule("conditional", 11);
		TraceIn("conditional", 11);
		TreeRuleReturnScope<CommonTree> retval = new TreeRuleReturnScope<CommonTree>();
		retval.Start = (CommonTree)input.LT(1);

		CommonTree OR12 = default(CommonTree);
		CommonTree AND13 = default(CommonTree);
		CommonTree BANG14 = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "conditional");
		DebugLocation(204, 1);
		try
		{
			// Compiler\\CodeGenerator.g3:205:2: ( ^( OR conditional conditional ) | ^( AND conditional conditional ) | ^( BANG conditional ) | expr )
			int alt10=4;
			try { DebugEnterDecision(10, false);
			switch (input.LA(1))
			{
			case OR:
				{
				alt10 = 1;
				}
				break;
			case AND:
				{
				alt10 = 2;
				}
				break;
			case BANG:
				{
				alt10 = 3;
				}
				break;
			case ID:
			case STRING:
			case TRUE:
			case FALSE:
			case EXEC_FUNC:
			case INCLUDE:
			case INCLUDE_IND:
			case INCLUDE_REGION:
			case INCLUDE_SUPER:
			case INCLUDE_SUPER_REGION:
			case LIST:
			case MAP:
			case PROP:
			case PROP_IND:
			case SUBTEMPLATE:
			case TO_STR:
			case ZIP:
				{
				alt10 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\CodeGenerator.g3:205:4: ^( OR conditional conditional )
				{
				DebugLocation(205, 4);
				DebugLocation(205, 6);
				OR12=(CommonTree)Match(input,OR,Follow._OR_in_conditional480); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(205, 9);
				PushFollow(Follow._conditional_in_conditional482);
				conditional();
				PopFollow();

				DebugLocation(205, 21);
				PushFollow(Follow._conditional_in_conditional484);
				conditional();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(205, 35);
				emit(OR12, Bytecode.INSTR_OR);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Compiler\\CodeGenerator.g3:206:4: ^( AND conditional conditional )
				{
				DebugLocation(206, 4);
				DebugLocation(206, 6);
				AND13=(CommonTree)Match(input,AND,Follow._AND_in_conditional494); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(206, 10);
				PushFollow(Follow._conditional_in_conditional496);
				conditional();
				PopFollow();

				DebugLocation(206, 22);
				PushFollow(Follow._conditional_in_conditional498);
				conditional();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(206, 36);
				emit(AND13, Bytecode.INSTR_AND);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Compiler\\CodeGenerator.g3:207:4: ^( BANG conditional )
				{
				DebugLocation(207, 4);
				DebugLocation(207, 6);
				BANG14=(CommonTree)Match(input,BANG,Follow._BANG_in_conditional508); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(207, 11);
				PushFollow(Follow._conditional_in_conditional510);
				conditional();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(207, 28);
				emit(BANG14, Bytecode.INSTR_NOT);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Compiler\\CodeGenerator.g3:208:4: expr
				{
				DebugLocation(208, 4);
				PushFollow(Follow._expr_in_conditional522);
				expr();
				PopFollow();


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("conditional", 11);
			LeaveRule("conditional", 11);
			LeaveRule_conditional();
		}
		DebugLocation(209, 1);
		} finally { DebugExitRule(GrammarFileName, "conditional"); }
		return retval;

	}
	// $ANTLR end "conditional"

	partial void EnterRule_exprOptions();
	partial void LeaveRule_exprOptions();
	// $ANTLR start "exprOptions"
	// Compiler\\CodeGenerator.g3:211:1: exprOptions : ^( OPTIONS ( option )* ) ;
	[GrammarRule("exprOptions")]
	private TreeRuleReturnScope<CommonTree> exprOptions()
	{
		EnterRule_exprOptions();
		EnterRule("exprOptions", 12);
		TraceIn("exprOptions", 12);
		TreeRuleReturnScope<CommonTree> retval = new TreeRuleReturnScope<CommonTree>();
		retval.Start = (CommonTree)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "exprOptions");
		DebugLocation(211, 73);
		try
		{
			// Compiler\\CodeGenerator.g3:211:13: ( ^( OPTIONS ( option )* ) )
			DebugEnterAlt(1);
			// Compiler\\CodeGenerator.g3:211:15: ^( OPTIONS ( option )* )
			{
			DebugLocation(211, 15);
			emit(retval.Start, Bytecode.INSTR_OPTIONS);
			DebugLocation(211, 55);
			DebugLocation(211, 57);
			Match(input,OPTIONS,Follow._OPTIONS_in_exprOptions536); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(211, 65);
				// Compiler\\CodeGenerator.g3:211:65: ( option )*
				try { DebugEnterSubRule(11);
				while (true)
				{
					int alt11=2;
					try { DebugEnterDecision(11, false);
					int LA11_1 = input.LA(1);

					if ((LA11_1==EQUALS))
					{
						alt11 = 1;
					}


					} finally { DebugExitDecision(11); }
					switch ( alt11 )
					{
					case 1:
						DebugEnterAlt(1);
						// Compiler\\CodeGenerator.g3:211:65: option
						{
						DebugLocation(211, 65);
						PushFollow(Follow._option_in_exprOptions538);
						option();
						PopFollow();


						}
						break;

					default:
						goto loop11;
					}
				}

				loop11:
					;

				} finally { DebugExitSubRule(11); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("exprOptions", 12);
			LeaveRule("exprOptions", 12);
			LeaveRule_exprOptions();
		}
		DebugLocation(211, 73);
		} finally { DebugExitRule(GrammarFileName, "exprOptions"); }
		return retval;

	}
	// $ANTLR end "exprOptions"

	partial void EnterRule_option();
	partial void LeaveRule_option();
	// $ANTLR start "option"
	// Compiler\\CodeGenerator.g3:213:1: option : ^( '=' ID expr ) ;
	[GrammarRule("option")]
	private void option()
	{
		EnterRule_option();
		EnterRule("option", 13);
		TraceIn("option", 13);
		CommonTree ID15 = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "option");
		DebugLocation(213, 42);
		try
		{
			// Compiler\\CodeGenerator.g3:213:8: ( ^( '=' ID expr ) )
			DebugEnterAlt(1);
			// Compiler\\CodeGenerator.g3:213:10: ^( '=' ID expr )
			{
			DebugLocation(213, 10);
			DebugLocation(213, 12);
			Match(input,EQUALS,Follow._EQUALS_in_option550); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(213, 16);
			ID15=(CommonTree)Match(input,ID,Follow._ID_in_option552); 
			DebugLocation(213, 19);
			PushFollow(Follow._expr_in_option554);
			expr();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(213, 25);
			setOption(ID15);

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("option", 13);
			LeaveRule("option", 13);
			LeaveRule_option();
		}
		DebugLocation(213, 42);
		} finally { DebugExitRule(GrammarFileName, "option"); }
		return;

	}
	// $ANTLR end "option"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();
	// $ANTLR start "expr"
	// Compiler\\CodeGenerator.g3:215:1: expr : ( ^( ZIP ^( ELEMENTS ( expr )+ ) mapTemplateRef[ne] ) | ^( MAP expr ( mapTemplateRef[1] )+ ) | prop | includeExpr );
	[GrammarRule("expr")]
	private void expr()
	{
		EnterRule_expr();
		EnterRule("expr", 14);
		TraceIn("expr", 14);
		CommonTree ZIP16 = default(CommonTree);
		CommonTree MAP17 = default(CommonTree);

		int nt = 0, ne = 0;
		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(215, 1);
		try
		{
			// Compiler\\CodeGenerator.g3:217:2: ( ^( ZIP ^( ELEMENTS ( expr )+ ) mapTemplateRef[ne] ) | ^( MAP expr ( mapTemplateRef[1] )+ ) | prop | includeExpr )
			int alt14=4;
			try { DebugEnterDecision(14, false);
			switch (input.LA(1))
			{
			case ZIP:
				{
				alt14 = 1;
				}
				break;
			case MAP:
				{
				alt14 = 2;
				}
				break;
			case PROP:
			case PROP_IND:
				{
				alt14 = 3;
				}
				break;
			case ID:
			case STRING:
			case TRUE:
			case FALSE:
			case EXEC_FUNC:
			case INCLUDE:
			case INCLUDE_IND:
			case INCLUDE_REGION:
			case INCLUDE_SUPER:
			case INCLUDE_SUPER_REGION:
			case LIST:
			case SUBTEMPLATE:
			case TO_STR:
				{
				alt14 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 14, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\CodeGenerator.g3:217:4: ^( ZIP ^( ELEMENTS ( expr )+ ) mapTemplateRef[ne] )
				{
				DebugLocation(217, 4);
				DebugLocation(217, 6);
				ZIP16=(CommonTree)Match(input,ZIP,Follow._ZIP_in_expr573); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(217, 10);
				DebugLocation(217, 12);
				Match(input,ELEMENTS,Follow._ELEMENTS_in_expr576); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(217, 21);
				// Compiler\\CodeGenerator.g3:217:21: ( expr )+
				int cnt12=0;
				try { DebugEnterSubRule(12);
				while (true)
				{
					int alt12=2;
					try { DebugEnterDecision(12, false);
					int LA12_1 = input.LA(1);

					if (((LA12_1>=ID && LA12_1<=STRING)||(LA12_1>=TRUE && LA12_1<=FALSE)||LA12_1==EXEC_FUNC||(LA12_1>=INCLUDE && LA12_1<=MAP)||(LA12_1>=PROP && LA12_1<=PROP_IND)||(LA12_1>=SUBTEMPLATE && LA12_1<=ZIP)))
					{
						alt12 = 1;
					}


					} finally { DebugExitDecision(12); }
					switch (alt12)
					{
					case 1:
						DebugEnterAlt(1);
						// Compiler\\CodeGenerator.g3:217:22: expr
						{
						DebugLocation(217, 22);
						PushFollow(Follow._expr_in_expr579);
						expr();
						PopFollow();

						DebugLocation(217, 27);
						ne++;

						}
						break;

					default:
						if (cnt12 >= 1)
							goto loop12;

						EarlyExitException eee12 = new EarlyExitException( 12, input );
						DebugRecognitionException(eee12);
						throw eee12;
					}
					cnt12++;
				}
				loop12:
					;

				} finally { DebugExitSubRule(12); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(217, 38);
				PushFollow(Follow._mapTemplateRef_in_expr586);
				mapTemplateRef(ne);
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(218, 3);
				emit1(ZIP16, Bytecode.INSTR_ZIP_MAP, ne);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Compiler\\CodeGenerator.g3:219:4: ^( MAP expr ( mapTemplateRef[1] )+ )
				{
				DebugLocation(219, 4);
				DebugLocation(219, 6);
				MAP17=(CommonTree)Match(input,MAP,Follow._MAP_in_expr598); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(219, 10);
				PushFollow(Follow._expr_in_expr600);
				expr();
				PopFollow();

				DebugLocation(219, 15);
				// Compiler\\CodeGenerator.g3:219:15: ( mapTemplateRef[1] )+
				int cnt13=0;
				try { DebugEnterSubRule(13);
				while (true)
				{
					int alt13=2;
					try { DebugEnterDecision(13, false);
					int LA13_1 = input.LA(1);

					if (((LA13_1>=INCLUDE && LA13_1<=INCLUDE_IND)||LA13_1==SUBTEMPLATE))
					{
						alt13 = 1;
					}


					} finally { DebugExitDecision(13); }
					switch (alt13)
					{
					case 1:
						DebugEnterAlt(1);
						// Compiler\\CodeGenerator.g3:219:16: mapTemplateRef[1]
						{
						DebugLocation(219, 16);
						PushFollow(Follow._mapTemplateRef_in_expr603);
						mapTemplateRef(1);
						PopFollow();

						DebugLocation(219, 34);
						nt++;

						}
						break;

					default:
						if (cnt13 >= 1)
							goto loop13;

						EarlyExitException eee13 = new EarlyExitException( 13, input );
						DebugRecognitionException(eee13);
						throw eee13;
					}
					cnt13++;
				}
				loop13:
					;

				} finally { DebugExitSubRule(13); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(220, 3);

						if ( nt>1 ) emit1(MAP17, nt>1?Bytecode.INSTR_ROT_MAP:Bytecode.INSTR_MAP, nt);
						else emit(MAP17, Bytecode.INSTR_MAP);
						

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Compiler\\CodeGenerator.g3:224:4: prop
				{
				DebugLocation(224, 4);
				PushFollow(Follow._prop_in_expr618);
				prop();
				PopFollow();


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Compiler\\CodeGenerator.g3:225:4: includeExpr
				{
				DebugLocation(225, 4);
				PushFollow(Follow._includeExpr_in_expr623);
				includeExpr();
				PopFollow();


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 14);
			LeaveRule("expr", 14);
			LeaveRule_expr();
		}
		DebugLocation(226, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return;

	}
	// $ANTLR end "expr"

	partial void EnterRule_prop();
	partial void LeaveRule_prop();
	// $ANTLR start "prop"
	// Compiler\\CodeGenerator.g3:228:1: prop : ( ^( PROP expr ID ) | ^( PROP_IND expr expr ) );
	[GrammarRule("prop")]
	private void prop()
	{
		EnterRule_prop();
		EnterRule("prop", 15);
		TraceIn("prop", 15);
		CommonTree PROP18 = default(CommonTree);
		CommonTree ID19 = default(CommonTree);
		CommonTree PROP_IND20 = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "prop");
		DebugLocation(228, 1);
		try
		{
			// Compiler\\CodeGenerator.g3:228:5: ( ^( PROP expr ID ) | ^( PROP_IND expr expr ) )
			int alt15=2;
			try { DebugEnterDecision(15, false);
			int LA15_1 = input.LA(1);

			if ((LA15_1==PROP))
			{
				alt15 = 1;
			}
			else if ((LA15_1==PROP_IND))
			{
				alt15 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\CodeGenerator.g3:228:7: ^( PROP expr ID )
				{
				DebugLocation(228, 7);
				DebugLocation(228, 9);
				PROP18=(CommonTree)Match(input,PROP,Follow._PROP_in_prop633); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(228, 14);
				PushFollow(Follow._expr_in_prop635);
				expr();
				PopFollow();

				DebugLocation(228, 19);
				ID19=(CommonTree)Match(input,ID,Follow._ID_in_prop637); 

				Match(input, TokenTypes.Up, null); 

				DebugLocation(228, 28);
				emit1(PROP18, Bytecode.INSTR_LOAD_PROP, (ID19!=null?ID19.Text:default(string)));

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Compiler\\CodeGenerator.g3:229:4: ^( PROP_IND expr expr )
				{
				DebugLocation(229, 4);
				DebugLocation(229, 6);
				PROP_IND20=(CommonTree)Match(input,PROP_IND,Follow._PROP_IND_in_prop651); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(229, 15);
				PushFollow(Follow._expr_in_prop653);
				expr();
				PopFollow();

				DebugLocation(229, 20);
				PushFollow(Follow._expr_in_prop655);
				expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(229, 29);
				emit(PROP_IND20, Bytecode.INSTR_LOAD_PROP_IND);

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("prop", 15);
			LeaveRule("prop", 15);
			LeaveRule_prop();
		}
		DebugLocation(230, 1);
		} finally { DebugExitRule(GrammarFileName, "prop"); }
		return;

	}
	// $ANTLR end "prop"

	partial void EnterRule_mapTemplateRef();
	partial void LeaveRule_mapTemplateRef();
	// $ANTLR start "mapTemplateRef"
	// Compiler\\CodeGenerator.g3:232:1: mapTemplateRef[int num_exprs] : ( ^( INCLUDE ID args ) | subtemplate | ^( INCLUDE_IND expr args ) );
	[GrammarRule("mapTemplateRef")]
	private TreeRuleReturnScope<CommonTree> mapTemplateRef(int num_exprs)
	{
		EnterRule_mapTemplateRef();
		EnterRule("mapTemplateRef", 16);
		TraceIn("mapTemplateRef", 16);
		TreeRuleReturnScope<CommonTree> retval = new TreeRuleReturnScope<CommonTree>();
		retval.Start = (CommonTree)input.LT(1);

		CommonTree INCLUDE21 = default(CommonTree);
		CommonTree ID23 = default(CommonTree);
		CommonTree INCLUDE_IND25 = default(CommonTree);
		TreeRuleReturnScope<CommonTree> args22 = default(TreeRuleReturnScope<CommonTree>);
		TreeRuleReturnScope<CommonTree> subtemplate24 = default(TreeRuleReturnScope<CommonTree>);
		TreeRuleReturnScope<CommonTree> args26 = default(TreeRuleReturnScope<CommonTree>);

		try { DebugEnterRule(GrammarFileName, "mapTemplateRef");
		DebugLocation(232, 1);
		try
		{
			// Compiler\\CodeGenerator.g3:233:2: ( ^( INCLUDE ID args ) | subtemplate | ^( INCLUDE_IND expr args ) )
			int alt16=3;
			try { DebugEnterDecision(16, false);
			switch (input.LA(1))
			{
			case INCLUDE:
				{
				alt16 = 1;
				}
				break;
			case SUBTEMPLATE:
				{
				alt16 = 2;
				}
				break;
			case INCLUDE_IND:
				{
				alt16 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 16, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\CodeGenerator.g3:233:4: ^( INCLUDE ID args )
				{
				DebugLocation(233, 4);
				DebugLocation(233, 7);
				INCLUDE21=(CommonTree)Match(input,INCLUDE,Follow._INCLUDE_in_mapTemplateRef676); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(233, 15);
				ID23=(CommonTree)Match(input,ID,Follow._ID_in_mapTemplateRef678); 
				DebugLocation(234, 4);
				for (int i=1; i<=num_exprs; i++) emit(INCLUDE21,Bytecode.INSTR_NULL);
				DebugLocation(235, 4);
				PushFollow(Follow._args_in_mapTemplateRef688);
				args22=args();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(237, 3);

						if ( (args22!=null?((CodeGenerator.args_return)args22).passThru:default(bool)) ) emit1(retval.Start, Bytecode.INSTR_PASSTHRU, (ID23!=null?ID23.Text:default(string)));
						if ( (args22!=null?((CodeGenerator.args_return)args22).namedArgs:default(bool)) ) emit1(INCLUDE21, Bytecode.INSTR_NEW_BOX_ARGS, (ID23!=null?ID23.Text:default(string)));
						else emit2(INCLUDE21, Bytecode.INSTR_NEW, (ID23!=null?ID23.Text:default(string)), (args22!=null?((CodeGenerator.args_return)args22).n:default(int))+num_exprs);
						

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Compiler\\CodeGenerator.g3:242:4: subtemplate
				{
				DebugLocation(242, 4);
				PushFollow(Follow._subtemplate_in_mapTemplateRef701);
				subtemplate24=subtemplate();
				PopFollow();

				DebugLocation(243, 3);

						if ((subtemplate24!=null?((CodeGenerator.subtemplate_return)subtemplate24).nargs:default(int)) != num_exprs) {
				            errMgr.CompiletimeError(ErrorType.ANON_ARGUMENT_MISMATCH, templateToken, (subtemplate24!=null?((CommonTree)subtemplate24.Start):default(CommonTree)).Token, (subtemplate24!=null?((CodeGenerator.subtemplate_return)subtemplate24).nargs:default(int)), num_exprs);
						}
						for (int i=1; i<=num_exprs; i++) emit((subtemplate24!=null?((CommonTree)subtemplate24.Start):default(CommonTree)),Bytecode.INSTR_NULL);
				        emit2((subtemplate24!=null?((CommonTree)subtemplate24.Start):default(CommonTree)), Bytecode.INSTR_NEW,
					              (subtemplate24!=null?((CodeGenerator.subtemplate_return)subtemplate24).name:default(string)),
					              num_exprs);
						

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Compiler\\CodeGenerator.g3:253:4: ^( INCLUDE_IND expr args )
				{
				DebugLocation(253, 4);
				DebugLocation(253, 7);
				INCLUDE_IND25=(CommonTree)Match(input,INCLUDE_IND,Follow._INCLUDE_IND_in_mapTemplateRef713); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(253, 19);
				PushFollow(Follow._expr_in_mapTemplateRef715);
				expr();
				PopFollow();

				DebugLocation(254, 4);

							emit(INCLUDE_IND25,Bytecode.INSTR_TOSTR);
							for (int i=1; i<=num_exprs; i++) emit(INCLUDE_IND25,Bytecode.INSTR_NULL);
							
				DebugLocation(258, 4);
				PushFollow(Follow._args_in_mapTemplateRef725);
				args26=args();
				PopFollow();

				DebugLocation(259, 4);
				emit1(INCLUDE_IND25, Bytecode.INSTR_NEW_IND, (args26!=null?((CodeGenerator.args_return)args26).n:default(int))+num_exprs);

				Match(input, TokenTypes.Up, null); 


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("mapTemplateRef", 16);
			LeaveRule("mapTemplateRef", 16);
			LeaveRule_mapTemplateRef();
		}
		DebugLocation(261, 1);
		} finally { DebugExitRule(GrammarFileName, "mapTemplateRef"); }
		return retval;

	}
	// $ANTLR end "mapTemplateRef"

	partial void EnterRule_includeExpr();
	partial void LeaveRule_includeExpr();
	// $ANTLR start "includeExpr"
	// Compiler\\CodeGenerator.g3:263:1: includeExpr : ( ^( EXEC_FUNC ID ( expr )? ) | ^( INCLUDE ID args ) | ^( INCLUDE_SUPER ID args ) | ^( INCLUDE_REGION ID ) | ^( INCLUDE_SUPER_REGION ID ) | primary );
	[GrammarRule("includeExpr")]
	private TreeRuleReturnScope<CommonTree> includeExpr()
	{
		EnterRule_includeExpr();
		EnterRule("includeExpr", 17);
		TraceIn("includeExpr", 17);
		TreeRuleReturnScope<CommonTree> retval = new TreeRuleReturnScope<CommonTree>();
		retval.Start = (CommonTree)input.LT(1);

		CommonTree ID27 = default(CommonTree);
		CommonTree ID29 = default(CommonTree);
		CommonTree INCLUDE30 = default(CommonTree);
		CommonTree ID32 = default(CommonTree);
		CommonTree INCLUDE_SUPER33 = default(CommonTree);
		CommonTree ID34 = default(CommonTree);
		CommonTree INCLUDE_REGION35 = default(CommonTree);
		CommonTree ID36 = default(CommonTree);
		CommonTree INCLUDE_SUPER_REGION37 = default(CommonTree);
		TreeRuleReturnScope<CommonTree> args28 = default(TreeRuleReturnScope<CommonTree>);
		TreeRuleReturnScope<CommonTree> args31 = default(TreeRuleReturnScope<CommonTree>);

		try { DebugEnterRule(GrammarFileName, "includeExpr");
		DebugLocation(263, 1);
		try
		{
			// Compiler\\CodeGenerator.g3:264:2: ( ^( EXEC_FUNC ID ( expr )? ) | ^( INCLUDE ID args ) | ^( INCLUDE_SUPER ID args ) | ^( INCLUDE_REGION ID ) | ^( INCLUDE_SUPER_REGION ID ) | primary )
			int alt18=6;
			try { DebugEnterDecision(18, false);
			switch (input.LA(1))
			{
			case EXEC_FUNC:
				{
				alt18 = 1;
				}
				break;
			case INCLUDE:
				{
				alt18 = 2;
				}
				break;
			case INCLUDE_SUPER:
				{
				alt18 = 3;
				}
				break;
			case INCLUDE_REGION:
				{
				alt18 = 4;
				}
				break;
			case INCLUDE_SUPER_REGION:
				{
				alt18 = 5;
				}
				break;
			case ID:
			case STRING:
			case TRUE:
			case FALSE:
			case INCLUDE_IND:
			case LIST:
			case SUBTEMPLATE:
			case TO_STR:
				{
				alt18 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 18, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\CodeGenerator.g3:264:4: ^( EXEC_FUNC ID ( expr )? )
				{
				DebugLocation(264, 4);
				DebugLocation(264, 6);
				Match(input,EXEC_FUNC,Follow._EXEC_FUNC_in_includeExpr747); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(264, 16);
				ID27=(CommonTree)Match(input,ID,Follow._ID_in_includeExpr749); 
				DebugLocation(264, 19);
				// Compiler\\CodeGenerator.g3:264:19: ( expr )?
				int alt17=2;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, false);
				int LA17_1 = input.LA(1);

				if (((LA17_1>=ID && LA17_1<=STRING)||(LA17_1>=TRUE && LA17_1<=FALSE)||LA17_1==EXEC_FUNC||(LA17_1>=INCLUDE && LA17_1<=MAP)||(LA17_1>=PROP && LA17_1<=PROP_IND)||(LA17_1>=SUBTEMPLATE && LA17_1<=ZIP)))
				{
					alt17 = 1;
				}
				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// Compiler\\CodeGenerator.g3:264:19: expr
					{
					DebugLocation(264, 19);
					PushFollow(Follow._expr_in_includeExpr751);
					expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(17); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(264, 27);
				func(ID27);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Compiler\\CodeGenerator.g3:265:4: ^( INCLUDE ID args )
				{
				DebugLocation(265, 4);
				DebugLocation(265, 6);
				INCLUDE30=(CommonTree)Match(input,INCLUDE,Follow._INCLUDE_in_includeExpr762); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(265, 14);
				ID29=(CommonTree)Match(input,ID,Follow._ID_in_includeExpr764); 
				DebugLocation(265, 17);
				PushFollow(Follow._args_in_includeExpr766);
				args28=args();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(266, 3);

						if ( (args28!=null?((CodeGenerator.args_return)args28).passThru:default(bool)) ) emit1(retval.Start, Bytecode.INSTR_PASSTHRU, (ID29!=null?ID29.Text:default(string)));
						if ( (args28!=null?((CodeGenerator.args_return)args28).namedArgs:default(bool)) ) emit1(INCLUDE30, Bytecode.INSTR_NEW_BOX_ARGS, (ID29!=null?ID29.Text:default(string)));
						else emit2(INCLUDE30, Bytecode.INSTR_NEW, (ID29!=null?ID29.Text:default(string)), (args28!=null?((CodeGenerator.args_return)args28).n:default(int)));
						

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Compiler\\CodeGenerator.g3:271:4: ^( INCLUDE_SUPER ID args )
				{
				DebugLocation(271, 4);
				DebugLocation(271, 6);
				INCLUDE_SUPER33=(CommonTree)Match(input,INCLUDE_SUPER,Follow._INCLUDE_SUPER_in_includeExpr777); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(271, 20);
				ID32=(CommonTree)Match(input,ID,Follow._ID_in_includeExpr779); 
				DebugLocation(271, 23);
				PushFollow(Follow._args_in_includeExpr781);
				args31=args();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(272, 3);

						if ( (args31!=null?((CodeGenerator.args_return)args31).passThru:default(bool)) ) emit1(retval.Start, Bytecode.INSTR_PASSTHRU, (ID32!=null?ID32.Text:default(string)));
						if ( (args31!=null?((CodeGenerator.args_return)args31).namedArgs:default(bool)) ) emit1(INCLUDE_SUPER33, Bytecode.INSTR_SUPER_NEW_BOX_ARGS, (ID32!=null?ID32.Text:default(string)));
						else emit2(INCLUDE_SUPER33, Bytecode.INSTR_SUPER_NEW, (ID32!=null?ID32.Text:default(string)), (args31!=null?((CodeGenerator.args_return)args31).n:default(int)));
						

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Compiler\\CodeGenerator.g3:277:4: ^( INCLUDE_REGION ID )
				{
				DebugLocation(277, 4);
				DebugLocation(277, 6);
				INCLUDE_REGION35=(CommonTree)Match(input,INCLUDE_REGION,Follow._INCLUDE_REGION_in_includeExpr792); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(277, 21);
				ID34=(CommonTree)Match(input,ID,Follow._ID_in_includeExpr794); 

				Match(input, TokenTypes.Up, null); 

				DebugLocation(277, 26);

													CompiledTemplate impl =
														TemplateCompiler.DefineBlankRegion(outermostImpl, ID34.Token);
													emit2(INCLUDE_REGION35,Bytecode.INSTR_NEW,impl.Name,0);
													

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Compiler\\CodeGenerator.g3:282:4: ^( INCLUDE_SUPER_REGION ID )
				{
				DebugLocation(282, 4);
				DebugLocation(282, 6);
				INCLUDE_SUPER_REGION37=(CommonTree)Match(input,INCLUDE_SUPER_REGION,Follow._INCLUDE_SUPER_REGION_in_includeExpr804); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(282, 27);
				ID36=(CommonTree)Match(input,ID,Follow._ID_in_includeExpr806); 

				Match(input, TokenTypes.Up, null); 

				DebugLocation(282, 31);

													string mangled = TemplateGroup.GetMangledRegionName(outermostImpl.Name, ID36.Text);
													emit2(INCLUDE_SUPER_REGION37,Bytecode.INSTR_SUPER_NEW,mangled,0);
													

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Compiler\\CodeGenerator.g3:286:4: primary
				{
				DebugLocation(286, 4);
				PushFollow(Follow._primary_in_includeExpr814);
				primary();
				PopFollow();


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("includeExpr", 17);
			LeaveRule("includeExpr", 17);
			LeaveRule_includeExpr();
		}
		DebugLocation(287, 1);
		} finally { DebugExitRule(GrammarFileName, "includeExpr"); }
		return retval;

	}
	// $ANTLR end "includeExpr"

	partial void EnterRule_primary();
	partial void LeaveRule_primary();
	// $ANTLR start "primary"
	// Compiler\\CodeGenerator.g3:289:1: primary : ( ID | STRING | TRUE | FALSE | subtemplate | list | ^( INCLUDE_IND expr args ) | ^( TO_STR expr ) );
	[GrammarRule("primary")]
	private TreeRuleReturnScope<CommonTree> primary()
	{
		EnterRule_primary();
		EnterRule("primary", 18);
		TraceIn("primary", 18);
		TreeRuleReturnScope<CommonTree> retval = new TreeRuleReturnScope<CommonTree>();
		retval.Start = (CommonTree)input.LT(1);

		CommonTree ID38 = default(CommonTree);
		CommonTree STRING39 = default(CommonTree);
		CommonTree TRUE40 = default(CommonTree);
		CommonTree FALSE41 = default(CommonTree);
		CommonTree INCLUDE_IND43 = default(CommonTree);
		CommonTree TO_STR45 = default(CommonTree);
		TreeRuleReturnScope<CommonTree> subtemplate42 = default(TreeRuleReturnScope<CommonTree>);
		TreeRuleReturnScope<CommonTree> args44 = default(TreeRuleReturnScope<CommonTree>);

		try { DebugEnterRule(GrammarFileName, "primary");
		DebugLocation(289, 1);
		try
		{
			// Compiler\\CodeGenerator.g3:290:2: ( ID | STRING | TRUE | FALSE | subtemplate | list | ^( INCLUDE_IND expr args ) | ^( TO_STR expr ) )
			int alt19=8;
			try { DebugEnterDecision(19, false);
			switch (input.LA(1))
			{
			case ID:
				{
				alt19 = 1;
				}
				break;
			case STRING:
				{
				alt19 = 2;
				}
				break;
			case TRUE:
				{
				alt19 = 3;
				}
				break;
			case FALSE:
				{
				alt19 = 4;
				}
				break;
			case SUBTEMPLATE:
				{
				alt19 = 5;
				}
				break;
			case LIST:
				{
				alt19 = 6;
				}
				break;
			case INCLUDE_IND:
				{
				alt19 = 7;
				}
				break;
			case TO_STR:
				{
				alt19 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 19, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\CodeGenerator.g3:290:4: ID
				{
				DebugLocation(290, 4);
				ID38=(CommonTree)Match(input,ID,Follow._ID_in_primary825); 
				DebugLocation(290, 10);
				refAttr(ID38);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Compiler\\CodeGenerator.g3:291:4: STRING
				{
				DebugLocation(291, 4);
				STRING39=(CommonTree)Match(input,STRING,Follow._STRING_in_primary835); 
				DebugLocation(291, 13);
				emit1(STRING39,Bytecode.INSTR_LOAD_STR, Utility.Strip((STRING39!=null?STRING39.Text:default(string)),1));

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Compiler\\CodeGenerator.g3:292:4: TRUE
				{
				DebugLocation(292, 4);
				TRUE40=(CommonTree)Match(input,TRUE,Follow._TRUE_in_primary845); 
				DebugLocation(292, 11);
				emit(TRUE40, Bytecode.INSTR_TRUE);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Compiler\\CodeGenerator.g3:293:4: FALSE
				{
				DebugLocation(293, 4);
				FALSE41=(CommonTree)Match(input,FALSE,Follow._FALSE_in_primary854); 
				DebugLocation(293, 12);
				emit(FALSE41, Bytecode.INSTR_FALSE);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Compiler\\CodeGenerator.g3:294:4: subtemplate
				{
				DebugLocation(294, 4);
				PushFollow(Follow._subtemplate_in_primary863);
				subtemplate42=subtemplate();
				PopFollow();

				DebugLocation(295, 19);
				emit2(retval.Start,Bytecode.INSTR_NEW, (subtemplate42!=null?((CodeGenerator.subtemplate_return)subtemplate42).name:default(string)), 0);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Compiler\\CodeGenerator.g3:296:4: list
				{
				DebugLocation(296, 4);
				PushFollow(Follow._list_in_primary890);
				list();
				PopFollow();


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Compiler\\CodeGenerator.g3:297:4: ^( INCLUDE_IND expr args )
				{
				DebugLocation(297, 4);
				DebugLocation(297, 7);
				INCLUDE_IND43=(CommonTree)Match(input,INCLUDE_IND,Follow._INCLUDE_IND_in_primary897); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(298, 4);
				PushFollow(Follow._expr_in_primary903);
				expr();
				PopFollow();

				DebugLocation(298, 11);
				emit(INCLUDE_IND43, Bytecode.INSTR_TOSTR);
				DebugLocation(299, 4);
				PushFollow(Follow._args_in_primary912);
				args44=args();
				PopFollow();

				DebugLocation(299, 10);
				emit1(INCLUDE_IND43, Bytecode.INSTR_NEW_IND, (args44!=null?((CodeGenerator.args_return)args44).n:default(int)));

				Match(input, TokenTypes.Up, null); 


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Compiler\\CodeGenerator.g3:301:4: ^( TO_STR expr )
				{
				DebugLocation(301, 4);
				DebugLocation(301, 6);
				TO_STR45=(CommonTree)Match(input,TO_STR,Follow._TO_STR_in_primary926); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(301, 13);
				PushFollow(Follow._expr_in_primary928);
				expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(301, 19);
				emit(TO_STR45, Bytecode.INSTR_TOSTR);

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("primary", 18);
			LeaveRule("primary", 18);
			LeaveRule_primary();
		}
		DebugLocation(302, 1);
		} finally { DebugExitRule(GrammarFileName, "primary"); }
		return retval;

	}
	// $ANTLR end "primary"

	partial void EnterRule_arg();
	partial void LeaveRule_arg();
	// $ANTLR start "arg"
	// Compiler\\CodeGenerator.g3:304:1: arg : expr ;
	[GrammarRule("arg")]
	private void arg()
	{
		EnterRule_arg();
		EnterRule("arg", 19);
		TraceIn("arg", 19);
		try { DebugEnterRule(GrammarFileName, "arg");
		DebugLocation(304, 11);
		try
		{
			// Compiler\\CodeGenerator.g3:304:5: ( expr )
			DebugEnterAlt(1);
			// Compiler\\CodeGenerator.g3:304:7: expr
			{
			DebugLocation(304, 7);
			PushFollow(Follow._expr_in_arg941);
			expr();
			PopFollow();


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arg", 19);
			LeaveRule("arg", 19);
			LeaveRule_arg();
		}
		DebugLocation(304, 11);
		} finally { DebugExitRule(GrammarFileName, "arg"); }
		return;

	}
	// $ANTLR end "arg"

	private sealed partial class args_return : TreeRuleReturnScope<CommonTree>
	{
		public int n=0;
		public bool namedArgs=false;
		public bool passThru;
		public args_return(CodeGenerator grammar) {OnCreated(grammar);}
		partial void OnCreated(CodeGenerator grammar);
	}

	partial void EnterRule_args();
	partial void LeaveRule_args();
	// $ANTLR start "args"
	// Compiler\\CodeGenerator.g3:306:1: args returns [int n=0, bool namedArgs=false, bool passThru] : ( ( arg )+ | ( ^(eq= '=' ID expr ) )+ ( '...' )? | '...' |);
	[GrammarRule("args")]
	private CodeGenerator.args_return args()
	{
		EnterRule_args();
		EnterRule("args", 20);
		TraceIn("args", 20);
		CodeGenerator.args_return retval = new CodeGenerator.args_return(this);
		retval.Start = (CommonTree)input.LT(1);

		CommonTree eq = default(CommonTree);
		CommonTree ID46 = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "args");
		DebugLocation(306, 2);
		try
		{
			// Compiler\\CodeGenerator.g3:307:2: ( ( arg )+ | ( ^(eq= '=' ID expr ) )+ ( '...' )? | '...' |)
			int alt23=4;
			try { DebugEnterDecision(23, false);
			switch (input.LA(1))
			{
			case ID:
			case STRING:
			case TRUE:
			case FALSE:
			case EXEC_FUNC:
			case INCLUDE:
			case INCLUDE_IND:
			case INCLUDE_REGION:
			case INCLUDE_SUPER:
			case INCLUDE_SUPER_REGION:
			case LIST:
			case MAP:
			case PROP:
			case PROP_IND:
			case SUBTEMPLATE:
			case TO_STR:
			case ZIP:
				{
				alt23 = 1;
				}
				break;
			case EQUALS:
				{
				alt23 = 2;
				}
				break;
			case ELLIPSIS:
				{
				alt23 = 3;
				}
				break;
			case UP:
				{
				alt23 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 23, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\CodeGenerator.g3:307:4: ( arg )+
				{
				DebugLocation(307, 4);
				// Compiler\\CodeGenerator.g3:307:4: ( arg )+
				int cnt20=0;
				try { DebugEnterSubRule(20);
				while (true)
				{
					int alt20=2;
					try { DebugEnterDecision(20, false);
					int LA20_1 = input.LA(1);

					if (((LA20_1>=ID && LA20_1<=STRING)||(LA20_1>=TRUE && LA20_1<=FALSE)||LA20_1==EXEC_FUNC||(LA20_1>=INCLUDE && LA20_1<=MAP)||(LA20_1>=PROP && LA20_1<=PROP_IND)||(LA20_1>=SUBTEMPLATE && LA20_1<=ZIP)))
					{
						alt20 = 1;
					}


					} finally { DebugExitDecision(20); }
					switch (alt20)
					{
					case 1:
						DebugEnterAlt(1);
						// Compiler\\CodeGenerator.g3:307:6: arg
						{
						DebugLocation(307, 6);
						PushFollow(Follow._arg_in_args957);
						arg();
						PopFollow();

						DebugLocation(307, 10);
						retval.n++;

						}
						break;

					default:
						if (cnt20 >= 1)
							goto loop20;

						EarlyExitException eee20 = new EarlyExitException( 20, input );
						DebugRecognitionException(eee20);
						throw eee20;
					}
					cnt20++;
				}
				loop20:
					;

				} finally { DebugExitSubRule(20); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Compiler\\CodeGenerator.g3:308:4: ( ^(eq= '=' ID expr ) )+ ( '...' )?
				{
				DebugLocation(308, 4);
				emit(retval.Start, Bytecode.INSTR_ARGS); retval.namedArgs =true;
				DebugLocation(309, 3);
				// Compiler\\CodeGenerator.g3:309:3: ( ^(eq= '=' ID expr ) )+
				int cnt21=0;
				try { DebugEnterSubRule(21);
				while (true)
				{
					int alt21=2;
					try { DebugEnterDecision(21, false);
					int LA21_1 = input.LA(1);

					if ((LA21_1==EQUALS))
					{
						alt21 = 1;
					}


					} finally { DebugExitDecision(21); }
					switch (alt21)
					{
					case 1:
						DebugEnterAlt(1);
						// Compiler\\CodeGenerator.g3:309:5: ^(eq= '=' ID expr )
						{
						DebugLocation(309, 5);
						DebugLocation(309, 9);
						eq=(CommonTree)Match(input,EQUALS,Follow._EQUALS_in_args976); 

						Match(input, TokenTypes.Down, null); 
						DebugLocation(309, 14);
						ID46=(CommonTree)Match(input,ID,Follow._ID_in_args978); 
						DebugLocation(309, 17);
						PushFollow(Follow._expr_in_args980);
						expr();
						PopFollow();


						Match(input, TokenTypes.Up, null); 

						DebugLocation(310, 4);
						retval.n++; emit1(eq, Bytecode.INSTR_STORE_ARG, defineString((ID46!=null?ID46.Text:default(string))));

						}
						break;

					default:
						if (cnt21 >= 1)
							goto loop21;

						EarlyExitException eee21 = new EarlyExitException( 21, input );
						DebugRecognitionException(eee21);
						throw eee21;
					}
					cnt21++;
				}
				loop21:
					;

				} finally { DebugExitSubRule(21); }

				DebugLocation(312, 3);
				// Compiler\\CodeGenerator.g3:312:3: ( '...' )?
				int alt22=2;
				try { DebugEnterSubRule(22);
				try { DebugEnterDecision(22, false);
				int LA22_1 = input.LA(1);

				if ((LA22_1==ELLIPSIS))
				{
					alt22 = 1;
				}
				} finally { DebugExitDecision(22); }
				switch (alt22)
				{
				case 1:
					DebugEnterAlt(1);
					// Compiler\\CodeGenerator.g3:312:4: '...'
					{
					DebugLocation(312, 4);
					Match(input,ELLIPSIS,Follow._ELLIPSIS_in_args996); 
					DebugLocation(312, 10);
					retval.passThru =true;

					}
					break;

				}
				} finally { DebugExitSubRule(22); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Compiler\\CodeGenerator.g3:313:4: '...'
				{
				DebugLocation(313, 4);
				Match(input,ELLIPSIS,Follow._ELLIPSIS_in_args1005); 
				DebugLocation(313, 10);
				retval.passThru =true; emit(retval.Start, Bytecode.INSTR_ARGS); retval.namedArgs =true;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Compiler\\CodeGenerator.g3:315:3: 
				{
				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("args", 20);
			LeaveRule("args", 20);
			LeaveRule_args();
		}
		DebugLocation(315, 2);
		} finally { DebugExitRule(GrammarFileName, "args"); }
		return retval;

	}
	// $ANTLR end "args"

	partial void EnterRule_list();
	partial void LeaveRule_list();
	// $ANTLR start "list"
	// Compiler\\CodeGenerator.g3:317:1: list : ^( LIST ( listElement )* ) ;
	[GrammarRule("list")]
	private TreeRuleReturnScope<CommonTree> list()
	{
		EnterRule_list();
		EnterRule("list", 21);
		TraceIn("list", 21);
		TreeRuleReturnScope<CommonTree> retval = new TreeRuleReturnScope<CommonTree>();
		retval.Start = (CommonTree)input.LT(1);

		TreeRuleReturnScope<CommonTree> listElement47 = default(TreeRuleReturnScope<CommonTree>);

		try { DebugEnterRule(GrammarFileName, "list");
		DebugLocation(317, 1);
		try
		{
			// Compiler\\CodeGenerator.g3:317:5: ( ^( LIST ( listElement )* ) )
			DebugEnterAlt(1);
			// Compiler\\CodeGenerator.g3:317:7: ^( LIST ( listElement )* )
			{
			DebugLocation(317, 7);
			emit(retval.Start, Bytecode.INSTR_LIST);
			DebugLocation(318, 3);
			DebugLocation(318, 5);
			Match(input,LIST,Follow._LIST_in_list1025); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(318, 10);
				// Compiler\\CodeGenerator.g3:318:10: ( listElement )*
				try { DebugEnterSubRule(24);
				while (true)
				{
					int alt24=2;
					try { DebugEnterDecision(24, false);
					int LA24_1 = input.LA(1);

					if (((LA24_1>=ID && LA24_1<=STRING)||(LA24_1>=TRUE && LA24_1<=FALSE)||LA24_1==EXEC_FUNC||(LA24_1>=INCLUDE && LA24_1<=NULL)||(LA24_1>=PROP && LA24_1<=PROP_IND)||(LA24_1>=SUBTEMPLATE && LA24_1<=ZIP)))
					{
						alt24 = 1;
					}


					} finally { DebugExitDecision(24); }
					switch ( alt24 )
					{
					case 1:
						DebugEnterAlt(1);
						// Compiler\\CodeGenerator.g3:318:11: listElement
						{
						DebugLocation(318, 11);
						PushFollow(Follow._listElement_in_list1028);
						listElement47=listElement();
						PopFollow();

						DebugLocation(318, 23);
						emit((listElement47!=null?((CommonTree)listElement47.Start):default(CommonTree)), Bytecode.INSTR_ADD);

						}
						break;

					default:
						goto loop24;
					}
				}

				loop24:
					;

				} finally { DebugExitSubRule(24); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("list", 21);
			LeaveRule("list", 21);
			LeaveRule_list();
		}
		DebugLocation(319, 1);
		} finally { DebugExitRule(GrammarFileName, "list"); }
		return retval;

	}
	// $ANTLR end "list"

	partial void EnterRule_listElement();
	partial void LeaveRule_listElement();
	// $ANTLR start "listElement"
	// Compiler\\CodeGenerator.g3:321:1: listElement : ( expr | NULL );
	[GrammarRule("listElement")]
	private TreeRuleReturnScope<CommonTree> listElement()
	{
		EnterRule_listElement();
		EnterRule("listElement", 22);
		TraceIn("listElement", 22);
		TreeRuleReturnScope<CommonTree> retval = new TreeRuleReturnScope<CommonTree>();
		retval.Start = (CommonTree)input.LT(1);

		CommonTree NULL48 = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "listElement");
		DebugLocation(321, 61);
		try
		{
			// Compiler\\CodeGenerator.g3:321:13: ( expr | NULL )
			int alt25=2;
			try { DebugEnterDecision(25, false);
			int LA25_1 = input.LA(1);

			if (((LA25_1>=ID && LA25_1<=STRING)||(LA25_1>=TRUE && LA25_1<=FALSE)||LA25_1==EXEC_FUNC||(LA25_1>=INCLUDE && LA25_1<=MAP)||(LA25_1>=PROP && LA25_1<=PROP_IND)||(LA25_1>=SUBTEMPLATE && LA25_1<=ZIP)))
			{
				alt25 = 1;
			}
			else if ((LA25_1==NULL))
			{
				alt25 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 25, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\CodeGenerator.g3:321:15: expr
				{
				DebugLocation(321, 15);
				PushFollow(Follow._expr_in_listElement1045);
				expr();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Compiler\\CodeGenerator.g3:321:22: NULL
				{
				DebugLocation(321, 22);
				NULL48=(CommonTree)Match(input,NULL,Follow._NULL_in_listElement1049); 
				DebugLocation(321, 27);
				emit(NULL48,Bytecode.INSTR_NULL);

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("listElement", 22);
			LeaveRule("listElement", 22);
			LeaveRule_listElement();
		}
		DebugLocation(321, 61);
		} finally { DebugExitRule(GrammarFileName, "listElement"); }
		return retval;

	}
	// $ANTLR end "listElement"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _template_in_templateAndEOF53 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_templateAndEOF56 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _chunk_in_template82 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _element_in_chunk97 = new BitSet(new ulong[]{0x20020180400012UL});
		public static readonly BitSet _INDENT_in_element110 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _compoundElement_in_element112 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _compoundElement_in_element119 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDENT_in_element126 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _singleElement_in_element130 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INDENT_in_element138 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _singleElement_in_element145 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _exprElement_in_singleElement156 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TEXT_in_singleElement161 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_singleElement170 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ifstat_in_compoundElement184 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _region_in_compoundElement190 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXPR_in_exprElement209 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_exprElement211 = new BitSet(new ulong[]{0x4000000000008UL});
		public static readonly BitSet _exprOptions_in_exprElement214 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _REGION_in_region252 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_region254 = new BitSet(new ulong[]{0x20020180400010UL});
		public static readonly BitSet _template_in_region264 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SUBTEMPLATE_in_subtemplate297 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ARGS_in_subtemplate304 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_subtemplate307 = new BitSet(new ulong[]{0x2000008UL});
		public static readonly BitSet _template_in_subtemplate324 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IF_in_ifstat361 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _conditional_in_ifstat363 = new BitSet(new ulong[]{0x20020180400078UL});
		public static readonly BitSet _chunk_in_ifstat373 = new BitSet(new ulong[]{0x68UL});
		public static readonly BitSet _ELSEIF_in_ifstat383 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _conditional_in_ifstat397 = new BitSet(new ulong[]{0x20020180400018UL});
		public static readonly BitSet _chunk_in_ifstat409 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ELSE_in_ifstat432 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _chunk_in_ifstat446 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _OR_in_conditional480 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _conditional_in_conditional482 = new BitSet(new ulong[]{0x1D9FD1866000400UL});
		public static readonly BitSet _conditional_in_conditional484 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _AND_in_conditional494 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _conditional_in_conditional496 = new BitSet(new ulong[]{0x1D9FD1866000400UL});
		public static readonly BitSet _conditional_in_conditional498 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _BANG_in_conditional508 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _conditional_in_conditional510 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_in_conditional522 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPTIONS_in_exprOptions536 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _option_in_exprOptions538 = new BitSet(new ulong[]{0x1008UL});
		public static readonly BitSet _EQUALS_in_option550 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_option552 = new BitSet(new ulong[]{0x1D9FD1806000000UL});
		public static readonly BitSet _expr_in_option554 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ZIP_in_expr573 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ELEMENTS_in_expr576 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr579 = new BitSet(new ulong[]{0x1D9FD1806000008UL});
		public static readonly BitSet _mapTemplateRef_in_expr586 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _MAP_in_expr598 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr600 = new BitSet(new ulong[]{0x400C0000000000UL});
		public static readonly BitSet _mapTemplateRef_in_expr603 = new BitSet(new ulong[]{0x400C0000000008UL});
		public static readonly BitSet _prop_in_expr618 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _includeExpr_in_expr623 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROP_in_prop633 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_prop635 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _ID_in_prop637 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _PROP_IND_in_prop651 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_prop653 = new BitSet(new ulong[]{0x1D9FD1806000000UL});
		public static readonly BitSet _expr_in_prop655 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INCLUDE_in_mapTemplateRef676 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_mapTemplateRef678 = new BitSet(new ulong[]{0x1D9FD1806001808UL});
		public static readonly BitSet _args_in_mapTemplateRef688 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _subtemplate_in_mapTemplateRef701 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INCLUDE_IND_in_mapTemplateRef713 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_mapTemplateRef715 = new BitSet(new ulong[]{0x1D9FD1806001808UL});
		public static readonly BitSet _args_in_mapTemplateRef725 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _EXEC_FUNC_in_includeExpr747 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_includeExpr749 = new BitSet(new ulong[]{0x1D9FD1806000008UL});
		public static readonly BitSet _expr_in_includeExpr751 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INCLUDE_in_includeExpr762 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_includeExpr764 = new BitSet(new ulong[]{0x1D9FD1806001808UL});
		public static readonly BitSet _args_in_includeExpr766 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INCLUDE_SUPER_in_includeExpr777 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_includeExpr779 = new BitSet(new ulong[]{0x1D9FD1806001808UL});
		public static readonly BitSet _args_in_includeExpr781 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INCLUDE_REGION_in_includeExpr792 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_includeExpr794 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INCLUDE_SUPER_REGION_in_includeExpr804 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_includeExpr806 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _primary_in_includeExpr814 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_primary825 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_primary835 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRUE_in_primary845 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FALSE_in_primary854 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subtemplate_in_primary863 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_in_primary890 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INCLUDE_IND_in_primary897 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_primary903 = new BitSet(new ulong[]{0x1D9FD1806001808UL});
		public static readonly BitSet _args_in_primary912 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _TO_STR_in_primary926 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_primary928 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_in_arg941 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arg_in_args957 = new BitSet(new ulong[]{0x1D9FD1806000002UL});
		public static readonly BitSet _EQUALS_in_args976 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_args978 = new BitSet(new ulong[]{0x1D9FD1806000000UL});
		public static readonly BitSet _expr_in_args980 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ELLIPSIS_in_args996 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELLIPSIS_in_args1005 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LIST_in_list1025 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _listElement_in_list1028 = new BitSet(new ulong[]{0x1DBFD1806000008UL});
		public static readonly BitSet _expr_in_listElement1045 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NULL_in_listElement1049 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace Antlr4.StringTemplate.Compiler
