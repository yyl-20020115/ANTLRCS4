//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.2-beta2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.2-beta2 Compiler\\TemplateParser.g3 2022-04-09 08:56:43

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using Antlr4.StringTemplate.Extensions;
using Antlr4.StringTemplate.Misc;
// The variable 'name' is declared but never used
#pragma warning disable 168


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace Antlr4.StringTemplate.Compiler
{
/** Build an AST from a single StringTemplate template */
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.2-beta2")]
[System.CLSCompliant(false)]
public partial class TemplateParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "IF", "ELSE", "ELSEIF", "ENDIF", "SUPER", "SEMI", "BANG", "ELLIPSIS", "EQUALS", "COLON", "LPAREN", "RPAREN", "LBRACK", "RBRACK", "COMMA", "DOT", "LCURLY", "RCURLY", "TEXT", "LDELIM", "RDELIM", "ID", "STRING", "WS", "PIPE", "OR", "AND", "INDENT", "NEWLINE", "AT", "END", "TRUE", "FALSE", "COMMENT", "ARGS", "ELEMENTS", "EXEC_FUNC", "EXPR", "INCLUDE", "INCLUDE_IND", "INCLUDE_REGION", "INCLUDE_SUPER", "INCLUDE_SUPER_REGION", "LIST", "MAP", "NULL", "OPTIONS", "PROP", "PROP_IND", "REGION", "SUBTEMPLATE", "TO_STR", "ZIP"
	};
	public const int EOF=-1;
	public const int IF=4;
	public const int ELSE=5;
	public const int ELSEIF=6;
	public const int ENDIF=7;
	public const int SUPER=8;
	public const int SEMI=9;
	public const int BANG=10;
	public const int ELLIPSIS=11;
	public const int EQUALS=12;
	public const int COLON=13;
	public const int LPAREN=14;
	public const int RPAREN=15;
	public const int LBRACK=16;
	public const int RBRACK=17;
	public const int COMMA=18;
	public const int DOT=19;
	public const int LCURLY=20;
	public const int RCURLY=21;
	public const int TEXT=22;
	public const int LDELIM=23;
	public const int RDELIM=24;
	public const int ID=25;
	public const int STRING=26;
	public const int WS=27;
	public const int PIPE=28;
	public const int OR=29;
	public const int AND=30;
	public const int INDENT=31;
	public const int NEWLINE=32;
	public const int AT=33;
	public const int END=34;
	public const int TRUE=35;
	public const int FALSE=36;
	public const int COMMENT=37;
	public const int ARGS=38;
	public const int ELEMENTS=39;
	public const int EXEC_FUNC=40;
	public const int EXPR=41;
	public const int INCLUDE=42;
	public const int INCLUDE_IND=43;
	public const int INCLUDE_REGION=44;
	public const int INCLUDE_SUPER=45;
	public const int INCLUDE_SUPER_REGION=46;
	public const int LIST=47;
	public const int MAP=48;
	public const int NULL=49;
	public const int OPTIONS=50;
	public const int PROP=51;
	public const int PROP_IND=52;
	public const int REGION=53;
	public const int SUBTEMPLATE=54;
	public const int TO_STR=55;
	public const int ZIP=56;

	private TemplateParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	private TemplateParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return TemplateParser.tokenNames; } }
	public override string GrammarFileName { get { return "Compiler\\TemplateParser.g3"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_templateAndEOF();
	partial void LeaveRule_templateAndEOF();
	// $ANTLR start "templateAndEOF"
	// Compiler\\TemplateParser.g3:66:1: public templateAndEOF : template EOF !;
	[GrammarRule("templateAndEOF")]
	public AstParserRuleReturnScope<CommonTree, CommonToken> templateAndEOF()
	{
		EnterRule_templateAndEOF();
		EnterRule("templateAndEOF", 1);
		TraceIn("templateAndEOF", 1);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EOF2 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> template1 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EOF2_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "templateAndEOF");
		DebugLocation(66, 30);
		try
		{
			// Compiler\\TemplateParser.g3:66:16: ( template EOF !)
			DebugEnterAlt(1);
			// Compiler\\TemplateParser.g3:66:18: template EOF !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(66, 18);
			PushFollow(Follow._template_in_templateAndEOF141);
			template1=template();
			PopFollow();

			adaptor.AddChild(root_0, template1.Tree);
			DebugLocation(66, 30);
			EOF2=(CommonToken)Match(input,EOF,Follow._EOF_in_templateAndEOF143); 

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		catch (RecognitionException re) { re.PreserveStackTrace(); throw; }

		finally
		{
			TraceOut("templateAndEOF", 1);
			LeaveRule("templateAndEOF", 1);
			LeaveRule_templateAndEOF();
		}
		DebugLocation(66, 30);
		} finally { DebugExitRule(GrammarFileName, "templateAndEOF"); }
		return retval;

	}
	// $ANTLR end "templateAndEOF"

	partial void EnterRule_template();
	partial void LeaveRule_template();
	// $ANTLR start "template"
	// Compiler\\TemplateParser.g3:68:1: template : ( element )* ;
	[GrammarRule("template")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> template()
	{
		EnterRule_template();
		EnterRule("template", 2);
		TraceIn("template", 2);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> element3 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "template");
		DebugLocation(68, 20);
		try
		{
			// Compiler\\TemplateParser.g3:68:10: ( ( element )* )
			DebugEnterAlt(1);
			// Compiler\\TemplateParser.g3:68:12: ( element )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(68, 12);
			// Compiler\\TemplateParser.g3:68:12: ( element )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				switch (input.LA(1))
				{
				case INDENT:
					{
					int LA1_2 = input.LA(2);

					if ((LA1_2==LDELIM))
					{
						int LA1_3 = input.LA(3);

						if ((LA1_3==IF||LA1_3==SUPER||LA1_3==LPAREN||LA1_3==LBRACK||LA1_3==LCURLY||(LA1_3>=ID && LA1_3<=STRING)||LA1_3==AT||(LA1_3>=TRUE && LA1_3<=FALSE)))
						{
							alt1 = 1;
						}


					}
					else if ((LA1_2==TEXT||LA1_2==NEWLINE||LA1_2==COMMENT))
					{
						alt1 = 1;
					}


					}
					break;
				case LDELIM:
					{
					int LA1_2 = input.LA(2);

					if ((LA1_2==IF||LA1_2==SUPER||LA1_2==LPAREN||LA1_2==LBRACK||LA1_2==LCURLY||(LA1_2>=ID && LA1_2<=STRING)||LA1_2==AT||(LA1_2>=TRUE && LA1_2<=FALSE)))
					{
						alt1 = 1;
					}


					}
					break;
				case TEXT:
				case NEWLINE:
				case COMMENT:
					{
					alt1 = 1;
					}
					break;
				}

				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// Compiler\\TemplateParser.g3:68:12: element
					{
					DebugLocation(68, 12);
					PushFollow(Follow._element_in_template152);
					element3=element();
					PopFollow();

					adaptor.AddChild(root_0, element3.Tree);

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		catch (RecognitionException re) { re.PreserveStackTrace(); throw; }

		finally
		{
			TraceOut("template", 2);
			LeaveRule("template", 2);
			LeaveRule_template();
		}
		DebugLocation(68, 20);
		} finally { DebugExitRule(GrammarFileName, "template"); }
		return retval;

	}
	// $ANTLR end "template"

	partial void EnterRule_element();
	partial void LeaveRule_element();
	// $ANTLR start "element"
	// Compiler\\TemplateParser.g3:70:1: element : ({...}? ( INDENT !)? COMMENT ! NEWLINE !| INDENT ^ singleElement | singleElement | compoundElement );
	[GrammarRule("element")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> element()
	{
		EnterRule_element();
		EnterRule("element", 3);
		TraceIn("element", 3);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INDENT4 = default(CommonToken);
		CommonToken COMMENT5 = default(CommonToken);
		CommonToken NEWLINE6 = default(CommonToken);
		CommonToken INDENT7 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> singleElement8 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> singleElement9 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> compoundElement10 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INDENT4_tree = default(CommonTree);
		CommonTree COMMENT5_tree = default(CommonTree);
		CommonTree NEWLINE6_tree = default(CommonTree);
		CommonTree INDENT7_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "element");
		DebugLocation(70, 1);
		try
		{
			// Compiler\\TemplateParser.g3:71:2: ({...}? ( INDENT !)? COMMENT ! NEWLINE !| INDENT ^ singleElement | singleElement | compoundElement )
			int alt3=4;
			try { DebugEnterDecision(3, false);
			switch (input.LA(1))
			{
			case INDENT:
				{
				switch (input.LA(2))
				{
				case COMMENT:
					{
					int LA3_3 = input.LA(3);

					if ((LA3_3==NEWLINE))
					{
						int LA3_4 = input.LA(4);

						if (((input.LT(1).CharPositionInLine == 0)))
						{
							alt3 = 1;
						}
						else if ((true))
						{
							alt3 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 3, 11, input, 4);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else if ((LA3_3==EOF||(LA3_3>=RCURLY && LA3_3<=LDELIM)||LA3_3==INDENT||LA3_3==COMMENT))
					{
						alt3 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 3, 5, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case LDELIM:
					{
					switch (input.LA(3))
					{
					case IF:
						{
						alt3 = 4;
						}
						break;
					case AT:
						{
						int LA3_4 = input.LA(4);

						if ((LA3_4==ID))
						{
							int LA3_5 = input.LA(5);

							if ((LA3_5==RDELIM))
							{
								alt3 = 4;
							}
							else if ((LA3_5==LPAREN))
							{
								alt3 = 2;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 3, 15, input, 5);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else if ((LA3_4==SUPER))
						{
							alt3 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 3, 12, input, 4);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case SUPER:
					case LPAREN:
					case LBRACK:
					case LCURLY:
					case ID:
					case STRING:
					case TRUE:
					case FALSE:
						{
						alt3 = 2;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 3, 6, input, 3);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					}
					break;
				case TEXT:
				case NEWLINE:
					{
					alt3 = 2;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 3, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case COMMENT:
				{
				int LA3_2 = input.LA(2);

				if ((LA3_2==NEWLINE))
				{
					int LA3_3 = input.LA(3);

					if (((input.LT(1).CharPositionInLine == 0)))
					{
						alt3 = 1;
					}
					else if ((true))
					{
						alt3 = 3;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 3, 8, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA3_2==EOF||(LA3_2>=RCURLY && LA3_2<=LDELIM)||LA3_2==INDENT||LA3_2==COMMENT))
				{
					alt3 = 3;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 3, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LDELIM:
				{
				switch (input.LA(2))
				{
				case IF:
					{
					alt3 = 4;
					}
					break;
				case AT:
					{
					int LA3_3 = input.LA(3);

					if ((LA3_3==ID))
					{
						int LA3_4 = input.LA(4);

						if ((LA3_4==RDELIM))
						{
							alt3 = 4;
						}
						else if ((LA3_4==LPAREN))
						{
							alt3 = 3;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 3, 14, input, 4);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else if ((LA3_3==SUPER))
					{
						alt3 = 3;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 3, 10, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case SUPER:
				case LPAREN:
				case LBRACK:
				case LCURLY:
				case ID:
				case STRING:
				case TRUE:
				case FALSE:
					{
					alt3 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 3, 3, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case TEXT:
			case NEWLINE:
				{
				alt3 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\TemplateParser.g3:71:4: {...}? ( INDENT !)? COMMENT ! NEWLINE !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(71, 4);
				if (!((input.LT(1).CharPositionInLine == 0)))
				{
					throw new FailedPredicateException(input, "element", "input.LT(1).CharPositionInLine == 0");
				}
				DebugLocation(71, 49);
				// Compiler\\TemplateParser.g3:71:49: ( INDENT !)?
				int alt2=2;
				try { DebugEnterSubRule(2);
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==INDENT))
				{
					alt2 = 1;
				}
				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// Compiler\\TemplateParser.g3:71:49: INDENT !
					{
					DebugLocation(71, 49);
					INDENT4=(CommonToken)Match(input,INDENT,Follow._INDENT_in_element165); 

					}
					break;

				}
				} finally { DebugExitSubRule(2); }

				DebugLocation(71, 59);
				COMMENT5=(CommonToken)Match(input,COMMENT,Follow._COMMENT_in_element169); 
				DebugLocation(71, 68);
				NEWLINE6=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_element172); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Compiler\\TemplateParser.g3:72:4: INDENT ^ singleElement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(72, 10);
				INDENT7=(CommonToken)Match(input,INDENT,Follow._INDENT_in_element178); 
				INDENT7_tree = (CommonTree)adaptor.Create(INDENT7);
				root_0 = (CommonTree)adaptor.BecomeRoot(INDENT7_tree, root_0);
				DebugLocation(72, 12);
				PushFollow(Follow._singleElement_in_element181);
				singleElement8=singleElement();
				PopFollow();

				adaptor.AddChild(root_0, singleElement8.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Compiler\\TemplateParser.g3:73:4: singleElement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(73, 4);
				PushFollow(Follow._singleElement_in_element186);
				singleElement9=singleElement();
				PopFollow();

				adaptor.AddChild(root_0, singleElement9.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Compiler\\TemplateParser.g3:74:4: compoundElement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(74, 4);
				PushFollow(Follow._compoundElement_in_element191);
				compoundElement10=compoundElement();
				PopFollow();

				adaptor.AddChild(root_0, compoundElement10.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		catch (RecognitionException re) { re.PreserveStackTrace(); throw; }

		finally
		{
			TraceOut("element", 3);
			LeaveRule("element", 3);
			LeaveRule_element();
		}
		DebugLocation(75, 1);
		} finally { DebugExitRule(GrammarFileName, "element"); }
		return retval;

	}
	// $ANTLR end "element"

	partial void EnterRule_singleElement();
	partial void LeaveRule_singleElement();
	// $ANTLR start "singleElement"
	// Compiler\\TemplateParser.g3:77:1: singleElement : ( exprTag | TEXT | NEWLINE | COMMENT !);
	[GrammarRule("singleElement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> singleElement()
	{
		EnterRule_singleElement();
		EnterRule("singleElement", 4);
		TraceIn("singleElement", 4);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken TEXT12 = default(CommonToken);
		CommonToken NEWLINE13 = default(CommonToken);
		CommonToken COMMENT14 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> exprTag11 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree TEXT12_tree = default(CommonTree);
		CommonTree NEWLINE13_tree = default(CommonTree);
		CommonTree COMMENT14_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "singleElement");
		DebugLocation(77, 1);
		try
		{
			// Compiler\\TemplateParser.g3:78:2: ( exprTag | TEXT | NEWLINE | COMMENT !)
			int alt4=4;
			try { DebugEnterDecision(4, false);
			switch (input.LA(1))
			{
			case LDELIM:
				{
				alt4 = 1;
				}
				break;
			case TEXT:
				{
				alt4 = 2;
				}
				break;
			case NEWLINE:
				{
				alt4 = 3;
				}
				break;
			case COMMENT:
				{
				alt4 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 4, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\TemplateParser.g3:78:4: exprTag
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(78, 4);
				PushFollow(Follow._exprTag_in_singleElement202);
				exprTag11=exprTag();
				PopFollow();

				adaptor.AddChild(root_0, exprTag11.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Compiler\\TemplateParser.g3:79:4: TEXT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(79, 4);
				TEXT12=(CommonToken)Match(input,TEXT,Follow._TEXT_in_singleElement207); 
				TEXT12_tree = (CommonTree)adaptor.Create(TEXT12);
				adaptor.AddChild(root_0, TEXT12_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Compiler\\TemplateParser.g3:80:4: NEWLINE
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(80, 4);
				NEWLINE13=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_singleElement212); 
				NEWLINE13_tree = (CommonTree)adaptor.Create(NEWLINE13);
				adaptor.AddChild(root_0, NEWLINE13_tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Compiler\\TemplateParser.g3:81:4: COMMENT !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(81, 11);
				COMMENT14=(CommonToken)Match(input,COMMENT,Follow._COMMENT_in_singleElement217); 

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		catch (RecognitionException re) { re.PreserveStackTrace(); throw; }

		finally
		{
			TraceOut("singleElement", 4);
			LeaveRule("singleElement", 4);
			LeaveRule_singleElement();
		}
		DebugLocation(82, 1);
		} finally { DebugExitRule(GrammarFileName, "singleElement"); }
		return retval;

	}
	// $ANTLR end "singleElement"

	partial void EnterRule_compoundElement();
	partial void LeaveRule_compoundElement();
	// $ANTLR start "compoundElement"
	// Compiler\\TemplateParser.g3:84:1: compoundElement : ( ifstat | region );
	[GrammarRule("compoundElement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> compoundElement()
	{
		EnterRule_compoundElement();
		EnterRule("compoundElement", 5);
		TraceIn("compoundElement", 5);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> ifstat15 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> region16 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "compoundElement");
		DebugLocation(84, 1);
		try
		{
			// Compiler\\TemplateParser.g3:85:2: ( ifstat | region )
			int alt5=2;
			try { DebugEnterDecision(5, false);
			int LA5_1 = input.LA(1);

			if ((LA5_1==INDENT))
			{
				int LA5_2 = input.LA(2);

				if ((LA5_2==LDELIM))
				{
					int LA5_3 = input.LA(3);

					if ((LA5_3==IF))
					{
						alt5 = 1;
					}
					else if ((LA5_3==AT))
					{
						alt5 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 5, 2, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 5, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA5_1==LDELIM))
			{
				int LA5_2 = input.LA(2);

				if ((LA5_2==IF))
				{
					alt5 = 1;
				}
				else if ((LA5_2==AT))
				{
					alt5 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 5, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 5, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\TemplateParser.g3:85:4: ifstat
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(85, 4);
				PushFollow(Follow._ifstat_in_compoundElement230);
				ifstat15=ifstat();
				PopFollow();

				adaptor.AddChild(root_0, ifstat15.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Compiler\\TemplateParser.g3:86:4: region
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(86, 4);
				PushFollow(Follow._region_in_compoundElement235);
				region16=region();
				PopFollow();

				adaptor.AddChild(root_0, region16.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		catch (RecognitionException re) { re.PreserveStackTrace(); throw; }

		finally
		{
			TraceOut("compoundElement", 5);
			LeaveRule("compoundElement", 5);
			LeaveRule_compoundElement();
		}
		DebugLocation(87, 1);
		} finally { DebugExitRule(GrammarFileName, "compoundElement"); }
		return retval;

	}
	// $ANTLR end "compoundElement"

	partial void EnterRule_exprTag();
	partial void LeaveRule_exprTag();
	// $ANTLR start "exprTag"
	// Compiler\\TemplateParser.g3:89:1: exprTag : LDELIM ^ expr ( exprOptions )? RDELIM !;
	[GrammarRule("exprTag")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> exprTag()
	{
		EnterRule_exprTag();
		EnterRule("exprTag", 6);
		TraceIn("exprTag", 6);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken LDELIM17 = default(CommonToken);
		CommonToken RDELIM20 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expr18 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> exprOptions19 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree LDELIM17_tree = default(CommonTree);
		CommonTree RDELIM20_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "exprTag");
		DebugLocation(89, 1);
		try
		{
			// Compiler\\TemplateParser.g3:90:2: ( LDELIM ^ expr ( exprOptions )? RDELIM !)
			DebugEnterAlt(1);
			// Compiler\\TemplateParser.g3:90:4: LDELIM ^ expr ( exprOptions )? RDELIM !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(90, 33);
			LDELIM17=(CommonToken)Match(input,LDELIM,Follow._LDELIM_in_exprTag246); 
			LDELIM17_tree = (CommonTree)adaptor.Create(EXPR,LDELIM17,"EXPR");
			root_0 = (CommonTree)adaptor.BecomeRoot(LDELIM17_tree, root_0);
			DebugLocation(90, 35);
			PushFollow(Follow._expr_in_exprTag258);
			expr18=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr18.Tree);
			DebugLocation(90, 40);
			// Compiler\\TemplateParser.g3:90:40: ( exprOptions )?
			int alt6=2;
			try { DebugEnterSubRule(6);
			try { DebugEnterDecision(6, false);
			int LA6_1 = input.LA(1);

			if ((LA6_1==SEMI))
			{
				alt6 = 1;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\TemplateParser.g3:90:40: exprOptions
				{
				DebugLocation(90, 40);
				PushFollow(Follow._exprOptions_in_exprTag260);
				exprOptions19=exprOptions();
				PopFollow();

				adaptor.AddChild(root_0, exprOptions19.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(6); }

			DebugLocation(90, 59);
			RDELIM20=(CommonToken)Match(input,RDELIM,Follow._RDELIM_in_exprTag263); 

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		catch (RecognitionException re) { re.PreserveStackTrace(); throw; }

		finally
		{
			TraceOut("exprTag", 6);
			LeaveRule("exprTag", 6);
			LeaveRule_exprTag();
		}
		DebugLocation(91, 1);
		} finally { DebugExitRule(GrammarFileName, "exprTag"); }
		return retval;

	}
	// $ANTLR end "exprTag"

	partial void EnterRule_region();
	partial void LeaveRule_region();
	// $ANTLR start "region"
	// Compiler\\TemplateParser.g3:93:1: region : ( INDENT ^)? regionbody ({...}? => NEWLINE !)? ;
	[GrammarRule("region")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> region()
	{
		EnterRule_region();
		EnterRule("region", 7);
		TraceIn("region", 7);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INDENT21 = default(CommonToken);
		CommonToken NEWLINE23 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> regionbody22 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INDENT21_tree = default(CommonTree);
		CommonTree NEWLINE23_tree = default(CommonTree);
		bool indented = false; CommonTree tree = null;
		try { DebugEnterRule(GrammarFileName, "region");
		DebugLocation(93, 1);
		try
		{
			// Compiler\\TemplateParser.g3:96:2: ( ( INDENT ^)? regionbody ({...}? => NEWLINE !)? )
			DebugEnterAlt(1);
			// Compiler\\TemplateParser.g3:96:4: ( INDENT ^)? regionbody ({...}? => NEWLINE !)?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(96, 10);
			// Compiler\\TemplateParser.g3:96:10: ( INDENT ^)?
			int alt7=2;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, false);
			int LA7_1 = input.LA(1);

			if ((LA7_1==INDENT))
			{
				alt7 = 1;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\TemplateParser.g3:96:10: INDENT ^
				{
				DebugLocation(96, 10);
				INDENT21=(CommonToken)Match(input,INDENT,Follow._INDENT_in_region285); 
				INDENT21_tree = (CommonTree)adaptor.Create(INDENT21);
				root_0 = (CommonTree)adaptor.BecomeRoot(INDENT21_tree, root_0);

				}
				break;

			}
			} finally { DebugExitSubRule(7); }

			DebugLocation(96, 13);
			PushFollow(Follow._regionbody_in_region289);
			regionbody22=regionbody();
			PopFollow();

			adaptor.AddChild(root_0, regionbody22.Tree);
			DebugLocation(98, 3);
			// Compiler\\TemplateParser.g3:98:3: ({...}? => NEWLINE !)?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, false);
			int LA8_1 = input.LA(1);

			if ((LA8_1==NEWLINE))
			{
				int LA8_2 = input.LA(2);

				if (((retval.Start.Line != input.LT(1).Line)))
				{
					alt8 = 1;
				}
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\TemplateParser.g3:98:4: {...}? => NEWLINE !
				{
				DebugLocation(98, 4);
				if (!((retval.Start.Line != input.LT(1).Line)))
				{
					throw new FailedPredicateException(input, "region", "$region.start.Line != input.LT(1).Line");
				}
				DebugLocation(98, 56);
				NEWLINE23=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_region301); 

				}
				break;

			}
			} finally { DebugExitSubRule(8); }

			DebugLocation(99, 3);
			indented = (regionbody22!=null?((TemplateParser.regionbody_return)regionbody22).indented:default(bool)); tree = (regionbody22!=null?((CommonTree)regionbody22.Tree):default(CommonTree));

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

			if (!indented) retval.Tree =  tree;
		}

		catch (RecognitionException re) { re.PreserveStackTrace(); throw; }

		finally
		{
			TraceOut("region", 7);
			LeaveRule("region", 7);
			LeaveRule_region();
		}
		DebugLocation(100, 1);
		} finally { DebugExitRule(GrammarFileName, "region"); }
		return retval;

	}
	// $ANTLR end "region"

	private sealed partial class regionbody_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public bool indented;
		public regionbody_return(TemplateParser grammar) {OnCreated(grammar);}
		partial void OnCreated(TemplateParser grammar);
	}

	partial void EnterRule_regionbody();
	partial void LeaveRule_regionbody();
	// $ANTLR start "regionbody"
	// Compiler\\TemplateParser.g3:102:1: regionbody returns [bool indented] : LDELIM ^ '@' ! ID RDELIM ! template ( INDENT !)? LDELIM ! '@end' ! RDELIM !;
	[GrammarRule("regionbody")]
	private TemplateParser.regionbody_return regionbody()
	{
		EnterRule_regionbody();
		EnterRule("regionbody", 8);
		TraceIn("regionbody", 8);
		TemplateParser.regionbody_return retval = new TemplateParser.regionbody_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken LDELIM24 = default(CommonToken);
		CommonToken char_literal25 = default(CommonToken);
		CommonToken ID26 = default(CommonToken);
		CommonToken RDELIM27 = default(CommonToken);
		CommonToken INDENT29 = default(CommonToken);
		CommonToken LDELIM30 = default(CommonToken);
		CommonToken string_literal31 = default(CommonToken);
		CommonToken RDELIM32 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> template28 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree LDELIM24_tree = default(CommonTree);
		CommonTree char_literal25_tree = default(CommonTree);
		CommonTree ID26_tree = default(CommonTree);
		CommonTree RDELIM27_tree = default(CommonTree);
		CommonTree INDENT29_tree = default(CommonTree);
		CommonTree LDELIM30_tree = default(CommonTree);
		CommonTree string_literal31_tree = default(CommonTree);
		CommonTree RDELIM32_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "regionbody");
		DebugLocation(102, 1);
		try
		{
			// Compiler\\TemplateParser.g3:103:2: ( LDELIM ^ '@' ! ID RDELIM ! template ( INDENT !)? LDELIM ! '@end' ! RDELIM !)
			DebugEnterAlt(1);
			// Compiler\\TemplateParser.g3:103:4: LDELIM ^ '@' ! ID RDELIM ! template ( INDENT !)? LDELIM ! '@end' ! RDELIM !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(103, 18);
			LDELIM24=(CommonToken)Match(input,LDELIM,Follow._LDELIM_in_regionbody322); 
			LDELIM24_tree = (CommonTree)adaptor.Create(REGION,LDELIM24);
			root_0 = (CommonTree)adaptor.BecomeRoot(LDELIM24_tree, root_0);
			DebugLocation(103, 23);
			char_literal25=(CommonToken)Match(input,AT,Follow._AT_in_regionbody328); 
			DebugLocation(103, 25);
			ID26=(CommonToken)Match(input,ID,Follow._ID_in_regionbody331); 
			ID26_tree = (CommonTree)adaptor.Create(ID26);
			adaptor.AddChild(root_0, ID26_tree);
			DebugLocation(103, 34);
			RDELIM27=(CommonToken)Match(input,RDELIM,Follow._RDELIM_in_regionbody333); 
			DebugLocation(103, 36);
			retval.indented = (input.LA(1) != NEWLINE);
			DebugLocation(104, 3);
			PushFollow(Follow._template_in_regionbody340);
			template28=template();
			PopFollow();

			adaptor.AddChild(root_0, template28.Tree);
			DebugLocation(105, 9);
			// Compiler\\TemplateParser.g3:105:9: ( INDENT !)?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, false);
			int LA9_1 = input.LA(1);

			if ((LA9_1==INDENT))
			{
				alt9 = 1;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\TemplateParser.g3:105:9: INDENT !
				{
				DebugLocation(105, 9);
				INDENT29=(CommonToken)Match(input,INDENT,Follow._INDENT_in_regionbody344); 

				}
				break;

			}
			} finally { DebugExitSubRule(9); }

			DebugLocation(105, 18);
			LDELIM30=(CommonToken)Match(input,LDELIM,Follow._LDELIM_in_regionbody348); 
			DebugLocation(105, 26);
			string_literal31=(CommonToken)Match(input,END,Follow._END_in_regionbody351); 
			DebugLocation(105, 34);
			RDELIM32=(CommonToken)Match(input,RDELIM,Follow._RDELIM_in_regionbody354); 

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		catch (RecognitionException re) { re.PreserveStackTrace(); throw; }

		finally
		{
			TraceOut("regionbody", 8);
			LeaveRule("regionbody", 8);
			LeaveRule_regionbody();
		}
		DebugLocation(106, 1);
		} finally { DebugExitRule(GrammarFileName, "regionbody"); }
		return retval;

	}
	// $ANTLR end "regionbody"

	partial void EnterRule_subtemplate();
	partial void LeaveRule_subtemplate();
	// $ANTLR start "subtemplate"
	// Compiler\\TemplateParser.g3:108:1: subtemplate : '{' ^ ( subtemplateargs )? template ( INDENT !)? '}' !;
	[GrammarRule("subtemplate")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> subtemplate()
	{
		EnterRule_subtemplate();
		EnterRule("subtemplate", 9);
		TraceIn("subtemplate", 9);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal33 = default(CommonToken);
		CommonToken INDENT36 = default(CommonToken);
		CommonToken char_literal37 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> subtemplateargs34 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> template35 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal33_tree = default(CommonTree);
		CommonTree INDENT36_tree = default(CommonTree);
		CommonTree char_literal37_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "subtemplate");
		DebugLocation(108, 1);
		try
		{
			// Compiler\\TemplateParser.g3:109:2: ( '{' ^ ( subtemplateargs )? template ( INDENT !)? '}' !)
			DebugEnterAlt(1);
			// Compiler\\TemplateParser.g3:109:4: '{' ^ ( subtemplateargs )? template ( INDENT !)? '}' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(109, 44);
			char_literal33=(CommonToken)Match(input,LCURLY,Follow._LCURLY_in_subtemplate366); 
			char_literal33_tree = (CommonTree)adaptor.Create(SUBTEMPLATE,char_literal33,"SUBTEMPLATE");
			root_0 = (CommonTree)adaptor.BecomeRoot(char_literal33_tree, root_0);
			DebugLocation(109, 46);
			// Compiler\\TemplateParser.g3:109:46: ( subtemplateargs )?
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, false);
			int LA10_1 = input.LA(1);

			if ((LA10_1==ID))
			{
				alt10 = 1;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\TemplateParser.g3:109:46: subtemplateargs
				{
				DebugLocation(109, 46);
				PushFollow(Follow._subtemplateargs_in_subtemplate378);
				subtemplateargs34=subtemplateargs();
				PopFollow();

				adaptor.AddChild(root_0, subtemplateargs34.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(109, 63);
			PushFollow(Follow._template_in_subtemplate381);
			template35=template();
			PopFollow();

			adaptor.AddChild(root_0, template35.Tree);
			DebugLocation(109, 78);
			// Compiler\\TemplateParser.g3:109:78: ( INDENT !)?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, false);
			int LA11_1 = input.LA(1);

			if ((LA11_1==INDENT))
			{
				alt11 = 1;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\TemplateParser.g3:109:78: INDENT !
				{
				DebugLocation(109, 78);
				INDENT36=(CommonToken)Match(input,INDENT,Follow._INDENT_in_subtemplate383); 

				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(109, 84);
			char_literal37=(CommonToken)Match(input,RCURLY,Follow._RCURLY_in_subtemplate387); 

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		catch (RecognitionException re) { re.PreserveStackTrace(); throw; }

		finally
		{
			TraceOut("subtemplate", 9);
			LeaveRule("subtemplate", 9);
			LeaveRule_subtemplate();
		}
		DebugLocation(111, 1);
		} finally { DebugExitRule(GrammarFileName, "subtemplate"); }
		return retval;

	}
	// $ANTLR end "subtemplate"

	partial void EnterRule_subtemplateargs();
	partial void LeaveRule_subtemplateargs();
	// $ANTLR start "subtemplateargs"
	// Compiler\\TemplateParser.g3:113:1: subtemplateargs : ( subtemplate_args_trunc )* subtemplate_args_last ;
	[GrammarRule("subtemplateargs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> subtemplateargs()
	{
		EnterRule_subtemplateargs();
		EnterRule("subtemplateargs", 10);
		TraceIn("subtemplateargs", 10);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> subtemplate_args_trunc38 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> subtemplate_args_last39 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "subtemplateargs");
		DebugLocation(113, 1);
		try
		{
			// Compiler\\TemplateParser.g3:114:2: ( ( subtemplate_args_trunc )* subtemplate_args_last )
			DebugEnterAlt(1);
			// Compiler\\TemplateParser.g3:114:4: ( subtemplate_args_trunc )* subtemplate_args_last
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(114, 4);
			// Compiler\\TemplateParser.g3:114:4: ( subtemplate_args_trunc )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_1 = input.LA(1);

				if ((LA12_1==ID))
				{
					int LA12_2 = input.LA(2);

					if ((LA12_2==COMMA))
					{
						alt12 = 1;
					}


				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// Compiler\\TemplateParser.g3:114:4: subtemplate_args_trunc
					{
					DebugLocation(114, 4);
					PushFollow(Follow._subtemplate_args_trunc_in_subtemplateargs402);
					subtemplate_args_trunc38=subtemplate_args_trunc();
					PopFollow();

					adaptor.AddChild(root_0, subtemplate_args_trunc38.Tree);

					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }

			DebugLocation(114, 28);
			PushFollow(Follow._subtemplate_args_last_in_subtemplateargs405);
			subtemplate_args_last39=subtemplate_args_last();
			PopFollow();

			adaptor.AddChild(root_0, subtemplate_args_last39.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		catch (RecognitionException re) { re.PreserveStackTrace(); throw; }

		finally
		{
			TraceOut("subtemplateargs", 10);
			LeaveRule("subtemplateargs", 10);
			LeaveRule_subtemplateargs();
		}
		DebugLocation(115, 1);
		} finally { DebugExitRule(GrammarFileName, "subtemplateargs"); }
		return retval;

	}
	// $ANTLR end "subtemplateargs"

	partial void EnterRule_subtemplate_args_trunc();
	partial void LeaveRule_subtemplate_args_trunc();
	// $ANTLR start "subtemplate_args_trunc"
	// Compiler\\TemplateParser.g3:117:1: subtemplate_args_trunc : ID ',' ^;
	[GrammarRule("subtemplate_args_trunc")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> subtemplate_args_trunc()
	{
		EnterRule_subtemplate_args_trunc();
		EnterRule("subtemplate_args_trunc", 11);
		TraceIn("subtemplate_args_trunc", 11);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID40 = default(CommonToken);
		CommonToken char_literal41 = default(CommonToken);

		CommonTree ID40_tree = default(CommonTree);
		CommonTree char_literal41_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "subtemplate_args_trunc");
		DebugLocation(117, 1);
		try
		{
			// Compiler\\TemplateParser.g3:118:2: ( ID ',' ^)
			DebugEnterAlt(1);
			// Compiler\\TemplateParser.g3:118:4: ID ',' ^
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(118, 4);
			ID40=(CommonToken)Match(input,ID,Follow._ID_in_subtemplate_args_trunc416); 
			ID40_tree = (CommonTree)adaptor.Create(ID40);
			adaptor.AddChild(root_0, ID40_tree);
			DebugLocation(118, 16);
			char_literal41=(CommonToken)Match(input,COMMA,Follow._COMMA_in_subtemplate_args_trunc418); 
			char_literal41_tree = (CommonTree)adaptor.Create(ARGS,char_literal41);
			root_0 = (CommonTree)adaptor.BecomeRoot(char_literal41_tree, root_0);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		catch (RecognitionException re) { re.PreserveStackTrace(); throw; }

		finally
		{
			TraceOut("subtemplate_args_trunc", 11);
			LeaveRule("subtemplate_args_trunc", 11);
			LeaveRule_subtemplate_args_trunc();
		}
		DebugLocation(119, 1);
		} finally { DebugExitRule(GrammarFileName, "subtemplate_args_trunc"); }
		return retval;

	}
	// $ANTLR end "subtemplate_args_trunc"

	partial void EnterRule_subtemplate_args_last();
	partial void LeaveRule_subtemplate_args_last();
	// $ANTLR start "subtemplate_args_last"
	// Compiler\\TemplateParser.g3:121:1: subtemplate_args_last : ID '|' ^;
	[GrammarRule("subtemplate_args_last")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> subtemplate_args_last()
	{
		EnterRule_subtemplate_args_last();
		EnterRule("subtemplate_args_last", 12);
		TraceIn("subtemplate_args_last", 12);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID42 = default(CommonToken);
		CommonToken char_literal43 = default(CommonToken);

		CommonTree ID42_tree = default(CommonTree);
		CommonTree char_literal43_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "subtemplate_args_last");
		DebugLocation(121, 1);
		try
		{
			// Compiler\\TemplateParser.g3:122:2: ( ID '|' ^)
			DebugEnterAlt(1);
			// Compiler\\TemplateParser.g3:122:4: ID '|' ^
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(122, 4);
			ID42=(CommonToken)Match(input,ID,Follow._ID_in_subtemplate_args_last433); 
			ID42_tree = (CommonTree)adaptor.Create(ID42);
			adaptor.AddChild(root_0, ID42_tree);
			DebugLocation(122, 16);
			char_literal43=(CommonToken)Match(input,PIPE,Follow._PIPE_in_subtemplate_args_last435); 
			char_literal43_tree = (CommonTree)adaptor.Create(ARGS,char_literal43);
			root_0 = (CommonTree)adaptor.BecomeRoot(char_literal43_tree, root_0);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		catch (RecognitionException re) { re.PreserveStackTrace(); throw; }

		finally
		{
			TraceOut("subtemplate_args_last", 12);
			LeaveRule("subtemplate_args_last", 12);
			LeaveRule_subtemplate_args_last();
		}
		DebugLocation(123, 1);
		} finally { DebugExitRule(GrammarFileName, "subtemplate_args_last"); }
		return retval;

	}
	// $ANTLR end "subtemplate_args_last"

	partial void EnterRule_ifstat();
	partial void LeaveRule_ifstat();
	// $ANTLR start "ifstat"
	// Compiler\\TemplateParser.g3:125:1: ifstat : ( INDENT ^)? ifstatbody ({...}? => NEWLINE !)? ;
	[GrammarRule("ifstat")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> ifstat()
	{
		EnterRule_ifstat();
		EnterRule("ifstat", 13);
		TraceIn("ifstat", 13);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INDENT44 = default(CommonToken);
		CommonToken NEWLINE46 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> ifstatbody45 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INDENT44_tree = default(CommonTree);
		CommonTree NEWLINE46_tree = default(CommonTree);
		bool indented = false; CommonTree tree = null;
		try { DebugEnterRule(GrammarFileName, "ifstat");
		DebugLocation(125, 1);
		try
		{
			// Compiler\\TemplateParser.g3:128:2: ( ( INDENT ^)? ifstatbody ({...}? => NEWLINE !)? )
			DebugEnterAlt(1);
			// Compiler\\TemplateParser.g3:128:4: ( INDENT ^)? ifstatbody ({...}? => NEWLINE !)?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(128, 10);
			// Compiler\\TemplateParser.g3:128:10: ( INDENT ^)?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			int LA13_1 = input.LA(1);

			if ((LA13_1==INDENT))
			{
				alt13 = 1;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\TemplateParser.g3:128:10: INDENT ^
				{
				DebugLocation(128, 10);
				INDENT44=(CommonToken)Match(input,INDENT,Follow._INDENT_in_ifstat460); 
				INDENT44_tree = (CommonTree)adaptor.Create(INDENT44);
				root_0 = (CommonTree)adaptor.BecomeRoot(INDENT44_tree, root_0);

				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(128, 13);
			PushFollow(Follow._ifstatbody_in_ifstat464);
			ifstatbody45=ifstatbody();
			PopFollow();

			adaptor.AddChild(root_0, ifstatbody45.Tree);
			DebugLocation(130, 3);
			// Compiler\\TemplateParser.g3:130:3: ({...}? => NEWLINE !)?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_1 = input.LA(1);

			if ((LA14_1==NEWLINE))
			{
				int LA14_2 = input.LA(2);

				if (((retval.Start.Line!=input.LT(1).Line)))
				{
					alt14 = 1;
				}
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\TemplateParser.g3:130:4: {...}? => NEWLINE !
				{
				DebugLocation(130, 4);
				if (!((retval.Start.Line!=input.LT(1).Line)))
				{
					throw new FailedPredicateException(input, "ifstat", "$ifstat.start.Line!=input.LT(1).Line");
				}
				DebugLocation(130, 53);
				NEWLINE46=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_ifstat475); 

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(131, 3);
			indented = (ifstatbody45!=null?((TemplateParser.ifstatbody_return)ifstatbody45).indented:default(bool)); tree = (ifstatbody45!=null?((CommonTree)ifstatbody45.Tree):default(CommonTree));

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

			if (!indented) retval.Tree =  tree;
		}

		catch (RecognitionException re) { re.PreserveStackTrace(); throw; }

		finally
		{
			TraceOut("ifstat", 13);
			LeaveRule("ifstat", 13);
			LeaveRule_ifstat();
		}
		DebugLocation(132, 1);
		} finally { DebugExitRule(GrammarFileName, "ifstat"); }
		return retval;

	}
	// $ANTLR end "ifstat"

	private sealed partial class ifstatbody_return : AstParserRuleReturnScope<CommonTree, CommonToken>
	{
		public bool indented;
		public ifstatbody_return(TemplateParser grammar) {OnCreated(grammar);}
		partial void OnCreated(TemplateParser grammar);
	}

	partial void EnterRule_ifstatbody();
	partial void LeaveRule_ifstatbody();
	// $ANTLR start "ifstatbody"
	// Compiler\\TemplateParser.g3:134:1: ifstatbody returns [bool indented] : LDELIM ! 'if' ^ '(' ! conditional ')' ! RDELIM ! template ( elseifstat )* ( elsestat )? ( INDENT !)? LDELIM ! 'endif' ! RDELIM !;
	[GrammarRule("ifstatbody")]
	private TemplateParser.ifstatbody_return ifstatbody()
	{
		EnterRule_ifstatbody();
		EnterRule("ifstatbody", 14);
		TraceIn("ifstatbody", 14);
		TemplateParser.ifstatbody_return retval = new TemplateParser.ifstatbody_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken LDELIM47 = default(CommonToken);
		CommonToken string_literal48 = default(CommonToken);
		CommonToken char_literal49 = default(CommonToken);
		CommonToken char_literal51 = default(CommonToken);
		CommonToken RDELIM52 = default(CommonToken);
		CommonToken INDENT56 = default(CommonToken);
		CommonToken LDELIM57 = default(CommonToken);
		CommonToken string_literal58 = default(CommonToken);
		CommonToken RDELIM59 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> conditional50 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> template53 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> elseifstat54 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> elsestat55 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree LDELIM47_tree = default(CommonTree);
		CommonTree string_literal48_tree = default(CommonTree);
		CommonTree char_literal49_tree = default(CommonTree);
		CommonTree char_literal51_tree = default(CommonTree);
		CommonTree RDELIM52_tree = default(CommonTree);
		CommonTree INDENT56_tree = default(CommonTree);
		CommonTree LDELIM57_tree = default(CommonTree);
		CommonTree string_literal58_tree = default(CommonTree);
		CommonTree RDELIM59_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ifstatbody");
		DebugLocation(134, 1);
		try
		{
			// Compiler\\TemplateParser.g3:135:2: ( LDELIM ! 'if' ^ '(' ! conditional ')' ! RDELIM ! template ( elseifstat )* ( elsestat )? ( INDENT !)? LDELIM ! 'endif' ! RDELIM !)
			DebugEnterAlt(1);
			// Compiler\\TemplateParser.g3:135:4: LDELIM ! 'if' ^ '(' ! conditional ')' ! RDELIM ! template ( elseifstat )* ( elsestat )? ( INDENT !)? LDELIM ! 'endif' ! RDELIM !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(135, 10);
			LDELIM47=(CommonToken)Match(input,LDELIM,Follow._LDELIM_in_ifstatbody496); 
			DebugLocation(135, 16);
			string_literal48=(CommonToken)Match(input,IF,Follow._IF_in_ifstatbody499); 
			string_literal48_tree = (CommonTree)adaptor.Create(string_literal48);
			root_0 = (CommonTree)adaptor.BecomeRoot(string_literal48_tree, root_0);
			DebugLocation(135, 21);
			char_literal49=(CommonToken)Match(input,LPAREN,Follow._LPAREN_in_ifstatbody502); 
			DebugLocation(135, 23);
			PushFollow(Follow._conditional_in_ifstatbody505);
			conditional50=conditional();
			PopFollow();

			adaptor.AddChild(root_0, conditional50.Tree);
			DebugLocation(135, 38);
			char_literal51=(CommonToken)Match(input,RPAREN,Follow._RPAREN_in_ifstatbody507); 
			DebugLocation(135, 46);
			RDELIM52=(CommonToken)Match(input,RDELIM,Follow._RDELIM_in_ifstatbody510); 
			DebugLocation(135, 48);
			retval.indented = (input.LA(1) != NEWLINE);
			DebugLocation(136, 4);
			PushFollow(Follow._template_in_ifstatbody518);
			template53=template();
			PopFollow();

			adaptor.AddChild(root_0, template53.Tree);
			DebugLocation(137, 4);
			// Compiler\\TemplateParser.g3:137:4: ( elseifstat )*
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, false);
				int LA15_1 = input.LA(1);

				if ((LA15_1==INDENT))
				{
					int LA15_2 = input.LA(2);

					if ((LA15_2==LDELIM))
					{
						int LA15_3 = input.LA(3);

						if ((LA15_3==ELSEIF))
						{
							alt15 = 1;
						}


					}


				}
				else if ((LA15_1==LDELIM))
				{
					int LA15_2 = input.LA(2);

					if ((LA15_2==ELSEIF))
					{
						alt15 = 1;
					}


				}


				} finally { DebugExitDecision(15); }
				switch ( alt15 )
				{
				case 1:
					DebugEnterAlt(1);
					// Compiler\\TemplateParser.g3:137:4: elseifstat
					{
					DebugLocation(137, 4);
					PushFollow(Follow._elseifstat_in_ifstatbody523);
					elseifstat54=elseifstat();
					PopFollow();

					adaptor.AddChild(root_0, elseifstat54.Tree);

					}
					break;

				default:
					goto loop15;
				}
			}

			loop15:
				;

			} finally { DebugExitSubRule(15); }

			DebugLocation(138, 4);
			// Compiler\\TemplateParser.g3:138:4: ( elsestat )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_1 = input.LA(1);

			if ((LA16_1==INDENT))
			{
				int LA16_2 = input.LA(2);

				if ((LA16_2==LDELIM))
				{
					int LA16_3 = input.LA(3);

					if ((LA16_3==ELSE))
					{
						alt16 = 1;
					}
				}
			}
			else if ((LA16_1==LDELIM))
			{
				int LA16_2 = input.LA(2);

				if ((LA16_2==ELSE))
				{
					alt16 = 1;
				}
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\TemplateParser.g3:138:4: elsestat
				{
				DebugLocation(138, 4);
				PushFollow(Follow._elsestat_in_ifstatbody529);
				elsestat55=elsestat();
				PopFollow();

				adaptor.AddChild(root_0, elsestat55.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(139, 10);
			// Compiler\\TemplateParser.g3:139:10: ( INDENT !)?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_1 = input.LA(1);

			if ((LA17_1==INDENT))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\TemplateParser.g3:139:10: INDENT !
				{
				DebugLocation(139, 10);
				INDENT56=(CommonToken)Match(input,INDENT,Follow._INDENT_in_ifstatbody535); 

				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(139, 19);
			LDELIM57=(CommonToken)Match(input,LDELIM,Follow._LDELIM_in_ifstatbody539); 
			DebugLocation(139, 28);
			string_literal58=(CommonToken)Match(input,ENDIF,Follow._ENDIF_in_ifstatbody542); 
			DebugLocation(140, 9);
			RDELIM59=(CommonToken)Match(input,RDELIM,Follow._RDELIM_in_ifstatbody547); 

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		catch (RecognitionException re) { re.PreserveStackTrace(); throw; }

		finally
		{
			TraceOut("ifstatbody", 14);
			LeaveRule("ifstatbody", 14);
			LeaveRule_ifstatbody();
		}
		DebugLocation(141, 1);
		} finally { DebugExitRule(GrammarFileName, "ifstatbody"); }
		return retval;

	}
	// $ANTLR end "ifstatbody"

	partial void EnterRule_elseifstat();
	partial void LeaveRule_elseifstat();
	// $ANTLR start "elseifstat"
	// Compiler\\TemplateParser.g3:143:1: elseifstat : ( INDENT !)? LDELIM ! 'elseif' ^ '(' ! conditional ')' ! RDELIM ! template ;
	[GrammarRule("elseifstat")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> elseifstat()
	{
		EnterRule_elseifstat();
		EnterRule("elseifstat", 15);
		TraceIn("elseifstat", 15);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INDENT60 = default(CommonToken);
		CommonToken LDELIM61 = default(CommonToken);
		CommonToken string_literal62 = default(CommonToken);
		CommonToken char_literal63 = default(CommonToken);
		CommonToken char_literal65 = default(CommonToken);
		CommonToken RDELIM66 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> conditional64 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> template67 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INDENT60_tree = default(CommonTree);
		CommonTree LDELIM61_tree = default(CommonTree);
		CommonTree string_literal62_tree = default(CommonTree);
		CommonTree char_literal63_tree = default(CommonTree);
		CommonTree char_literal65_tree = default(CommonTree);
		CommonTree RDELIM66_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "elseifstat");
		DebugLocation(143, 1);
		try
		{
			// Compiler\\TemplateParser.g3:144:2: ( ( INDENT !)? LDELIM ! 'elseif' ^ '(' ! conditional ')' ! RDELIM ! template )
			DebugEnterAlt(1);
			// Compiler\\TemplateParser.g3:144:4: ( INDENT !)? LDELIM ! 'elseif' ^ '(' ! conditional ')' ! RDELIM ! template
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(144, 10);
			// Compiler\\TemplateParser.g3:144:10: ( INDENT !)?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_1 = input.LA(1);

			if ((LA18_1==INDENT))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\TemplateParser.g3:144:10: INDENT !
				{
				DebugLocation(144, 10);
				INDENT60=(CommonToken)Match(input,INDENT,Follow._INDENT_in_elseifstat559); 

				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(144, 19);
			LDELIM61=(CommonToken)Match(input,LDELIM,Follow._LDELIM_in_elseifstat563); 
			DebugLocation(144, 29);
			string_literal62=(CommonToken)Match(input,ELSEIF,Follow._ELSEIF_in_elseifstat566); 
			string_literal62_tree = (CommonTree)adaptor.Create(string_literal62);
			root_0 = (CommonTree)adaptor.BecomeRoot(string_literal62_tree, root_0);
			DebugLocation(144, 34);
			char_literal63=(CommonToken)Match(input,LPAREN,Follow._LPAREN_in_elseifstat569); 
			DebugLocation(144, 36);
			PushFollow(Follow._conditional_in_elseifstat572);
			conditional64=conditional();
			PopFollow();

			adaptor.AddChild(root_0, conditional64.Tree);
			DebugLocation(144, 51);
			char_literal65=(CommonToken)Match(input,RPAREN,Follow._RPAREN_in_elseifstat574); 
			DebugLocation(144, 59);
			RDELIM66=(CommonToken)Match(input,RDELIM,Follow._RDELIM_in_elseifstat577); 
			DebugLocation(144, 61);
			PushFollow(Follow._template_in_elseifstat580);
			template67=template();
			PopFollow();

			adaptor.AddChild(root_0, template67.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		catch (RecognitionException re) { re.PreserveStackTrace(); throw; }

		finally
		{
			TraceOut("elseifstat", 15);
			LeaveRule("elseifstat", 15);
			LeaveRule_elseifstat();
		}
		DebugLocation(145, 1);
		} finally { DebugExitRule(GrammarFileName, "elseifstat"); }
		return retval;

	}
	// $ANTLR end "elseifstat"

	partial void EnterRule_elsestat();
	partial void LeaveRule_elsestat();
	// $ANTLR start "elsestat"
	// Compiler\\TemplateParser.g3:147:1: elsestat : ( INDENT !)? LDELIM ! 'else' ^ RDELIM ! template ;
	[GrammarRule("elsestat")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> elsestat()
	{
		EnterRule_elsestat();
		EnterRule("elsestat", 16);
		TraceIn("elsestat", 16);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INDENT68 = default(CommonToken);
		CommonToken LDELIM69 = default(CommonToken);
		CommonToken string_literal70 = default(CommonToken);
		CommonToken RDELIM71 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> template72 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INDENT68_tree = default(CommonTree);
		CommonTree LDELIM69_tree = default(CommonTree);
		CommonTree string_literal70_tree = default(CommonTree);
		CommonTree RDELIM71_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "elsestat");
		DebugLocation(147, 1);
		try
		{
			// Compiler\\TemplateParser.g3:148:2: ( ( INDENT !)? LDELIM ! 'else' ^ RDELIM ! template )
			DebugEnterAlt(1);
			// Compiler\\TemplateParser.g3:148:4: ( INDENT !)? LDELIM ! 'else' ^ RDELIM ! template
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(148, 10);
			// Compiler\\TemplateParser.g3:148:10: ( INDENT !)?
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_1 = input.LA(1);

			if ((LA19_1==INDENT))
			{
				alt19 = 1;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\TemplateParser.g3:148:10: INDENT !
				{
				DebugLocation(148, 10);
				INDENT68=(CommonToken)Match(input,INDENT,Follow._INDENT_in_elsestat591); 

				}
				break;

			}
			} finally { DebugExitSubRule(19); }

			DebugLocation(148, 19);
			LDELIM69=(CommonToken)Match(input,LDELIM,Follow._LDELIM_in_elsestat595); 
			DebugLocation(148, 27);
			string_literal70=(CommonToken)Match(input,ELSE,Follow._ELSE_in_elsestat598); 
			string_literal70_tree = (CommonTree)adaptor.Create(string_literal70);
			root_0 = (CommonTree)adaptor.BecomeRoot(string_literal70_tree, root_0);
			DebugLocation(148, 35);
			RDELIM71=(CommonToken)Match(input,RDELIM,Follow._RDELIM_in_elsestat601); 
			DebugLocation(148, 37);
			PushFollow(Follow._template_in_elsestat604);
			template72=template();
			PopFollow();

			adaptor.AddChild(root_0, template72.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		catch (RecognitionException re) { re.PreserveStackTrace(); throw; }

		finally
		{
			TraceOut("elsestat", 16);
			LeaveRule("elsestat", 16);
			LeaveRule_elsestat();
		}
		DebugLocation(149, 1);
		} finally { DebugExitRule(GrammarFileName, "elsestat"); }
		return retval;

	}
	// $ANTLR end "elsestat"

	protected sealed partial class conditional_scope
	{
		public bool inside;

		public conditional_scope(TemplateParser grammar) { OnCreated(grammar); }
		partial void OnCreated(TemplateParser grammar);
	}
	partial void conditional_scopeInit( conditional_scope scope );
	partial void conditional_scopeAfter( conditional_scope scope );
	protected readonly ListStack<conditional_scope> conditional_stack = new ListStack<conditional_scope>();

	partial void EnterRule_conditional();
	partial void LeaveRule_conditional();
	// $ANTLR start "conditional"
	// Compiler\\TemplateParser.g3:151:1: conditional : andConditional ( '||' ^ andConditional )* ;
	[GrammarRule("conditional")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> conditional()
	{
		EnterRule_conditional();
		EnterRule("conditional", 17);
		TraceIn("conditional", 17);
		conditional_stack.Push(new conditional_scope(this));conditional_scopeInit(conditional_stack.Peek());
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal74 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> andConditional73 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> andConditional75 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal74_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "conditional");
		DebugLocation(151, 1);
		try
		{
			// Compiler\\TemplateParser.g3:155:2: ( andConditional ( '||' ^ andConditional )* )
			DebugEnterAlt(1);
			// Compiler\\TemplateParser.g3:155:4: andConditional ( '||' ^ andConditional )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(155, 4);
			PushFollow(Follow._andConditional_in_conditional619);
			andConditional73=andConditional();
			PopFollow();

			adaptor.AddChild(root_0, andConditional73.Tree);
			DebugLocation(155, 19);
			// Compiler\\TemplateParser.g3:155:19: ( '||' ^ andConditional )*
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=2;
				try { DebugEnterDecision(20, false);
				int LA20_1 = input.LA(1);

				if ((LA20_1==OR))
				{
					alt20 = 1;
				}


				} finally { DebugExitDecision(20); }
				switch ( alt20 )
				{
				case 1:
					DebugEnterAlt(1);
					// Compiler\\TemplateParser.g3:155:21: '||' ^ andConditional
					{
					DebugLocation(155, 25);
					string_literal74=(CommonToken)Match(input,OR,Follow._OR_in_conditional623); 
					string_literal74_tree = (CommonTree)adaptor.Create(string_literal74);
					root_0 = (CommonTree)adaptor.BecomeRoot(string_literal74_tree, root_0);
					DebugLocation(155, 27);
					PushFollow(Follow._andConditional_in_conditional626);
					andConditional75=andConditional();
					PopFollow();

					adaptor.AddChild(root_0, andConditional75.Tree);

					}
					break;

				default:
					goto loop20;
				}
			}

			loop20:
				;

			} finally { DebugExitSubRule(20); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		catch (RecognitionException re) { re.PreserveStackTrace(); throw; }

		finally
		{
			TraceOut("conditional", 17);
			LeaveRule("conditional", 17);
			LeaveRule_conditional();
			conditional_scopeAfter(conditional_stack.Peek());conditional_stack.Pop();
		}
		DebugLocation(156, 1);
		} finally { DebugExitRule(GrammarFileName, "conditional"); }
		return retval;

	}
	// $ANTLR end "conditional"

	partial void EnterRule_andConditional();
	partial void LeaveRule_andConditional();
	// $ANTLR start "andConditional"
	// Compiler\\TemplateParser.g3:158:1: andConditional : notConditional ( '&&' ^ notConditional )* ;
	[GrammarRule("andConditional")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> andConditional()
	{
		EnterRule_andConditional();
		EnterRule("andConditional", 18);
		TraceIn("andConditional", 18);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal77 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> notConditional76 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> notConditional78 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal77_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "andConditional");
		DebugLocation(158, 58);
		try
		{
			// Compiler\\TemplateParser.g3:158:16: ( notConditional ( '&&' ^ notConditional )* )
			DebugEnterAlt(1);
			// Compiler\\TemplateParser.g3:158:18: notConditional ( '&&' ^ notConditional )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(158, 18);
			PushFollow(Follow._notConditional_in_andConditional639);
			notConditional76=notConditional();
			PopFollow();

			adaptor.AddChild(root_0, notConditional76.Tree);
			DebugLocation(158, 33);
			// Compiler\\TemplateParser.g3:158:33: ( '&&' ^ notConditional )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_1 = input.LA(1);

				if ((LA21_1==AND))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// Compiler\\TemplateParser.g3:158:35: '&&' ^ notConditional
					{
					DebugLocation(158, 39);
					string_literal77=(CommonToken)Match(input,AND,Follow._AND_in_andConditional643); 
					string_literal77_tree = (CommonTree)adaptor.Create(string_literal77);
					root_0 = (CommonTree)adaptor.BecomeRoot(string_literal77_tree, root_0);
					DebugLocation(158, 41);
					PushFollow(Follow._notConditional_in_andConditional646);
					notConditional78=notConditional();
					PopFollow();

					adaptor.AddChild(root_0, notConditional78.Tree);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		catch (RecognitionException re) { re.PreserveStackTrace(); throw; }

		finally
		{
			TraceOut("andConditional", 18);
			LeaveRule("andConditional", 18);
			LeaveRule_andConditional();
		}
		DebugLocation(158, 58);
		} finally { DebugExitRule(GrammarFileName, "andConditional"); }
		return retval;

	}
	// $ANTLR end "andConditional"

	partial void EnterRule_notConditional();
	partial void LeaveRule_notConditional();
	// $ANTLR start "notConditional"
	// Compiler\\TemplateParser.g3:160:1: notConditional : ( '!' ^ notConditional | memberExpr );
	[GrammarRule("notConditional")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> notConditional()
	{
		EnterRule_notConditional();
		EnterRule("notConditional", 19);
		TraceIn("notConditional", 19);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal79 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> notConditional80 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> memberExpr81 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal79_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "notConditional");
		DebugLocation(160, 1);
		try
		{
			// Compiler\\TemplateParser.g3:161:2: ( '!' ^ notConditional | memberExpr )
			int alt22=2;
			try { DebugEnterDecision(22, false);
			int LA22_1 = input.LA(1);

			if ((LA22_1==BANG))
			{
				alt22 = 1;
			}
			else if ((LA22_1==SUPER||LA22_1==LPAREN||LA22_1==LBRACK||LA22_1==LCURLY||(LA22_1>=ID && LA22_1<=STRING)||LA22_1==AT||(LA22_1>=TRUE && LA22_1<=FALSE)))
			{
				alt22 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 22, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\TemplateParser.g3:161:4: '!' ^ notConditional
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(161, 7);
				char_literal79=(CommonToken)Match(input,BANG,Follow._BANG_in_notConditional659); 
				char_literal79_tree = (CommonTree)adaptor.Create(char_literal79);
				root_0 = (CommonTree)adaptor.BecomeRoot(char_literal79_tree, root_0);
				DebugLocation(161, 9);
				PushFollow(Follow._notConditional_in_notConditional662);
				notConditional80=notConditional();
				PopFollow();

				adaptor.AddChild(root_0, notConditional80.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Compiler\\TemplateParser.g3:162:4: memberExpr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(162, 4);
				PushFollow(Follow._memberExpr_in_notConditional667);
				memberExpr81=memberExpr();
				PopFollow();

				adaptor.AddChild(root_0, memberExpr81.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		catch (RecognitionException re) { re.PreserveStackTrace(); throw; }

		finally
		{
			TraceOut("notConditional", 19);
			LeaveRule("notConditional", 19);
			LeaveRule_notConditional();
		}
		DebugLocation(163, 1);
		} finally { DebugExitRule(GrammarFileName, "notConditional"); }
		return retval;

	}
	// $ANTLR end "notConditional"

	partial void EnterRule_exprOptions();
	partial void LeaveRule_exprOptions();
	// $ANTLR start "exprOptions"
	// Compiler\\TemplateParser.g3:165:1: exprOptions : ';' ^ option ( ',' ! option )* ;
	[GrammarRule("exprOptions")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> exprOptions()
	{
		EnterRule_exprOptions();
		EnterRule("exprOptions", 20);
		TraceIn("exprOptions", 20);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal82 = default(CommonToken);
		CommonToken char_literal84 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> option83 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> option85 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal82_tree = default(CommonTree);
		CommonTree char_literal84_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "exprOptions");
		DebugLocation(165, 40);
		try
		{
			// Compiler\\TemplateParser.g3:166:2: ( ';' ^ option ( ',' ! option )* )
			DebugEnterAlt(1);
			// Compiler\\TemplateParser.g3:166:4: ';' ^ option ( ',' ! option )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(166, 16);
			char_literal82=(CommonToken)Match(input,SEMI,Follow._SEMI_in_exprOptions678); 
			char_literal82_tree = (CommonTree)adaptor.Create(OPTIONS,char_literal82);
			root_0 = (CommonTree)adaptor.BecomeRoot(char_literal82_tree, root_0);
			DebugLocation(166, 18);
			PushFollow(Follow._option_in_exprOptions684);
			option83=option();
			PopFollow();

			adaptor.AddChild(root_0, option83.Tree);
			DebugLocation(166, 25);
			// Compiler\\TemplateParser.g3:166:25: ( ',' ! option )*
			try { DebugEnterSubRule(23);
			while (true)
			{
				int alt23=2;
				try { DebugEnterDecision(23, false);
				int LA23_1 = input.LA(1);

				if ((LA23_1==COMMA))
				{
					alt23 = 1;
				}


				} finally { DebugExitDecision(23); }
				switch ( alt23 )
				{
				case 1:
					DebugEnterAlt(1);
					// Compiler\\TemplateParser.g3:166:27: ',' ! option
					{
					DebugLocation(166, 30);
					char_literal84=(CommonToken)Match(input,COMMA,Follow._COMMA_in_exprOptions688); 
					DebugLocation(166, 32);
					PushFollow(Follow._option_in_exprOptions691);
					option85=option();
					PopFollow();

					adaptor.AddChild(root_0, option85.Tree);

					}
					break;

				default:
					goto loop23;
				}
			}

			loop23:
				;

			} finally { DebugExitSubRule(23); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		catch (RecognitionException re) { re.PreserveStackTrace(); throw; }

		finally
		{
			TraceOut("exprOptions", 20);
			LeaveRule("exprOptions", 20);
			LeaveRule_exprOptions();
		}
		DebugLocation(166, 40);
		} finally { DebugExitRule(GrammarFileName, "exprOptions"); }
		return retval;

	}
	// $ANTLR end "exprOptions"

	partial void EnterRule_option();
	partial void LeaveRule_option();
	// $ANTLR start "option"
	// Compiler\\TemplateParser.g3:168:1: option : ID ( '=' exprNoComma -> {validOption}? ^( '=' ID exprNoComma ) ->| -> {validOption&&defVal!=null}? ^( EQUALS[\"=\"] ID STRING[$ID,'\"'+defVal+'\"'] ) ->) ;
	[GrammarRule("option")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> option()
	{
		EnterRule_option();
		EnterRule("option", 21);
		TraceIn("option", 21);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID86 = default(CommonToken);
		CommonToken char_literal87 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> exprNoComma88 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID86_tree = default(CommonTree);
		CommonTree char_literal87_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleSubtreeStream stream_exprNoComma=new RewriteRuleSubtreeStream(adaptor,"rule exprNoComma");

			string id = input.LT(1).Text;
			string defVal;
			TemplateCompiler.defaultOptionValues.TryGetValue(id, out defVal);
			bool validOption = TemplateCompiler.supportedOptions.ContainsKey(id);

		try { DebugEnterRule(GrammarFileName, "option");
		DebugLocation(168, 1);
		try
		{
			// Compiler\\TemplateParser.g3:175:2: ( ID ( '=' exprNoComma -> {validOption}? ^( '=' ID exprNoComma ) ->| -> {validOption&&defVal!=null}? ^( EQUALS[\"=\"] ID STRING[$ID,'\"'+defVal+'\"'] ) ->) )
			DebugEnterAlt(1);
			// Compiler\\TemplateParser.g3:175:4: ID ( '=' exprNoComma -> {validOption}? ^( '=' ID exprNoComma ) ->| -> {validOption&&defVal!=null}? ^( EQUALS[\"=\"] ID STRING[$ID,'\"'+defVal+'\"'] ) ->)
			{
			DebugLocation(175, 4);
			ID86=(CommonToken)Match(input,ID,Follow._ID_in_option708);  
			stream_ID.Add(ID86);

			DebugLocation(176, 3);

					if ( !validOption ) {
			            errMgr.CompiletimeError(ErrorType.NO_SUCH_OPTION, templateToken, ID86, (ID86!=null?ID86.Text:default(string)));
					}
					
			DebugLocation(181, 3);
			// Compiler\\TemplateParser.g3:181:3: ( '=' exprNoComma -> {validOption}? ^( '=' ID exprNoComma ) ->| -> {validOption&&defVal!=null}? ^( EQUALS[\"=\"] ID STRING[$ID,'\"'+defVal+'\"'] ) ->)
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_1 = input.LA(1);

			if ((LA24_1==EQUALS))
			{
				alt24 = 1;
			}
			else if ((LA24_1==COMMA||LA24_1==RDELIM))
			{
				alt24 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 24, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\TemplateParser.g3:181:5: '=' exprNoComma
				{
				DebugLocation(181, 5);
				char_literal87=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_option718);  
				stream_EQUALS.Add(char_literal87);

				DebugLocation(181, 9);
				PushFollow(Follow._exprNoComma_in_option720);
				exprNoComma88=exprNoComma();
				PopFollow();

				stream_exprNoComma.Add(exprNoComma88.Tree);


				{
				// AST REWRITE
				// elements: EQUALS, ID, exprNoComma
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 181:26: -> {validOption}? ^( '=' ID exprNoComma )
				if (validOption)
				{
					DebugLocation(181, 44);
					// Compiler\\TemplateParser.g3:181:44: ^( '=' ID exprNoComma )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(181, 46);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_EQUALS.NextNode(), root_1);

					DebugLocation(181, 50);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(181, 53);
					adaptor.AddChild(root_1, stream_exprNoComma.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 182:13: ->
				{
					DebugLocation(183, 3);
					root_0 = null;
				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Compiler\\TemplateParser.g3:183:5: 
				{
				DebugLocation(183, 5);

							if ( defVal==null ) {
								errMgr.CompiletimeError(ErrorType.NO_DEFAULT_VALUE, templateToken, ID86);
							}
							


				{
				// AST REWRITE
				// elements: ID
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 188:13: -> {validOption&&defVal!=null}? ^( EQUALS[\"=\"] ID STRING[$ID,'\"'+defVal+'\"'] )
				if (validOption&&defVal!=null)
				{
					DebugLocation(189, 16);
					// Compiler\\TemplateParser.g3:189:16: ^( EQUALS[\"=\"] ID STRING[$ID,'\"'+defVal+'\"'] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(189, 18);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EQUALS, "="), root_1);

					DebugLocation(189, 30);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(189, 33);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(STRING, ID86, '"'+defVal+'"'));

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 190:13: ->
				{
					DebugLocation(191, 3);
					root_0 = null;
				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(24); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		catch (RecognitionException re) { re.PreserveStackTrace(); throw; }

		finally
		{
			TraceOut("option", 21);
			LeaveRule("option", 21);
			LeaveRule_option();
		}
		DebugLocation(192, 1);
		} finally { DebugExitRule(GrammarFileName, "option"); }
		return retval;

	}
	// $ANTLR end "option"

	partial void EnterRule_exprNoComma();
	partial void LeaveRule_exprNoComma();
	// $ANTLR start "exprNoComma"
	// Compiler\\TemplateParser.g3:194:1: exprNoComma : memberExpr ( ':' ^ mapTemplateRef )? ;
	[GrammarRule("exprNoComma")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> exprNoComma()
	{
		EnterRule_exprNoComma();
		EnterRule("exprNoComma", 22);
		TraceIn("exprNoComma", 22);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal90 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> memberExpr89 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mapTemplateRef91 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal90_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "exprNoComma");
		DebugLocation(194, 1);
		try
		{
			// Compiler\\TemplateParser.g3:195:2: ( memberExpr ( ':' ^ mapTemplateRef )? )
			DebugEnterAlt(1);
			// Compiler\\TemplateParser.g3:195:4: memberExpr ( ':' ^ mapTemplateRef )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(195, 4);
			PushFollow(Follow._memberExpr_in_exprNoComma827);
			memberExpr89=memberExpr();
			PopFollow();

			adaptor.AddChild(root_0, memberExpr89.Tree);
			DebugLocation(196, 3);
			// Compiler\\TemplateParser.g3:196:3: ( ':' ^ mapTemplateRef )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_1 = input.LA(1);

			if ((LA25_1==COLON))
			{
				alt25 = 1;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\TemplateParser.g3:196:4: ':' ^ mapTemplateRef
				{
				DebugLocation(196, 12);
				char_literal90=(CommonToken)Match(input,COLON,Follow._COLON_in_exprNoComma832); 
				char_literal90_tree = (CommonTree)adaptor.Create(MAP,char_literal90);
				root_0 = (CommonTree)adaptor.BecomeRoot(char_literal90_tree, root_0);
				DebugLocation(196, 14);
				PushFollow(Follow._mapTemplateRef_in_exprNoComma838);
				mapTemplateRef91=mapTemplateRef();
				PopFollow();

				adaptor.AddChild(root_0, mapTemplateRef91.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(25); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		catch (RecognitionException re) { re.PreserveStackTrace(); throw; }

		finally
		{
			TraceOut("exprNoComma", 22);
			LeaveRule("exprNoComma", 22);
			LeaveRule_exprNoComma();
		}
		DebugLocation(197, 1);
		} finally { DebugExitRule(GrammarFileName, "exprNoComma"); }
		return retval;

	}
	// $ANTLR end "exprNoComma"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();
	// $ANTLR start "expr"
	// Compiler\\TemplateParser.g3:199:1: expr : mapExpr ;
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 23);
		TraceIn("expr", 23);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> mapExpr92 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(199, 15);
		try
		{
			// Compiler\\TemplateParser.g3:199:6: ( mapExpr )
			DebugEnterAlt(1);
			// Compiler\\TemplateParser.g3:199:8: mapExpr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(199, 8);
			PushFollow(Follow._mapExpr_in_expr850);
			mapExpr92=mapExpr();
			PopFollow();

			adaptor.AddChild(root_0, mapExpr92.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		catch (RecognitionException re) { re.PreserveStackTrace(); throw; }

		finally
		{
			TraceOut("expr", 23);
			LeaveRule("expr", 23);
			LeaveRule_expr();
		}
		DebugLocation(199, 15);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_mapExpr();
	partial void LeaveRule_mapExpr();
	// $ANTLR start "mapExpr"
	// Compiler\\TemplateParser.g3:203:1: mapExpr : memberExpr ( (c= ',' ^ memberExpr (c= ',' ! memberExpr )* ) ':' ^ mapTemplateRef )? ( ':' ^ mapTemplateRef ({...}? => ',' ! mapTemplateRef )* )* ;
	[GrammarRule("mapExpr")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> mapExpr()
	{
		EnterRule_mapExpr();
		EnterRule("mapExpr", 24);
		TraceIn("mapExpr", 24);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken c = default(CommonToken);
		CommonToken char_literal96 = default(CommonToken);
		CommonToken char_literal98 = default(CommonToken);
		CommonToken char_literal100 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> memberExpr93 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> memberExpr94 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> memberExpr95 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mapTemplateRef97 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mapTemplateRef99 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mapTemplateRef101 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree c_tree = default(CommonTree);
		CommonTree char_literal96_tree = default(CommonTree);
		CommonTree char_literal98_tree = default(CommonTree);
		CommonTree char_literal100_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "mapExpr");
		DebugLocation(203, 1);
		try
		{
			// Compiler\\TemplateParser.g3:204:2: ( memberExpr ( (c= ',' ^ memberExpr (c= ',' ! memberExpr )* ) ':' ^ mapTemplateRef )? ( ':' ^ mapTemplateRef ({...}? => ',' ! mapTemplateRef )* )* )
			DebugEnterAlt(1);
			// Compiler\\TemplateParser.g3:204:4: memberExpr ( (c= ',' ^ memberExpr (c= ',' ! memberExpr )* ) ':' ^ mapTemplateRef )? ( ':' ^ mapTemplateRef ({...}? => ',' ! mapTemplateRef )* )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(204, 4);
			PushFollow(Follow._memberExpr_in_mapExpr862);
			memberExpr93=memberExpr();
			PopFollow();

			adaptor.AddChild(root_0, memberExpr93.Tree);
			DebugLocation(205, 3);
			// Compiler\\TemplateParser.g3:205:3: ( (c= ',' ^ memberExpr (c= ',' ! memberExpr )* ) ':' ^ mapTemplateRef )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_1 = input.LA(1);

			if ((LA27_1==COMMA))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\TemplateParser.g3:205:4: (c= ',' ^ memberExpr (c= ',' ! memberExpr )* ) ':' ^ mapTemplateRef
				{
				DebugLocation(205, 4);
				// Compiler\\TemplateParser.g3:205:4: (c= ',' ^ memberExpr (c= ',' ! memberExpr )* )
				DebugEnterAlt(1);
				// Compiler\\TemplateParser.g3:205:5: c= ',' ^ memberExpr (c= ',' ! memberExpr )*
				{
				DebugLocation(205, 6);
				c=(CommonToken)Match(input,COMMA,Follow._COMMA_in_mapExpr870); 
				c_tree = (CommonTree)adaptor.Create(ELEMENTS,c);
				root_0 = (CommonTree)adaptor.BecomeRoot(c_tree, root_0);
				DebugLocation(205, 22);
				PushFollow(Follow._memberExpr_in_mapExpr876);
				memberExpr94=memberExpr();
				PopFollow();

				adaptor.AddChild(root_0, memberExpr94.Tree);
				DebugLocation(205, 33);
				// Compiler\\TemplateParser.g3:205:33: (c= ',' ! memberExpr )*
				try { DebugEnterSubRule(26);
				while (true)
				{
					int alt26=2;
					try { DebugEnterDecision(26, false);
					int LA26_1 = input.LA(1);

					if ((LA26_1==COMMA))
					{
						alt26 = 1;
					}


					} finally { DebugExitDecision(26); }
					switch ( alt26 )
					{
					case 1:
						DebugEnterAlt(1);
						// Compiler\\TemplateParser.g3:205:34: c= ',' ! memberExpr
						{
						DebugLocation(205, 35);
						c=(CommonToken)Match(input,COMMA,Follow._COMMA_in_mapExpr881); 
						DebugLocation(205, 41);
						PushFollow(Follow._memberExpr_in_mapExpr884);
						memberExpr95=memberExpr();
						PopFollow();

						adaptor.AddChild(root_0, memberExpr95.Tree);

						}
						break;

					default:
						goto loop26;
					}
				}

				loop26:
					;

				} finally { DebugExitSubRule(26); }


				}

				DebugLocation(205, 63);
				char_literal96=(CommonToken)Match(input,COLON,Follow._COLON_in_mapExpr889); 
				char_literal96_tree = (CommonTree)adaptor.Create(ZIP,char_literal96);
				root_0 = (CommonTree)adaptor.BecomeRoot(char_literal96_tree, root_0);
				DebugLocation(205, 65);
				PushFollow(Follow._mapTemplateRef_in_mapExpr895);
				mapTemplateRef97=mapTemplateRef();
				PopFollow();

				adaptor.AddChild(root_0, mapTemplateRef97.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(27); }

			DebugLocation(206, 3);
			// Compiler\\TemplateParser.g3:206:3: ( ':' ^ mapTemplateRef ({...}? => ',' ! mapTemplateRef )* )*
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_1 = input.LA(1);

				if ((LA29_1==COLON))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch ( alt29 )
				{
				case 1:
					DebugEnterAlt(1);
					// Compiler\\TemplateParser.g3:206:4: ':' ^ mapTemplateRef ({...}? => ',' ! mapTemplateRef )*
					{
					DebugLocation(206, 12);
					char_literal98=(CommonToken)Match(input,COLON,Follow._COLON_in_mapExpr902); 
					char_literal98_tree = (CommonTree)adaptor.Create(MAP,char_literal98);
					root_0 = (CommonTree)adaptor.BecomeRoot(char_literal98_tree, root_0);
					DebugLocation(206, 14);
					PushFollow(Follow._mapTemplateRef_in_mapExpr908);
					mapTemplateRef99=mapTemplateRef();
					PopFollow();

					adaptor.AddChild(root_0, mapTemplateRef99.Tree);
					DebugLocation(206, 29);
					// Compiler\\TemplateParser.g3:206:29: ({...}? => ',' ! mapTemplateRef )*
					try { DebugEnterSubRule(28);
					while (true)
					{
						int alt28=2;
						try { DebugEnterDecision(28, false);
						int LA28_1 = input.LA(1);

						if ((LA28_1==COMMA) && ((c==null)))
						{
							alt28 = 1;
						}


						} finally { DebugExitDecision(28); }
						switch ( alt28 )
						{
						case 1:
							DebugEnterAlt(1);
							// Compiler\\TemplateParser.g3:206:30: {...}? => ',' ! mapTemplateRef
							{
							DebugLocation(206, 30);
							if (!((c==null)))
							{
								throw new FailedPredicateException(input, "mapExpr", "$c==null");
							}
							DebugLocation(206, 48);
							char_literal100=(CommonToken)Match(input,COMMA,Follow._COMMA_in_mapExpr915); 
							DebugLocation(206, 50);
							PushFollow(Follow._mapTemplateRef_in_mapExpr918);
							mapTemplateRef101=mapTemplateRef();
							PopFollow();

							adaptor.AddChild(root_0, mapTemplateRef101.Tree);

							}
							break;

						default:
							goto loop28;
						}
					}

					loop28:
						;

					} finally { DebugExitSubRule(28); }


					}
					break;

				default:
					goto loop29;
				}
			}

			loop29:
				;

			} finally { DebugExitSubRule(29); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		catch (RecognitionException re) { re.PreserveStackTrace(); throw; }

		finally
		{
			TraceOut("mapExpr", 24);
			LeaveRule("mapExpr", 24);
			LeaveRule_mapExpr();
		}
		DebugLocation(207, 1);
		} finally { DebugExitRule(GrammarFileName, "mapExpr"); }
		return retval;

	}
	// $ANTLR end "mapExpr"

	partial void EnterRule_mapTemplateRef();
	partial void LeaveRule_mapTemplateRef();
	// $ANTLR start "mapTemplateRef"
	// Compiler\\TemplateParser.g3:214:1: mapTemplateRef : ( ID '(' ^ args ')' !| subtemplate | '(' ^ mapExpr ')' ! '(' ! ( argExprList )? ')' !);
	[GrammarRule("mapTemplateRef")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> mapTemplateRef()
	{
		EnterRule_mapTemplateRef();
		EnterRule("mapTemplateRef", 25);
		TraceIn("mapTemplateRef", 25);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID102 = default(CommonToken);
		CommonToken char_literal103 = default(CommonToken);
		CommonToken char_literal105 = default(CommonToken);
		CommonToken char_literal107 = default(CommonToken);
		CommonToken char_literal109 = default(CommonToken);
		CommonToken char_literal110 = default(CommonToken);
		CommonToken char_literal112 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> args104 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> subtemplate106 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mapExpr108 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> argExprList111 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID102_tree = default(CommonTree);
		CommonTree char_literal103_tree = default(CommonTree);
		CommonTree char_literal105_tree = default(CommonTree);
		CommonTree char_literal107_tree = default(CommonTree);
		CommonTree char_literal109_tree = default(CommonTree);
		CommonTree char_literal110_tree = default(CommonTree);
		CommonTree char_literal112_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "mapTemplateRef");
		DebugLocation(214, 1);
		try
		{
			// Compiler\\TemplateParser.g3:215:2: ( ID '(' ^ args ')' !| subtemplate | '(' ^ mapExpr ')' ! '(' ! ( argExprList )? ')' !)
			int alt31=3;
			try { DebugEnterDecision(31, false);
			switch (input.LA(1))
			{
			case ID:
				{
				alt31 = 1;
				}
				break;
			case LCURLY:
				{
				alt31 = 2;
				}
				break;
			case LPAREN:
				{
				alt31 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 31, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\TemplateParser.g3:215:4: ID '(' ^ args ')' !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(215, 4);
				ID102=(CommonToken)Match(input,ID,Follow._ID_in_mapTemplateRef935); 
				ID102_tree = (CommonTree)adaptor.Create(ID102);
				adaptor.AddChild(root_0, ID102_tree);
				DebugLocation(215, 19);
				char_literal103=(CommonToken)Match(input,LPAREN,Follow._LPAREN_in_mapTemplateRef937); 
				char_literal103_tree = (CommonTree)adaptor.Create(INCLUDE,char_literal103);
				root_0 = (CommonTree)adaptor.BecomeRoot(char_literal103_tree, root_0);
				DebugLocation(215, 21);
				PushFollow(Follow._args_in_mapTemplateRef943);
				args104=args();
				PopFollow();

				adaptor.AddChild(root_0, args104.Tree);
				DebugLocation(215, 29);
				char_literal105=(CommonToken)Match(input,RPAREN,Follow._RPAREN_in_mapTemplateRef945); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Compiler\\TemplateParser.g3:216:4: subtemplate
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(216, 4);
				PushFollow(Follow._subtemplate_in_mapTemplateRef951);
				subtemplate106=subtemplate();
				PopFollow();

				adaptor.AddChild(root_0, subtemplate106.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Compiler\\TemplateParser.g3:217:4: '(' ^ mapExpr ')' ! '(' ! ( argExprList )? ')' !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(217, 20);
				char_literal107=(CommonToken)Match(input,LPAREN,Follow._LPAREN_in_mapTemplateRef956); 
				char_literal107_tree = (CommonTree)adaptor.Create(INCLUDE_IND,char_literal107);
				root_0 = (CommonTree)adaptor.BecomeRoot(char_literal107_tree, root_0);
				DebugLocation(217, 22);
				PushFollow(Follow._mapExpr_in_mapTemplateRef962);
				mapExpr108=mapExpr();
				PopFollow();

				adaptor.AddChild(root_0, mapExpr108.Tree);
				DebugLocation(217, 33);
				char_literal109=(CommonToken)Match(input,RPAREN,Follow._RPAREN_in_mapTemplateRef964); 
				DebugLocation(217, 38);
				char_literal110=(CommonToken)Match(input,LPAREN,Follow._LPAREN_in_mapTemplateRef967); 
				DebugLocation(217, 40);
				// Compiler\\TemplateParser.g3:217:40: ( argExprList )?
				int alt30=2;
				try { DebugEnterSubRule(30);
				try { DebugEnterDecision(30, false);
				int LA30_1 = input.LA(1);

				if ((LA30_1==SUPER||LA30_1==LPAREN||LA30_1==LBRACK||LA30_1==LCURLY||(LA30_1>=ID && LA30_1<=STRING)||LA30_1==AT||(LA30_1>=TRUE && LA30_1<=FALSE)))
				{
					alt30 = 1;
				}
				} finally { DebugExitDecision(30); }
				switch (alt30)
				{
				case 1:
					DebugEnterAlt(1);
					// Compiler\\TemplateParser.g3:217:40: argExprList
					{
					DebugLocation(217, 40);
					PushFollow(Follow._argExprList_in_mapTemplateRef970);
					argExprList111=argExprList();
					PopFollow();

					adaptor.AddChild(root_0, argExprList111.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(30); }

				DebugLocation(217, 56);
				char_literal112=(CommonToken)Match(input,RPAREN,Follow._RPAREN_in_mapTemplateRef973); 

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		catch (RecognitionException re) { re.PreserveStackTrace(); throw; }

		finally
		{
			TraceOut("mapTemplateRef", 25);
			LeaveRule("mapTemplateRef", 25);
			LeaveRule_mapTemplateRef();
		}
		DebugLocation(218, 1);
		} finally { DebugExitRule(GrammarFileName, "mapTemplateRef"); }
		return retval;

	}
	// $ANTLR end "mapTemplateRef"

	partial void EnterRule_memberExpr();
	partial void LeaveRule_memberExpr();
	// $ANTLR start "memberExpr"
	// Compiler\\TemplateParser.g3:220:1: memberExpr : includeExpr ( '.' ^ ID | '.' ^ '(' ! mapExpr ')' !)* ;
	[GrammarRule("memberExpr")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> memberExpr()
	{
		EnterRule_memberExpr();
		EnterRule("memberExpr", 26);
		TraceIn("memberExpr", 26);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal114 = default(CommonToken);
		CommonToken ID115 = default(CommonToken);
		CommonToken char_literal116 = default(CommonToken);
		CommonToken char_literal117 = default(CommonToken);
		CommonToken char_literal119 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> includeExpr113 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mapExpr118 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal114_tree = default(CommonTree);
		CommonTree ID115_tree = default(CommonTree);
		CommonTree char_literal116_tree = default(CommonTree);
		CommonTree char_literal117_tree = default(CommonTree);
		CommonTree char_literal119_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "memberExpr");
		DebugLocation(220, 1);
		try
		{
			// Compiler\\TemplateParser.g3:221:2: ( includeExpr ( '.' ^ ID | '.' ^ '(' ! mapExpr ')' !)* )
			DebugEnterAlt(1);
			// Compiler\\TemplateParser.g3:221:4: includeExpr ( '.' ^ ID | '.' ^ '(' ! mapExpr ')' !)*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(221, 4);
			PushFollow(Follow._includeExpr_in_memberExpr985);
			includeExpr113=includeExpr();
			PopFollow();

			adaptor.AddChild(root_0, includeExpr113.Tree);
			DebugLocation(222, 3);
			// Compiler\\TemplateParser.g3:222:3: ( '.' ^ ID | '.' ^ '(' ! mapExpr ')' !)*
			try { DebugEnterSubRule(32);
			while (true)
			{
				int alt32=3;
				try { DebugEnterDecision(32, false);
				int LA32_1 = input.LA(1);

				if ((LA32_1==DOT))
				{
					int LA32_2 = input.LA(2);

					if ((LA32_2==ID))
					{
						alt32 = 1;
					}
					else if ((LA32_2==LPAREN))
					{
						alt32 = 2;
					}


				}


				} finally { DebugExitDecision(32); }
				switch ( alt32 )
				{
				case 1:
					DebugEnterAlt(1);
					// Compiler\\TemplateParser.g3:222:5: '.' ^ ID
					{
					DebugLocation(222, 31);
					char_literal114=(CommonToken)Match(input,DOT,Follow._DOT_in_memberExpr991); 
					char_literal114_tree = (CommonTree)adaptor.Create(PROP,char_literal114,"PROP");
					root_0 = (CommonTree)adaptor.BecomeRoot(char_literal114_tree, root_0);
					DebugLocation(222, 33);
					ID115=(CommonToken)Match(input,ID,Follow._ID_in_memberExpr1003); 
					ID115_tree = (CommonTree)adaptor.Create(ID115);
					adaptor.AddChild(root_0, ID115_tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Compiler\\TemplateParser.g3:223:5: '.' ^ '(' ! mapExpr ')' !
					{
					DebugLocation(223, 39);
					char_literal116=(CommonToken)Match(input,DOT,Follow._DOT_in_memberExpr1009); 
					char_literal116_tree = (CommonTree)adaptor.Create(PROP_IND,char_literal116,"PROP_IND");
					root_0 = (CommonTree)adaptor.BecomeRoot(char_literal116_tree, root_0);
					DebugLocation(223, 44);
					char_literal117=(CommonToken)Match(input,LPAREN,Follow._LPAREN_in_memberExpr1021); 
					DebugLocation(223, 46);
					PushFollow(Follow._mapExpr_in_memberExpr1024);
					mapExpr118=mapExpr();
					PopFollow();

					adaptor.AddChild(root_0, mapExpr118.Tree);
					DebugLocation(223, 57);
					char_literal119=(CommonToken)Match(input,RPAREN,Follow._RPAREN_in_memberExpr1026); 

					}
					break;

				default:
					goto loop32;
				}
			}

			loop32:
				;

			} finally { DebugExitSubRule(32); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		catch (RecognitionException re) { re.PreserveStackTrace(); throw; }

		finally
		{
			TraceOut("memberExpr", 26);
			LeaveRule("memberExpr", 26);
			LeaveRule_memberExpr();
		}
		DebugLocation(225, 1);
		} finally { DebugExitRule(GrammarFileName, "memberExpr"); }
		return retval;

	}
	// $ANTLR end "memberExpr"

	partial void EnterRule_includeExpr();
	partial void LeaveRule_includeExpr();
	// $ANTLR start "includeExpr"
	// Compiler\\TemplateParser.g3:227:1: includeExpr options {k=2; } : ({...}? ID '(' ^ ( expr )? ')' !| 'super' ! '.' ! ID '(' ^ args ')' !| ID '(' ^ args ')' !| '@' ! 'super' ! '.' ! ID '(' ^ ')' !| '@' ! ID '(' ^ ')' !| primary );
	[GrammarRule("includeExpr")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> includeExpr()
	{
		EnterRule_includeExpr();
		EnterRule("includeExpr", 27);
		TraceIn("includeExpr", 27);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID120 = default(CommonToken);
		CommonToken char_literal121 = default(CommonToken);
		CommonToken char_literal123 = default(CommonToken);
		CommonToken string_literal124 = default(CommonToken);
		CommonToken char_literal125 = default(CommonToken);
		CommonToken ID126 = default(CommonToken);
		CommonToken char_literal127 = default(CommonToken);
		CommonToken char_literal129 = default(CommonToken);
		CommonToken ID130 = default(CommonToken);
		CommonToken char_literal131 = default(CommonToken);
		CommonToken char_literal133 = default(CommonToken);
		CommonToken char_literal134 = default(CommonToken);
		CommonToken string_literal135 = default(CommonToken);
		CommonToken char_literal136 = default(CommonToken);
		CommonToken ID137 = default(CommonToken);
		CommonToken char_literal138 = default(CommonToken);
		CommonToken char_literal139 = default(CommonToken);
		CommonToken char_literal140 = default(CommonToken);
		CommonToken ID141 = default(CommonToken);
		CommonToken char_literal142 = default(CommonToken);
		CommonToken char_literal143 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expr122 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> args128 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> args132 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> primary144 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID120_tree = default(CommonTree);
		CommonTree char_literal121_tree = default(CommonTree);
		CommonTree char_literal123_tree = default(CommonTree);
		CommonTree string_literal124_tree = default(CommonTree);
		CommonTree char_literal125_tree = default(CommonTree);
		CommonTree ID126_tree = default(CommonTree);
		CommonTree char_literal127_tree = default(CommonTree);
		CommonTree char_literal129_tree = default(CommonTree);
		CommonTree ID130_tree = default(CommonTree);
		CommonTree char_literal131_tree = default(CommonTree);
		CommonTree char_literal133_tree = default(CommonTree);
		CommonTree char_literal134_tree = default(CommonTree);
		CommonTree string_literal135_tree = default(CommonTree);
		CommonTree char_literal136_tree = default(CommonTree);
		CommonTree ID137_tree = default(CommonTree);
		CommonTree char_literal138_tree = default(CommonTree);
		CommonTree char_literal139_tree = default(CommonTree);
		CommonTree char_literal140_tree = default(CommonTree);
		CommonTree ID141_tree = default(CommonTree);
		CommonTree char_literal142_tree = default(CommonTree);
		CommonTree char_literal143_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "includeExpr");
		DebugLocation(227, 1);
		try
		{
			// Compiler\\TemplateParser.g3:229:2: ({...}? ID '(' ^ ( expr )? ')' !| 'super' ! '.' ! ID '(' ^ args ')' !| ID '(' ^ args ')' !| '@' ! 'super' ! '.' ! ID '(' ^ ')' !| '@' ! ID '(' ^ ')' !| primary )
			int alt34=6;
			try { DebugEnterDecision(34, false);
			switch (input.LA(1))
			{
			case ID:
				{
				int LA34_2 = input.LA(2);

				if ((LA34_2==LPAREN))
				{
					int LA34_3 = input.LA(3);

					if (((TemplateCompiler.funcs.ContainsKey(input.LT(1).Text))))
					{
						alt34 = 1;
					}
					else if ((true))
					{
						alt34 = 3;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 34, 10, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA34_2==SEMI||LA34_2==COLON||LA34_2==RPAREN||(LA34_2>=RBRACK && LA34_2<=DOT)||LA34_2==RDELIM||(LA34_2>=OR && LA34_2<=AND)))
				{
					alt34 = 6;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 34, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SUPER:
				{
				alt34 = 2;
				}
				break;
			case AT:
				{
				int LA34_2 = input.LA(2);

				if ((LA34_2==SUPER))
				{
					alt34 = 4;
				}
				else if ((LA34_2==ID))
				{
					alt34 = 5;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 34, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LPAREN:
			case LBRACK:
			case LCURLY:
			case STRING:
			case TRUE:
			case FALSE:
				{
				alt34 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 34, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\TemplateParser.g3:229:4: {...}? ID '(' ^ ( expr )? ')' !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(229, 4);
				if (!((TemplateCompiler.funcs.ContainsKey(input.LT(1).Text))))
				{
					throw new FailedPredicateException(input, "includeExpr", "TemplateCompiler.funcs.ContainsKey(input.LT(1).Text)");
				}
				DebugLocation(230, 3);
				ID120=(CommonToken)Match(input,ID,Follow._ID_in_includeExpr1056); 
				ID120_tree = (CommonTree)adaptor.Create(ID120);
				adaptor.AddChild(root_0, ID120_tree);
				DebugLocation(230, 20);
				char_literal121=(CommonToken)Match(input,LPAREN,Follow._LPAREN_in_includeExpr1058); 
				char_literal121_tree = (CommonTree)adaptor.Create(EXEC_FUNC,char_literal121);
				root_0 = (CommonTree)adaptor.BecomeRoot(char_literal121_tree, root_0);
				DebugLocation(230, 22);
				// Compiler\\TemplateParser.g3:230:22: ( expr )?
				int alt33=2;
				try { DebugEnterSubRule(33);
				try { DebugEnterDecision(33, false);
				int LA33_1 = input.LA(1);

				if ((LA33_1==SUPER||LA33_1==LPAREN||LA33_1==LBRACK||LA33_1==LCURLY||(LA33_1>=ID && LA33_1<=STRING)||LA33_1==AT||(LA33_1>=TRUE && LA33_1<=FALSE)))
				{
					alt33 = 1;
				}
				} finally { DebugExitDecision(33); }
				switch (alt33)
				{
				case 1:
					DebugEnterAlt(1);
					// Compiler\\TemplateParser.g3:230:22: expr
					{
					DebugLocation(230, 22);
					PushFollow(Follow._expr_in_includeExpr1064);
					expr122=expr();
					PopFollow();

					adaptor.AddChild(root_0, expr122.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(33); }

				DebugLocation(230, 31);
				char_literal123=(CommonToken)Match(input,RPAREN,Follow._RPAREN_in_includeExpr1067); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Compiler\\TemplateParser.g3:231:4: 'super' ! '.' ! ID '(' ^ args ')' !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(231, 11);
				string_literal124=(CommonToken)Match(input,SUPER,Follow._SUPER_in_includeExpr1073); 
				DebugLocation(231, 16);
				char_literal125=(CommonToken)Match(input,DOT,Follow._DOT_in_includeExpr1076); 
				DebugLocation(231, 18);
				ID126=(CommonToken)Match(input,ID,Follow._ID_in_includeExpr1079); 
				ID126_tree = (CommonTree)adaptor.Create(ID126);
				adaptor.AddChild(root_0, ID126_tree);
				DebugLocation(231, 39);
				char_literal127=(CommonToken)Match(input,LPAREN,Follow._LPAREN_in_includeExpr1081); 
				char_literal127_tree = (CommonTree)adaptor.Create(INCLUDE_SUPER,char_literal127);
				root_0 = (CommonTree)adaptor.BecomeRoot(char_literal127_tree, root_0);
				DebugLocation(231, 41);
				PushFollow(Follow._args_in_includeExpr1087);
				args128=args();
				PopFollow();

				adaptor.AddChild(root_0, args128.Tree);
				DebugLocation(231, 49);
				char_literal129=(CommonToken)Match(input,RPAREN,Follow._RPAREN_in_includeExpr1089); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Compiler\\TemplateParser.g3:232:4: ID '(' ^ args ')' !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(232, 4);
				ID130=(CommonToken)Match(input,ID,Follow._ID_in_includeExpr1095); 
				ID130_tree = (CommonTree)adaptor.Create(ID130);
				adaptor.AddChild(root_0, ID130_tree);
				DebugLocation(232, 19);
				char_literal131=(CommonToken)Match(input,LPAREN,Follow._LPAREN_in_includeExpr1097); 
				char_literal131_tree = (CommonTree)adaptor.Create(INCLUDE,char_literal131);
				root_0 = (CommonTree)adaptor.BecomeRoot(char_literal131_tree, root_0);
				DebugLocation(232, 21);
				PushFollow(Follow._args_in_includeExpr1103);
				args132=args();
				PopFollow();

				adaptor.AddChild(root_0, args132.Tree);
				DebugLocation(232, 29);
				char_literal133=(CommonToken)Match(input,RPAREN,Follow._RPAREN_in_includeExpr1105); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Compiler\\TemplateParser.g3:233:4: '@' ! 'super' ! '.' ! ID '(' ^ ')' !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(233, 7);
				char_literal134=(CommonToken)Match(input,AT,Follow._AT_in_includeExpr1111); 
				DebugLocation(233, 16);
				string_literal135=(CommonToken)Match(input,SUPER,Follow._SUPER_in_includeExpr1114); 
				DebugLocation(233, 21);
				char_literal136=(CommonToken)Match(input,DOT,Follow._DOT_in_includeExpr1117); 
				DebugLocation(233, 23);
				ID137=(CommonToken)Match(input,ID,Follow._ID_in_includeExpr1120); 
				ID137_tree = (CommonTree)adaptor.Create(ID137);
				adaptor.AddChild(root_0, ID137_tree);
				DebugLocation(233, 51);
				char_literal138=(CommonToken)Match(input,LPAREN,Follow._LPAREN_in_includeExpr1122); 
				char_literal138_tree = (CommonTree)adaptor.Create(INCLUDE_SUPER_REGION,char_literal138);
				root_0 = (CommonTree)adaptor.BecomeRoot(char_literal138_tree, root_0);
				DebugLocation(233, 56);
				char_literal139=(CommonToken)Match(input,RPAREN,Follow._RPAREN_in_includeExpr1128); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Compiler\\TemplateParser.g3:234:4: '@' ! ID '(' ^ ')' !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(234, 7);
				char_literal140=(CommonToken)Match(input,AT,Follow._AT_in_includeExpr1134); 
				DebugLocation(234, 9);
				ID141=(CommonToken)Match(input,ID,Follow._ID_in_includeExpr1137); 
				ID141_tree = (CommonTree)adaptor.Create(ID141);
				adaptor.AddChild(root_0, ID141_tree);
				DebugLocation(234, 31);
				char_literal142=(CommonToken)Match(input,LPAREN,Follow._LPAREN_in_includeExpr1139); 
				char_literal142_tree = (CommonTree)adaptor.Create(INCLUDE_REGION,char_literal142);
				root_0 = (CommonTree)adaptor.BecomeRoot(char_literal142_tree, root_0);
				DebugLocation(234, 36);
				char_literal143=(CommonToken)Match(input,RPAREN,Follow._RPAREN_in_includeExpr1145); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Compiler\\TemplateParser.g3:235:4: primary
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(235, 4);
				PushFollow(Follow._primary_in_includeExpr1151);
				primary144=primary();
				PopFollow();

				adaptor.AddChild(root_0, primary144.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		catch (RecognitionException re) { re.PreserveStackTrace(); throw; }

		finally
		{
			TraceOut("includeExpr", 27);
			LeaveRule("includeExpr", 27);
			LeaveRule_includeExpr();
		}
		DebugLocation(236, 1);
		} finally { DebugExitRule(GrammarFileName, "includeExpr"); }
		return retval;

	}
	// $ANTLR end "includeExpr"

	partial void EnterRule_primary();
	partial void LeaveRule_primary();
	// $ANTLR start "primary"
	// Compiler\\TemplateParser.g3:238:1: primary : ( ID | STRING | TRUE | FALSE | subtemplate | list |{...}? => '(' ! conditional ')' !|lp= '(' expr ')' ( '(' ( argExprList )? ')' -> ^( INCLUDE_IND[$lp] expr ( argExprList )? ) | -> ^( TO_STR[$lp] expr ) ) );
	[GrammarRule("primary")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> primary()
	{
		EnterRule_primary();
		EnterRule("primary", 28);
		TraceIn("primary", 28);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken lp = default(CommonToken);
		CommonToken ID145 = default(CommonToken);
		CommonToken STRING146 = default(CommonToken);
		CommonToken TRUE147 = default(CommonToken);
		CommonToken FALSE148 = default(CommonToken);
		CommonToken char_literal151 = default(CommonToken);
		CommonToken char_literal153 = default(CommonToken);
		CommonToken char_literal155 = default(CommonToken);
		CommonToken char_literal156 = default(CommonToken);
		CommonToken char_literal158 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> subtemplate149 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> list150 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> conditional152 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expr154 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> argExprList157 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree lp_tree = default(CommonTree);
		CommonTree ID145_tree = default(CommonTree);
		CommonTree STRING146_tree = default(CommonTree);
		CommonTree TRUE147_tree = default(CommonTree);
		CommonTree FALSE148_tree = default(CommonTree);
		CommonTree char_literal151_tree = default(CommonTree);
		CommonTree char_literal153_tree = default(CommonTree);
		CommonTree char_literal155_tree = default(CommonTree);
		CommonTree char_literal156_tree = default(CommonTree);
		CommonTree char_literal158_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_argExprList=new RewriteRuleSubtreeStream(adaptor,"rule argExprList");
		try { DebugEnterRule(GrammarFileName, "primary");
		DebugLocation(238, 1);
		try
		{
			// Compiler\\TemplateParser.g3:239:2: ( ID | STRING | TRUE | FALSE | subtemplate | list |{...}? => '(' ! conditional ')' !|lp= '(' expr ')' ( '(' ( argExprList )? ')' -> ^( INCLUDE_IND[$lp] expr ( argExprList )? ) | -> ^( TO_STR[$lp] expr ) ) )
			int alt37=8;
			try { DebugEnterDecision(37, false);
			switch (input.LA(1))
			{
			case ID:
				{
				alt37 = 1;
				}
				break;
			case STRING:
				{
				alt37 = 2;
				}
				break;
			case TRUE:
				{
				alt37 = 3;
				}
				break;
			case FALSE:
				{
				alt37 = 4;
				}
				break;
			case LCURLY:
				{
				alt37 = 5;
				}
				break;
			case LBRACK:
				{
				alt37 = 6;
				}
				break;
			case LPAREN:
				{
				int LA37_2 = input.LA(2);

				if (((conditional_stack.Count > 0)))
				{
					alt37 = 7;
				}
				else if ((true))
				{
					alt37 = 8;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 37, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 37, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\TemplateParser.g3:239:4: ID
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(239, 4);
				ID145=(CommonToken)Match(input,ID,Follow._ID_in_primary1162); 
				ID145_tree = (CommonTree)adaptor.Create(ID145);
				adaptor.AddChild(root_0, ID145_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Compiler\\TemplateParser.g3:240:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(240, 4);
				STRING146=(CommonToken)Match(input,STRING,Follow._STRING_in_primary1167); 
				STRING146_tree = (CommonTree)adaptor.Create(STRING146);
				adaptor.AddChild(root_0, STRING146_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Compiler\\TemplateParser.g3:241:4: TRUE
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(241, 4);
				TRUE147=(CommonToken)Match(input,TRUE,Follow._TRUE_in_primary1172); 
				TRUE147_tree = (CommonTree)adaptor.Create(TRUE147);
				adaptor.AddChild(root_0, TRUE147_tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Compiler\\TemplateParser.g3:242:4: FALSE
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(242, 4);
				FALSE148=(CommonToken)Match(input,FALSE,Follow._FALSE_in_primary1177); 
				FALSE148_tree = (CommonTree)adaptor.Create(FALSE148);
				adaptor.AddChild(root_0, FALSE148_tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Compiler\\TemplateParser.g3:243:4: subtemplate
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(243, 4);
				PushFollow(Follow._subtemplate_in_primary1182);
				subtemplate149=subtemplate();
				PopFollow();

				adaptor.AddChild(root_0, subtemplate149.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Compiler\\TemplateParser.g3:244:4: list
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(244, 4);
				PushFollow(Follow._list_in_primary1187);
				list150=list();
				PopFollow();

				adaptor.AddChild(root_0, list150.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Compiler\\TemplateParser.g3:245:4: {...}? => '(' ! conditional ')' !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(245, 4);
				if (!((conditional_stack.Count > 0)))
				{
					throw new FailedPredicateException(input, "primary", "$conditional.Count > 0");
				}
				DebugLocation(245, 36);
				char_literal151=(CommonToken)Match(input,LPAREN,Follow._LPAREN_in_primary1196); 
				DebugLocation(245, 38);
				PushFollow(Follow._conditional_in_primary1199);
				conditional152=conditional();
				PopFollow();

				adaptor.AddChild(root_0, conditional152.Tree);
				DebugLocation(245, 53);
				char_literal153=(CommonToken)Match(input,RPAREN,Follow._RPAREN_in_primary1201); 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Compiler\\TemplateParser.g3:246:4: lp= '(' expr ')' ( '(' ( argExprList )? ')' -> ^( INCLUDE_IND[$lp] expr ( argExprList )? ) | -> ^( TO_STR[$lp] expr ) )
				{
				DebugLocation(246, 6);
				lp=(CommonToken)Match(input,LPAREN,Follow._LPAREN_in_primary1209);  
				stream_LPAREN.Add(lp);

				DebugLocation(246, 11);
				PushFollow(Follow._expr_in_primary1211);
				expr154=expr();
				PopFollow();

				stream_expr.Add(expr154.Tree);
				DebugLocation(246, 16);
				char_literal155=(CommonToken)Match(input,RPAREN,Follow._RPAREN_in_primary1213);  
				stream_RPAREN.Add(char_literal155);

				DebugLocation(247, 3);
				// Compiler\\TemplateParser.g3:247:3: ( '(' ( argExprList )? ')' -> ^( INCLUDE_IND[$lp] expr ( argExprList )? ) | -> ^( TO_STR[$lp] expr ) )
				int alt36=2;
				try { DebugEnterSubRule(36);
				try { DebugEnterDecision(36, false);
				int LA36_1 = input.LA(1);

				if ((LA36_1==LPAREN))
				{
					alt36 = 1;
				}
				else if ((LA36_1==SEMI||LA36_1==COLON||LA36_1==RPAREN||(LA36_1>=RBRACK && LA36_1<=DOT)||LA36_1==RDELIM||(LA36_1>=OR && LA36_1<=AND)))
				{
					alt36 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 36, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(36); }
				switch (alt36)
				{
				case 1:
					DebugEnterAlt(1);
					// Compiler\\TemplateParser.g3:247:5: '(' ( argExprList )? ')'
					{
					DebugLocation(247, 5);
					char_literal156=(CommonToken)Match(input,LPAREN,Follow._LPAREN_in_primary1219);  
					stream_LPAREN.Add(char_literal156);

					DebugLocation(247, 9);
					// Compiler\\TemplateParser.g3:247:9: ( argExprList )?
					int alt35=2;
					try { DebugEnterSubRule(35);
					try { DebugEnterDecision(35, false);
					int LA35_1 = input.LA(1);

					if ((LA35_1==SUPER||LA35_1==LPAREN||LA35_1==LBRACK||LA35_1==LCURLY||(LA35_1>=ID && LA35_1<=STRING)||LA35_1==AT||(LA35_1>=TRUE && LA35_1<=FALSE)))
					{
						alt35 = 1;
					}
					} finally { DebugExitDecision(35); }
					switch (alt35)
					{
					case 1:
						DebugEnterAlt(1);
						// Compiler\\TemplateParser.g3:247:9: argExprList
						{
						DebugLocation(247, 9);
						PushFollow(Follow._argExprList_in_primary1221);
						argExprList157=argExprList();
						PopFollow();

						stream_argExprList.Add(argExprList157.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(35); }

					DebugLocation(247, 22);
					char_literal158=(CommonToken)Match(input,RPAREN,Follow._RPAREN_in_primary1224);  
					stream_RPAREN.Add(char_literal158);



					{
					// AST REWRITE
					// elements: expr, argExprList
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 247:29: -> ^( INCLUDE_IND[$lp] expr ( argExprList )? )
					{
						DebugLocation(247, 32);
						// Compiler\\TemplateParser.g3:247:32: ^( INCLUDE_IND[$lp] expr ( argExprList )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(247, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(INCLUDE_IND, lp), root_1);

						DebugLocation(247, 51);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(247, 56);
						// Compiler\\TemplateParser.g3:247:56: ( argExprList )?
						if (stream_argExprList.HasNext)
						{
							DebugLocation(247, 56);
							adaptor.AddChild(root_1, stream_argExprList.NextTree());

						}
						stream_argExprList.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Compiler\\TemplateParser.g3:248:14: 
					{

					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 248:14: -> ^( TO_STR[$lp] expr )
					{
						DebugLocation(248, 17);
						// Compiler\\TemplateParser.g3:248:17: ^( TO_STR[$lp] expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(248, 19);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TO_STR, lp), root_1);

						DebugLocation(248, 31);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(36); }


				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		catch (RecognitionException re) { re.PreserveStackTrace(); throw; }

		finally
		{
			TraceOut("primary", 28);
			LeaveRule("primary", 28);
			LeaveRule_primary();
		}
		DebugLocation(250, 1);
		} finally { DebugExitRule(GrammarFileName, "primary"); }
		return retval;

	}
	// $ANTLR end "primary"

	partial void EnterRule_args();
	partial void LeaveRule_args();
	// $ANTLR start "args"
	// Compiler\\TemplateParser.g3:252:1: args : ( argExprList | namedArg ( ',' ! namedArg )* ( ',' ! '...' )? | '...' |);
	[GrammarRule("args")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> args()
	{
		EnterRule_args();
		EnterRule("args", 29);
		TraceIn("args", 29);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal161 = default(CommonToken);
		CommonToken char_literal163 = default(CommonToken);
		CommonToken string_literal164 = default(CommonToken);
		CommonToken string_literal165 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> argExprList159 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> namedArg160 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> namedArg162 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal161_tree = default(CommonTree);
		CommonTree char_literal163_tree = default(CommonTree);
		CommonTree string_literal164_tree = default(CommonTree);
		CommonTree string_literal165_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "args");
		DebugLocation(252, 1);
		try
		{
			// Compiler\\TemplateParser.g3:253:2: ( argExprList | namedArg ( ',' ! namedArg )* ( ',' ! '...' )? | '...' |)
			int alt40=4;
			try { DebugEnterDecision(40, false);
			switch (input.LA(1))
			{
			case ID:
				{
				int LA40_2 = input.LA(2);

				if (((LA40_2>=COLON && LA40_2<=RPAREN)||(LA40_2>=COMMA && LA40_2<=DOT)))
				{
					alt40 = 1;
				}
				else if ((LA40_2==EQUALS))
				{
					alt40 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 40, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SUPER:
			case LPAREN:
			case LBRACK:
			case LCURLY:
			case STRING:
			case AT:
			case TRUE:
			case FALSE:
				{
				alt40 = 1;
				}
				break;
			case ELLIPSIS:
				{
				alt40 = 3;
				}
				break;
			case RPAREN:
				{
				alt40 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 40, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// Compiler\\TemplateParser.g3:253:4: argExprList
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(253, 4);
				PushFollow(Follow._argExprList_in_args1276);
				argExprList159=argExprList();
				PopFollow();

				adaptor.AddChild(root_0, argExprList159.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Compiler\\TemplateParser.g3:254:4: namedArg ( ',' ! namedArg )* ( ',' ! '...' )?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(254, 4);
				PushFollow(Follow._namedArg_in_args1281);
				namedArg160=namedArg();
				PopFollow();

				adaptor.AddChild(root_0, namedArg160.Tree);
				DebugLocation(254, 13);
				// Compiler\\TemplateParser.g3:254:13: ( ',' ! namedArg )*
				try { DebugEnterSubRule(38);
				while (true)
				{
					int alt38=2;
					try { DebugEnterDecision(38, false);
					int LA38_1 = input.LA(1);

					if ((LA38_1==COMMA))
					{
						int LA38_2 = input.LA(2);

						if ((LA38_2==ID))
						{
							alt38 = 1;
						}


					}


					} finally { DebugExitDecision(38); }
					switch ( alt38 )
					{
					case 1:
						DebugEnterAlt(1);
						// Compiler\\TemplateParser.g3:254:14: ',' ! namedArg
						{
						DebugLocation(254, 17);
						char_literal161=(CommonToken)Match(input,COMMA,Follow._COMMA_in_args1284); 
						DebugLocation(254, 19);
						PushFollow(Follow._namedArg_in_args1287);
						namedArg162=namedArg();
						PopFollow();

						adaptor.AddChild(root_0, namedArg162.Tree);

						}
						break;

					default:
						goto loop38;
					}
				}

				loop38:
					;

				} finally { DebugExitSubRule(38); }

				DebugLocation(254, 30);
				// Compiler\\TemplateParser.g3:254:30: ( ',' ! '...' )?
				int alt39=2;
				try { DebugEnterSubRule(39);
				try { DebugEnterDecision(39, false);
				int LA39_1 = input.LA(1);

				if ((LA39_1==COMMA))
				{
					alt39 = 1;
				}
				} finally { DebugExitDecision(39); }
				switch (alt39)
				{
				case 1:
					DebugEnterAlt(1);
					// Compiler\\TemplateParser.g3:254:31: ',' ! '...'
					{
					DebugLocation(254, 34);
					char_literal163=(CommonToken)Match(input,COMMA,Follow._COMMA_in_args1292); 
					DebugLocation(254, 36);
					string_literal164=(CommonToken)Match(input,ELLIPSIS,Follow._ELLIPSIS_in_args1295); 
					string_literal164_tree = (CommonTree)adaptor.Create(string_literal164);
					adaptor.AddChild(root_0, string_literal164_tree);

					}
					break;

				}
				} finally { DebugExitSubRule(39); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Compiler\\TemplateParser.g3:255:4: '...'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(255, 4);
				string_literal165=(CommonToken)Match(input,ELLIPSIS,Follow._ELLIPSIS_in_args1302); 
				string_literal165_tree = (CommonTree)adaptor.Create(string_literal165);
				adaptor.AddChild(root_0, string_literal165_tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Compiler\\TemplateParser.g3:257:2: 
				{
				root_0 = (CommonTree)adaptor.Nil();

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		catch (RecognitionException re) { re.PreserveStackTrace(); throw; }

		finally
		{
			TraceOut("args", 29);
			LeaveRule("args", 29);
			LeaveRule_args();
		}
		DebugLocation(257, 1);
		} finally { DebugExitRule(GrammarFileName, "args"); }
		return retval;

	}
	// $ANTLR end "args"

	partial void EnterRule_argExprList();
	partial void LeaveRule_argExprList();
	// $ANTLR start "argExprList"
	// Compiler\\TemplateParser.g3:259:1: argExprList : arg ( ',' ! arg )* ;
	[GrammarRule("argExprList")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> argExprList()
	{
		EnterRule_argExprList();
		EnterRule("argExprList", 30);
		TraceIn("argExprList", 30);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal167 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> arg166 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> arg168 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal167_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "argExprList");
		DebugLocation(259, 29);
		try
		{
			// Compiler\\TemplateParser.g3:259:13: ( arg ( ',' ! arg )* )
			DebugEnterAlt(1);
			// Compiler\\TemplateParser.g3:259:15: arg ( ',' ! arg )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(259, 15);
			PushFollow(Follow._arg_in_argExprList1315);
			arg166=arg();
			PopFollow();

			adaptor.AddChild(root_0, arg166.Tree);
			DebugLocation(259, 19);
			// Compiler\\TemplateParser.g3:259:19: ( ',' ! arg )*
			try { DebugEnterSubRule(41);
			while (true)
			{
				int alt41=2;
				try { DebugEnterDecision(41, false);
				int LA41_1 = input.LA(1);

				if ((LA41_1==COMMA))
				{
					alt41 = 1;
				}


				} finally { DebugExitDecision(41); }
				switch ( alt41 )
				{
				case 1:
					DebugEnterAlt(1);
					// Compiler\\TemplateParser.g3:259:20: ',' ! arg
					{
					DebugLocation(259, 23);
					char_literal167=(CommonToken)Match(input,COMMA,Follow._COMMA_in_argExprList1318); 
					DebugLocation(259, 25);
					PushFollow(Follow._arg_in_argExprList1321);
					arg168=arg();
					PopFollow();

					adaptor.AddChild(root_0, arg168.Tree);

					}
					break;

				default:
					goto loop41;
				}
			}

			loop41:
				;

			} finally { DebugExitSubRule(41); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		catch (RecognitionException re) { re.PreserveStackTrace(); throw; }

		finally
		{
			TraceOut("argExprList", 30);
			LeaveRule("argExprList", 30);
			LeaveRule_argExprList();
		}
		DebugLocation(259, 29);
		} finally { DebugExitRule(GrammarFileName, "argExprList"); }
		return retval;

	}
	// $ANTLR end "argExprList"

	partial void EnterRule_arg();
	partial void LeaveRule_arg();
	// $ANTLR start "arg"
	// Compiler\\TemplateParser.g3:261:1: arg : exprNoComma ;
	[GrammarRule("arg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> arg()
	{
		EnterRule_arg();
		EnterRule("arg", 31);
		TraceIn("arg", 31);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> exprNoComma169 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "arg");
		DebugLocation(261, 18);
		try
		{
			// Compiler\\TemplateParser.g3:261:5: ( exprNoComma )
			DebugEnterAlt(1);
			// Compiler\\TemplateParser.g3:261:7: exprNoComma
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(261, 7);
			PushFollow(Follow._exprNoComma_in_arg1331);
			exprNoComma169=exprNoComma();
			PopFollow();

			adaptor.AddChild(root_0, exprNoComma169.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		catch (RecognitionException re) { re.PreserveStackTrace(); throw; }

		finally
		{
			TraceOut("arg", 31);
			LeaveRule("arg", 31);
			LeaveRule_arg();
		}
		DebugLocation(261, 18);
		} finally { DebugExitRule(GrammarFileName, "arg"); }
		return retval;

	}
	// $ANTLR end "arg"

	partial void EnterRule_namedArg();
	partial void LeaveRule_namedArg();
	// $ANTLR start "namedArg"
	// Compiler\\TemplateParser.g3:263:1: namedArg : ID '=' ^ arg ;
	[GrammarRule("namedArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> namedArg()
	{
		EnterRule_namedArg();
		EnterRule("namedArg", 32);
		TraceIn("namedArg", 32);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID170 = default(CommonToken);
		CommonToken char_literal171 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> arg172 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID170_tree = default(CommonTree);
		CommonTree char_literal171_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "namedArg");
		DebugLocation(263, 22);
		try
		{
			// Compiler\\TemplateParser.g3:263:10: ( ID '=' ^ arg )
			DebugEnterAlt(1);
			// Compiler\\TemplateParser.g3:263:12: ID '=' ^ arg
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(263, 12);
			ID170=(CommonToken)Match(input,ID,Follow._ID_in_namedArg1340); 
			ID170_tree = (CommonTree)adaptor.Create(ID170);
			adaptor.AddChild(root_0, ID170_tree);
			DebugLocation(263, 18);
			char_literal171=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_namedArg1342); 
			char_literal171_tree = (CommonTree)adaptor.Create(char_literal171);
			root_0 = (CommonTree)adaptor.BecomeRoot(char_literal171_tree, root_0);
			DebugLocation(263, 20);
			PushFollow(Follow._arg_in_namedArg1345);
			arg172=arg();
			PopFollow();

			adaptor.AddChild(root_0, arg172.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		catch (RecognitionException re) { re.PreserveStackTrace(); throw; }

		finally
		{
			TraceOut("namedArg", 32);
			LeaveRule("namedArg", 32);
			LeaveRule_namedArg();
		}
		DebugLocation(263, 22);
		} finally { DebugExitRule(GrammarFileName, "namedArg"); }
		return retval;

	}
	// $ANTLR end "namedArg"

	partial void EnterRule_list();
	partial void LeaveRule_list();
	// $ANTLR start "list"
	// Compiler\\TemplateParser.g3:265:1: list : '[' ^ ({...}? => ( exprNoComma ( ',' !| ']' !) | ',' |{...}? => ']' | ']' !) )+ ;
	[GrammarRule("list")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> list()
	{
		EnterRule_list();
		EnterRule("list", 33);
		TraceIn("list", 33);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal173 = default(CommonToken);
		CommonToken char_literal175 = default(CommonToken);
		CommonToken char_literal176 = default(CommonToken);
		CommonToken char_literal177 = default(CommonToken);
		CommonToken char_literal178 = default(CommonToken);
		CommonToken char_literal179 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> exprNoComma174 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal173_tree = default(CommonTree);
		CommonTree char_literal175_tree = default(CommonTree);
		CommonTree char_literal176_tree = default(CommonTree);
		CommonTree char_literal177_tree = default(CommonTree);
		CommonTree char_literal178_tree = default(CommonTree);
		CommonTree char_literal179_tree = default(CommonTree);

		bool empty = true;
		bool finished = false;

		try { DebugEnterRule(GrammarFileName, "list");
		DebugLocation(265, 1);
		try
		{
			// Compiler\\TemplateParser.g3:270:2: ( '[' ^ ({...}? => ( exprNoComma ( ',' !| ']' !) | ',' |{...}? => ']' | ']' !) )+ )
			DebugEnterAlt(1);
			// Compiler\\TemplateParser.g3:270:4: '[' ^ ({...}? => ( exprNoComma ( ',' !| ']' !) | ',' |{...}? => ']' | ']' !) )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(270, 13);
			char_literal173=(CommonToken)Match(input,LBRACK,Follow._LBRACK_in_list1359); 
			char_literal173_tree = (CommonTree)adaptor.Create(LIST,char_literal173);
			root_0 = (CommonTree)adaptor.BecomeRoot(char_literal173_tree, root_0);
			DebugLocation(271, 4);
			// Compiler\\TemplateParser.g3:271:4: ({...}? => ( exprNoComma ( ',' !| ']' !) | ',' |{...}? => ']' | ']' !) )+
			int cnt44=0;
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=2;
				try { DebugEnterDecision(44, false);
				int LA44_1 = input.LA(1);

				if ((LA44_1==COMMA))
				{
					int LA44_2 = input.LA(2);

					if (((!finished)))
					{
						alt44 = 1;
					}


				}
				else if ((LA44_1==RBRACK))
				{
					int LA44_2 = input.LA(2);

					if (((!finished)))
					{
						alt44 = 1;
					}


				}
				else if ((LA44_1==SUPER||LA44_1==LPAREN||LA44_1==LBRACK||LA44_1==LCURLY||(LA44_1>=ID && LA44_1<=STRING)||LA44_1==AT||(LA44_1>=TRUE && LA44_1<=FALSE)) && ((!finished)))
				{
					alt44 = 1;
				}


				} finally { DebugExitDecision(44); }
				switch (alt44)
				{
				case 1:
					DebugEnterAlt(1);
					// Compiler\\TemplateParser.g3:271:6: {...}? => ( exprNoComma ( ',' !| ']' !) | ',' |{...}? => ']' | ']' !)
					{
					DebugLocation(271, 6);
					if (!((!finished)))
					{
						throw new FailedPredicateException(input, "list", "!finished");
					}
					DebugLocation(272, 5);
					// Compiler\\TemplateParser.g3:272:5: ( exprNoComma ( ',' !| ']' !) | ',' |{...}? => ']' | ']' !)
					int alt43=4;
					try { DebugEnterSubRule(43);
					try { DebugEnterDecision(43, false);
					switch (input.LA(1))
					{
					case SUPER:
					case LPAREN:
					case LBRACK:
					case LCURLY:
					case ID:
					case STRING:
					case AT:
					case TRUE:
					case FALSE:
						{
						alt43 = 1;
						}
						break;
					case COMMA:
						{
						alt43 = 2;
						}
						break;
					case RBRACK:
						{
						int LA43_2 = input.LA(2);

						if (((!empty)))
						{
							alt43 = 3;
						}
						else if ((true))
						{
							alt43 = 4;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 43, 3, input, 2);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 43, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(43); }
					switch (alt43)
					{
					case 1:
						DebugEnterAlt(1);
						// Compiler\\TemplateParser.g3:272:7: exprNoComma ( ',' !| ']' !)
						{
						DebugLocation(272, 7);
						PushFollow(Follow._exprNoComma_in_list1380);
						exprNoComma174=exprNoComma();
						PopFollow();

						adaptor.AddChild(root_0, exprNoComma174.Tree);
						DebugLocation(273, 6);
						// Compiler\\TemplateParser.g3:273:6: ( ',' !| ']' !)
						int alt42=2;
						try { DebugEnterSubRule(42);
						try { DebugEnterDecision(42, false);
						int LA42_1 = input.LA(1);

						if ((LA42_1==COMMA))
						{
							alt42 = 1;
						}
						else if ((LA42_1==RBRACK))
						{
							alt42 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 42, 0, input, 1);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(42); }
						switch (alt42)
						{
						case 1:
							DebugEnterAlt(1);
							// Compiler\\TemplateParser.g3:273:8: ',' !
							{
							DebugLocation(273, 11);
							char_literal175=(CommonToken)Match(input,COMMA,Follow._COMMA_in_list1389); 

							}
							break;
						case 2:
							DebugEnterAlt(2);
							// Compiler\\TemplateParser.g3:274:8: ']' !
							{
							DebugLocation(274, 11);
							char_literal176=(CommonToken)Match(input,RBRACK,Follow._RBRACK_in_list1399); 
							DebugLocation(274, 13);
							finished=true;

							}
							break;

						}
						} finally { DebugExitSubRule(42); }

						DebugLocation(275, 8);
						empty=false;

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// Compiler\\TemplateParser.g3:276:7: ','
						{
						DebugLocation(276, 7);
						char_literal177=(CommonToken)Match(input,COMMA,Follow._COMMA_in_list1419); 
						char_literal177_tree = (CommonTree)adaptor.Create(NULL,char_literal177);
						adaptor.AddChild(root_0, char_literal177_tree);
						DebugLocation(276, 17);
						empty=false;

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// Compiler\\TemplateParser.g3:277:7: {...}? => ']'
						{
						DebugLocation(277, 7);
						if (!((!empty)))
						{
							throw new FailedPredicateException(input, "list", "!empty");
						}
						DebugLocation(277, 20);
						char_literal178=(CommonToken)Match(input,RBRACK,Follow._RBRACK_in_list1436); 
						char_literal178_tree = (CommonTree)adaptor.Create(NULL,char_literal178);
						adaptor.AddChild(root_0, char_literal178_tree);
						DebugLocation(277, 30);
						finished=true;

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// Compiler\\TemplateParser.g3:278:7: ']' !
						{
						DebugLocation(278, 10);
						char_literal179=(CommonToken)Match(input,RBRACK,Follow._RBRACK_in_list1449); 
						DebugLocation(278, 12);
						finished=true;

						}
						break;

					}
					} finally { DebugExitSubRule(43); }


					}
					break;

				default:
					if (cnt44 >= 1)
						goto loop44;

					EarlyExitException eee44 = new EarlyExitException( 44, input );
					DebugRecognitionException(eee44);
					throw eee44;
				}
				cnt44++;
			}
			loop44:
				;

			} finally { DebugExitSubRule(44); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}

		catch (RecognitionException re) { re.PreserveStackTrace(); throw; }

		finally
		{
			TraceOut("list", 33);
			LeaveRule("list", 33);
			LeaveRule_list();
		}
		DebugLocation(281, 1);
		} finally { DebugExitRule(GrammarFileName, "list"); }
		return retval;

	}
	// $ANTLR end "list"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _template_in_templateAndEOF141 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_templateAndEOF143 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _element_in_template152 = new BitSet(new ulong[]{0x2180C00002UL});
		public static readonly BitSet _INDENT_in_element165 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _COMMENT_in_element169 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _NEWLINE_in_element172 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDENT_in_element178 = new BitSet(new ulong[]{0x2100C00000UL});
		public static readonly BitSet _singleElement_in_element181 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _singleElement_in_element186 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _compoundElement_in_element191 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _exprTag_in_singleElement202 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TEXT_in_singleElement207 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_singleElement212 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMENT_in_singleElement217 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ifstat_in_compoundElement230 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _region_in_compoundElement235 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LDELIM_in_exprTag246 = new BitSet(new ulong[]{0x1A06114100UL});
		public static readonly BitSet _expr_in_exprTag258 = new BitSet(new ulong[]{0x1000200UL});
		public static readonly BitSet _exprOptions_in_exprTag260 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _RDELIM_in_exprTag263 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDENT_in_region285 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _regionbody_in_region289 = new BitSet(new ulong[]{0x100000002UL});
		public static readonly BitSet _NEWLINE_in_region301 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LDELIM_in_regionbody322 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _AT_in_regionbody328 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _ID_in_regionbody331 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _RDELIM_in_regionbody333 = new BitSet(new ulong[]{0x2180C00000UL});
		public static readonly BitSet _template_in_regionbody340 = new BitSet(new ulong[]{0x80800000UL});
		public static readonly BitSet _INDENT_in_regionbody344 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _LDELIM_in_regionbody348 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _END_in_regionbody351 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _RDELIM_in_regionbody354 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_subtemplate366 = new BitSet(new ulong[]{0x2182E00000UL});
		public static readonly BitSet _subtemplateargs_in_subtemplate378 = new BitSet(new ulong[]{0x2180E00000UL});
		public static readonly BitSet _template_in_subtemplate381 = new BitSet(new ulong[]{0x80200000UL});
		public static readonly BitSet _INDENT_in_subtemplate383 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _RCURLY_in_subtemplate387 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subtemplate_args_trunc_in_subtemplateargs402 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _subtemplate_args_last_in_subtemplateargs405 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_subtemplate_args_trunc416 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _COMMA_in_subtemplate_args_trunc418 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_subtemplate_args_last433 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _PIPE_in_subtemplate_args_last435 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDENT_in_ifstat460 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _ifstatbody_in_ifstat464 = new BitSet(new ulong[]{0x100000002UL});
		public static readonly BitSet _NEWLINE_in_ifstat475 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LDELIM_in_ifstatbody496 = new BitSet(new ulong[]{0x10UL});
		public static readonly BitSet _IF_in_ifstatbody499 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _LPAREN_in_ifstatbody502 = new BitSet(new ulong[]{0x1A06114500UL});
		public static readonly BitSet _conditional_in_ifstatbody505 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _RPAREN_in_ifstatbody507 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _RDELIM_in_ifstatbody510 = new BitSet(new ulong[]{0x2180C00000UL});
		public static readonly BitSet _template_in_ifstatbody518 = new BitSet(new ulong[]{0x80800000UL});
		public static readonly BitSet _elseifstat_in_ifstatbody523 = new BitSet(new ulong[]{0x80800000UL});
		public static readonly BitSet _elsestat_in_ifstatbody529 = new BitSet(new ulong[]{0x80800000UL});
		public static readonly BitSet _INDENT_in_ifstatbody535 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _LDELIM_in_ifstatbody539 = new BitSet(new ulong[]{0x80UL});
		public static readonly BitSet _ENDIF_in_ifstatbody542 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _RDELIM_in_ifstatbody547 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDENT_in_elseifstat559 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _LDELIM_in_elseifstat563 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _ELSEIF_in_elseifstat566 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _LPAREN_in_elseifstat569 = new BitSet(new ulong[]{0x1A06114500UL});
		public static readonly BitSet _conditional_in_elseifstat572 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _RPAREN_in_elseifstat574 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _RDELIM_in_elseifstat577 = new BitSet(new ulong[]{0x2180C00000UL});
		public static readonly BitSet _template_in_elseifstat580 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDENT_in_elsestat591 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _LDELIM_in_elsestat595 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _ELSE_in_elsestat598 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _RDELIM_in_elsestat601 = new BitSet(new ulong[]{0x2180C00000UL});
		public static readonly BitSet _template_in_elsestat604 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _andConditional_in_conditional619 = new BitSet(new ulong[]{0x20000002UL});
		public static readonly BitSet _OR_in_conditional623 = new BitSet(new ulong[]{0x1A06114500UL});
		public static readonly BitSet _andConditional_in_conditional626 = new BitSet(new ulong[]{0x20000002UL});
		public static readonly BitSet _notConditional_in_andConditional639 = new BitSet(new ulong[]{0x40000002UL});
		public static readonly BitSet _AND_in_andConditional643 = new BitSet(new ulong[]{0x1A06114500UL});
		public static readonly BitSet _notConditional_in_andConditional646 = new BitSet(new ulong[]{0x40000002UL});
		public static readonly BitSet _BANG_in_notConditional659 = new BitSet(new ulong[]{0x1A06114500UL});
		public static readonly BitSet _notConditional_in_notConditional662 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberExpr_in_notConditional667 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_exprOptions678 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _option_in_exprOptions684 = new BitSet(new ulong[]{0x40002UL});
		public static readonly BitSet _COMMA_in_exprOptions688 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _option_in_exprOptions691 = new BitSet(new ulong[]{0x40002UL});
		public static readonly BitSet _ID_in_option708 = new BitSet(new ulong[]{0x1002UL});
		public static readonly BitSet _EQUALS_in_option718 = new BitSet(new ulong[]{0x1A06114100UL});
		public static readonly BitSet _exprNoComma_in_option720 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberExpr_in_exprNoComma827 = new BitSet(new ulong[]{0x2002UL});
		public static readonly BitSet _COLON_in_exprNoComma832 = new BitSet(new ulong[]{0x2104000UL});
		public static readonly BitSet _mapTemplateRef_in_exprNoComma838 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mapExpr_in_expr850 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberExpr_in_mapExpr862 = new BitSet(new ulong[]{0x42002UL});
		public static readonly BitSet _COMMA_in_mapExpr870 = new BitSet(new ulong[]{0x1A06114100UL});
		public static readonly BitSet _memberExpr_in_mapExpr876 = new BitSet(new ulong[]{0x42000UL});
		public static readonly BitSet _COMMA_in_mapExpr881 = new BitSet(new ulong[]{0x1A06114100UL});
		public static readonly BitSet _memberExpr_in_mapExpr884 = new BitSet(new ulong[]{0x42000UL});
		public static readonly BitSet _COLON_in_mapExpr889 = new BitSet(new ulong[]{0x2104000UL});
		public static readonly BitSet _mapTemplateRef_in_mapExpr895 = new BitSet(new ulong[]{0x2002UL});
		public static readonly BitSet _COLON_in_mapExpr902 = new BitSet(new ulong[]{0x2104000UL});
		public static readonly BitSet _mapTemplateRef_in_mapExpr908 = new BitSet(new ulong[]{0x42002UL});
		public static readonly BitSet _COMMA_in_mapExpr915 = new BitSet(new ulong[]{0x2104000UL});
		public static readonly BitSet _mapTemplateRef_in_mapExpr918 = new BitSet(new ulong[]{0x42002UL});
		public static readonly BitSet _ID_in_mapTemplateRef935 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _LPAREN_in_mapTemplateRef937 = new BitSet(new ulong[]{0x1A0611C900UL});
		public static readonly BitSet _args_in_mapTemplateRef943 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _RPAREN_in_mapTemplateRef945 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subtemplate_in_mapTemplateRef951 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_mapTemplateRef956 = new BitSet(new ulong[]{0x1A06114100UL});
		public static readonly BitSet _mapExpr_in_mapTemplateRef962 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _RPAREN_in_mapTemplateRef964 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _LPAREN_in_mapTemplateRef967 = new BitSet(new ulong[]{0x1A0611C100UL});
		public static readonly BitSet _argExprList_in_mapTemplateRef970 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _RPAREN_in_mapTemplateRef973 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _includeExpr_in_memberExpr985 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _DOT_in_memberExpr991 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _ID_in_memberExpr1003 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _DOT_in_memberExpr1009 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _LPAREN_in_memberExpr1021 = new BitSet(new ulong[]{0x1A06114100UL});
		public static readonly BitSet _mapExpr_in_memberExpr1024 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _RPAREN_in_memberExpr1026 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _ID_in_includeExpr1056 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _LPAREN_in_includeExpr1058 = new BitSet(new ulong[]{0x1A0611C100UL});
		public static readonly BitSet _expr_in_includeExpr1064 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _RPAREN_in_includeExpr1067 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_includeExpr1073 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _DOT_in_includeExpr1076 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _ID_in_includeExpr1079 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _LPAREN_in_includeExpr1081 = new BitSet(new ulong[]{0x1A0611C900UL});
		public static readonly BitSet _args_in_includeExpr1087 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _RPAREN_in_includeExpr1089 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_includeExpr1095 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _LPAREN_in_includeExpr1097 = new BitSet(new ulong[]{0x1A0611C900UL});
		public static readonly BitSet _args_in_includeExpr1103 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _RPAREN_in_includeExpr1105 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _AT_in_includeExpr1111 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _SUPER_in_includeExpr1114 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _DOT_in_includeExpr1117 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _ID_in_includeExpr1120 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _LPAREN_in_includeExpr1122 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _RPAREN_in_includeExpr1128 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _AT_in_includeExpr1134 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _ID_in_includeExpr1137 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _LPAREN_in_includeExpr1139 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _RPAREN_in_includeExpr1145 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primary_in_includeExpr1151 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_primary1162 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_primary1167 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRUE_in_primary1172 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FALSE_in_primary1177 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subtemplate_in_primary1182 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_in_primary1187 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_primary1196 = new BitSet(new ulong[]{0x1A06114500UL});
		public static readonly BitSet _conditional_in_primary1199 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _RPAREN_in_primary1201 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_primary1209 = new BitSet(new ulong[]{0x1A06114100UL});
		public static readonly BitSet _expr_in_primary1211 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _RPAREN_in_primary1213 = new BitSet(new ulong[]{0x4002UL});
		public static readonly BitSet _LPAREN_in_primary1219 = new BitSet(new ulong[]{0x1A0611C100UL});
		public static readonly BitSet _argExprList_in_primary1221 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _RPAREN_in_primary1224 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _argExprList_in_args1276 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namedArg_in_args1281 = new BitSet(new ulong[]{0x40002UL});
		public static readonly BitSet _COMMA_in_args1284 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _namedArg_in_args1287 = new BitSet(new ulong[]{0x40002UL});
		public static readonly BitSet _COMMA_in_args1292 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _ELLIPSIS_in_args1295 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELLIPSIS_in_args1302 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arg_in_argExprList1315 = new BitSet(new ulong[]{0x40002UL});
		public static readonly BitSet _COMMA_in_argExprList1318 = new BitSet(new ulong[]{0x1A06114100UL});
		public static readonly BitSet _arg_in_argExprList1321 = new BitSet(new ulong[]{0x40002UL});
		public static readonly BitSet _exprNoComma_in_arg1331 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_namedArg1340 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _EQUALS_in_namedArg1342 = new BitSet(new ulong[]{0x1A06114100UL});
		public static readonly BitSet _arg_in_namedArg1345 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACK_in_list1359 = new BitSet(new ulong[]{0x1A06174100UL});
		public static readonly BitSet _exprNoComma_in_list1380 = new BitSet(new ulong[]{0x60000UL});
		public static readonly BitSet _COMMA_in_list1389 = new BitSet(new ulong[]{0x1A06174102UL});
		public static readonly BitSet _RBRACK_in_list1399 = new BitSet(new ulong[]{0x1A06174102UL});
		public static readonly BitSet _COMMA_in_list1419 = new BitSet(new ulong[]{0x1A06174102UL});
		public static readonly BitSet _RBRACK_in_list1436 = new BitSet(new ulong[]{0x1A06174102UL});
		public static readonly BitSet _RBRACK_in_list1449 = new BitSet(new ulong[]{0x1A06174102UL});
	}
	#endregion Follow sets
}

} // namespace Antlr4.StringTemplate.Compiler
